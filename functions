#!/bin/sh
PROJECT_NAME=JambulaTV
PROJECT_URL="http://www.jambulatv.com"
PROJECT_DOMAINS="jambulatv.com, jambula.co, jambula.net, jambula.xyz" 
COMPANY_NAME="Jambula Labs"
COMPANY_URL="http://www.jambulalabs.com"
COMPANY_WORKGROUP="JAMBULA"
COPYRIGHT_YEAR_START=$(date '+%Y')
COPYRIGHT_YEAR_END=$(date '+%Y' --date='12 months')
COPYRIGHT_NOTICE=" Â©$COPYRIGHT_YEAR_START-$COPYRIGHT_YEAR_END $COMPANY_NAME All Rights Reserved."
EMAIL_ADDRESS_SUPPORT=support@jambulatv.com
EMAIL_ADDRESS_ERRORS=errors@jambulatv.com

KERNEL_NAME="$PROJECT_NAME"
KERNEL_VERSION="4.4.128"

PRODUCT_MODEL_NAME="$PROJECT_NAME"
PRODUCT_DISK_SIZE=$(journalctl -b -o cat --no-pager | grep sda | grep logical | awk {'print $8'} | sed 's:(::')
PRODUCT_MODEL_NUMBER=$(echo JTV$KERNEL_VERSION-$PRODUCT_DISK_SIZE | sed "s/\.//g")
PRODUCT_SERIAL_NUMBER=$(uuid | cut -d - -f5)

ROOT_DIR=/JambulaTV
AUTOLOGIN_USER=jambula
AUTOLOGIN_USER_HOME_DIR=`finger $AUTOLOGIN_USER | grep Directory: | awk {'print $2'}`
AUTOLOGIN_USER_COMMANDS="/usr/bin/xinit, /sbin/shutdown -h now, /usr/bin/nice, /usr/bin/kill, /usr/bin/killall, /usr/bin/rm, /usr/bin/jambulatv*, /usr/bin/systemctl, /usr/bin/chown, /usr/bin/chmod, /usr/bin/mkdir, /usr/sbin/alsactl, /usr/bin/amixer, /usr/sbin/ip, /usr/bin/touch, /usr/bin/cp, /usr/bin/sed, /usr/bin/grep, /usr/sbin/chpasswd, /usr/bin/chattr, /usr/sbin/asterisk, /usr/sbin/iftop, /usr/bin/bwm-ng, /usr/bin/socat"
MULTIMEDIA_USER=$AUTOLOGIN_USER
MULTIMEDIA_USER_HOME_DIR=$AUTOLOGIN_USER_HOME_DIR
BACKUPS_DIR=$ROOT_DIR/Backups
#
# System directories
PREFIX=/usr
CONFDIR=/etc
STATEDIR=/var
RUNDIR=/run
TMPDIR=/tmp
DATAROOTDIR=$PREFIX/share
DOCSDIR=$DATAROOTDIR/doc
SOURCESDIR=/opt
KERNELS_SRC_DIR=/usr/src/kernels
SPOOLDIR=$STATEDIR/spool
VARLIBDIR=$STATEDIR/lib
LOGDIR=$STATEDIR/log
CACHEDIR=$STATEDIR/cache
BINARY_PREFIX=/usr/bin
SBINARY_PREFIX=/usr/sbin
# Libraries directory
case $(uname -m) in
x86_64)
LIBDIR=$PREFIX/lib64
;;
i686)
LIBDIR=$PREFIX/lib
;;
*)
LIBDIR=$PREFIX/lib
;;
esac
INCDIR=$PREFIX/include
CRONTABS_DIR=$SPOOLDIR/cron
MANDIR1=$DATAROOTDIR/man/man1
MANDIR3=$DATAROOTDIR/man/man3
MANDIR8=$DATAROOTDIR/man/man8
SYSCTL_DIR=$CONFDIR/sysctl.d
UDEV_RULES_DIR=/etc/udev/rules.d
LOGROTATE_CONF_DIR=$CONFDIR/logrotate.d
FIRMWARE_DIR=$PREFIX/lib/firmware
POST_INSTALL_NOTES=$ROOT_DIR/post_install_notes
# Source directories
PROJECT_BASE_DIR=$SOURCESDIR/$PROJECT_NAME
PROJECT_PATCHES_DIR=$PROJECT_BASE_DIR/patches
PROJECT_CONFIGS_DIR=$PROJECT_BASE_DIR/configs
PROJECT_SRC_DIR=$PROJECT_BASE_DIR/src
PROJECT_BIN_DIR=$PROJECT_BASE_DIR/bin
PROJECT_UTILS_DIR=$PROJECT_BASE_DIR/utils
PROJECT_IMAGES_DIR=$PROJECT_BASE_DIR/images
PROJECT_CONTRIB_DIR=$PROJECT_BASE_DIR/contrib
PROJECT_INIT_SCRIPTS_DIR=$PROJECT_BASE_DIR/init
PROJECT_CUSTOMIZATION_DIR=$PROJECT_BASE_DIR/customize
PROJECT_DOCS_DIR=$PROJECT_BASE_DIR/docs
# Package directories
PROJECT_TARBALLS_DIR=$PROJECT_SRC_DIR/tarballs
PROJECT_GITHUB_DIR=$PROJECT_SRC_DIR/github
PROJECT_RPMS_DIR=$PROJECT_SRC_DIR/rpms
PROJECT_ZIPS_DIR=$PROJECT_SRC_DIR/zips
PROJECT_DEBS_DIR=$PROJECT_SRC_DIR/debs
PROJECT_PIPS_DIR=$PROJECT_SRC_DIR/pips
PROJECT_PIPS_REQUIRES_DIR=$PROJECT_PIPS_DIR/requirements
# System directories
PROJECT_SYSTEM_ARCH=`uname -m`
PROJECT_SYSTEM_CONF_DIR=$CONFDIR/$PROJECT_NAME
PROJECT_SYSTEM_SHARE_DIR=$DATAROOTDIR/$PROJECT_NAME
PROJECT_SYSTEM_LOG_DIR=$LOGDIR/$PROJECT_NAME
PROJECT_SYSTEM_LIB_DIR=$STATEDIR/lib/$PROJECT_NAME
PROJECT_SYSTEM_CACHE_DIR=$STATEDIR/cache/$PROJECT_NAME
PROJECT_SYSTEM_ICONS_DIR=$PROJECT_SYSTEM_SHARE_DIR/picons

PROJECT_VERSION=$(cd $PROJECT_BASE_DIR && git tag -l | tail -1 && cd)
PROJECT_RELEASE_FILE=$PROJECT_SYSTEM_CONF_DIR/release
PROJECT_DVBT_SETTINGS_FILE=$PROJECT_SYSTEM_CONF_DIR/dvbt-settings.cfg
PROJECT_PARTITION=/$PROJECT_NAME
LOCAL_SETTINGS_DIR=$PROJECT_PARTITION/local_settings

# Ports file
PORTS_ASSIGNED_FILE=$PROJECT_DOCS_DIR/ports_assigned

# Optical Disc Drive
ODD_DEV_NODE=/dev/sr0
ODD_MOUNT_POINT=/media/odd

# User's media folders
USER_MUSIC_DIR=$PROJECT_PARTITION/Music
USER_PICTURES_DIR=$PROJECT_PARTITION/Pictures
PODCASTS_DIRECTORY=$PROJECT_PARTITION/Podcasts
USER_VIDEOS_DIR=$PROJECT_PARTITION/Videos
USER_TV_SHOWS_DIR=$USER_VIDEOS_DIR/TV_Shows
USER_TV_RECORDINGS_DIR=$USER_VIDEOS_DIR/TV_Recordings
USER_MOVIES_DIR=$USER_VIDEOS_DIR/Movies

PLAYLISTS_DIRECTORY=$PROJECT_PARTITION/Playlists
PLAYLISTS_PORT=$(grep -i 'playlists$' $PORTS_ASSIGNED_FILE | awk {'print $1'})
PLAYLISTS_IPTV_WORLD_M3U_FILE=jambula-iptv.m3u8
PLAYLISTS_CCTV_LOCAL_M3U_FILE=jambula-cctv.m3u8

# Remind
REMINDERS_DIRECTORY=$PROJECT_PARTITION/Reminders

TORRENTS_LABEL_TVSHOWS="TV_Shows"
TORRENTS_LABEL_MOVIES="Movies"
TORRENTS_LABEL_MUSIC="Music"
TORRENTS_LABEL_SOFTWARE="Software"
TORRENTS_DIRECTORY=$PROJECT_PARTITION/Torrents
TORRENTS_COMPLETED_DIRECTORY=$TORRENTS_DIRECTORY/completed
TORRENTS_PENDING_DIRECTORY=$TORRENTS_DIRECTORY/pending
TORRENTS_WATCH_DIRECTORY=$TORRENTS_DIRECTORY/watch
RTORRENT_SESSIONS_DIR=$TORRENTS_WATCH_DIRECTORY/.sessions_rtorrent
RTORRENT_LOG_DIR=$PROJECT_SYSTEM_LOG_DIR/rtorrent

# aria2
ARIA2_CONFIG_FILE=$PROJECT_SYSTEM_CONF_DIR/aria2.conf
ARIA2_DOWNLOADS_DIRECTORY=$PROJECT_PARTITION/Downloads
ARIA2_LOG_FILE=$PROJECT_SYSTEM_LOG_DIR/aria2.log
ARIA2_SAVE_SESSION_FILE=$PROJECT_SYSTEM_LOG_DIR/aria2.session

KAA_MODULES_GIT_DIR=$PROJECT_SRC_DIR/kaa-modules
FREEVO1_GIT_DIR=$PROJECT_SRC_DIR/freevo1-git
FREEVO1_SVN_DIR=$PROJECT_SRC_DIR/freevo1-svn

INSTALL_SRC_DIR=$PREFIX/src/jambulatv
KAA_INSTALL_DIR=$INSTALL_SRC_DIR/kaa
FREEVO_INSTALL_DIR=$INSTALL_SRC_DIR/freevo

FREEVO_RUNTIME_SHARE_DIR=$FREEVO_INSTALL_DIR/share
FREEVO_RUNTIME_SKINS_DIR=$FREEVO_RUNTIME_SHARE_DIR/skins

KERNELS_SRC_DIR=/usr/src/kernels

AVAILABLE_DISK_SPACE_ROOT=$(df / |grep -v block | awk {'print $4'})
#DISK_THRESHOLD_ROOT=15728640 #15GB
DISK_THRESHOLD_ROOT=12582912 #12GB

FREEVO_LOCAL_CONFIG_DIR=$HOME/.freevo
FREEVO_SYSTEM_CONFIG_DIR=$PROJECT_SYSTEM_CONF_DIR/freevo
FREEVO_CMD=$FREEVO_INSTALL_DIR/freevo
FREEVO_USER=$MULTIMEDIA_USER
FREEVO_USER_HOME_DIR=`cat /etc/passwd | grep "$FREEVO_USER" | cut -d ':' -f6 | head -1`/.freevo 

#FREEVO_VERSION=git
FREEVO_VERSION=svn

# Flexget IPTV list download schedule
FLEXGET_SCHEDULE_IPTV_LISTS_HR=15
FLEXGET_SCHEDULE_IPTV_LISTS_MIN=30
FLEXGET_PORT=$(grep -i 'flexget$' $PORTS_ASSIGNED_FILE | awk {'print $1'})
#
TVHEADEND_CONFIG_DIR=$MULTIMEDIA_USER_HOME_DIR/.hts/tvheadend
TVHEADEND_LOG_DIR=$PROJECT_SYSTEM_LOG_DIR/tvheadend
TVHEADEND_LOG_FILE=$TVHEADEND_LOG_DIR/tvheadend.log
TVHEADEND_HTTP_IP=127.0.0.1
TVHEADEND_HTTP_PORT=9981  # Please change to conform with our lineup
TVHEADEND_HTSP_PORT=9982  # Please change to conform with our lineup
TVHEADEND_HTTP_USER=""
TVHEADEND_HTTP_PASS=""
TVHEADEND_API_URL="http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api"
# TVHeadend components
TVHEADEND_TIMESHIFT_CONFIG_DIR=$TVHEADEND_CONFIG_DIR/timeshift
TVHEADEND_TIMESHIFT_BUFFER_FILE=$TMPDIR/timeshift_buffer
TVHEADEND_DVR_CONFIG_DIR=$TVHEADEND_CONFIG_DIR/dvr/config
TVHEADEND_DVR_CREATE_PROFILE_TEMP_FILE=/tmp/create_dvr_profile.sh

TVHEADEND_IMAGE_CACHE_CONFIG_DIR=$TVHEADEND_CONFIG_DIR/imagecache

TVHEADEND_ADAPTERS_CONFIG_DIR=$TVHEADEND_CONFIG_DIR/input/linuxdvb/adapters

TVHEADEND_RESET_IN_PROGRESS_TEMP_FILE=/tmp/tvheadend_reset_in_progress
TVHEADEND_REPAIR_IN_PROGRESS_TEMP_FILE=/tmp/tvheadend_repair_in_progress

TVHEADEND_DVBT_NETWORK_CONFIG_DIR=$TVHEADEND_CONFIG_DIR/input/dvb/networks
TVHEADEND_DVBT_CREATE_NETWORK_TEMP_FILE=/tmp/create_dvbt_network.sh
TVHEADEND_DVBT_CREATE_MUX_TEMP_FILE=/tmp/create_dvbt_multiplex.sh

TVHEADEND_IPTV_NETWORK_NAME=jambula-IPTV
TVHEADEND_IPTV_LOG_DIR=$PROJECT_SYSTEM_LOG_DIR/iptv
TVHEADEND_IPTV_CREATE_NETWORK_TEMP_FILE=/tmp/create_iptv_network.sh

TVHEADEND_CHANNELS_CONFIG_DIR=$TVHEADEND_CONFIG_DIR/channel/config
TVHEADEND_CHANNELS_TAGS_DIR=$TVHEADEND_CONFIG_DIR/channel/tag

TVHEADEND_CCTV_CREATE_NETWORK_TEMP_FILE=/tmp/create_cctv_network.sh

TVHEADEND_CCTV_NETWORK_NAME=jambula-Eyes
TVHEADEND_CCTV_LOG_DIR=$TVHEADEND_IPTV_LOG_DIR

TVHEADEND_EPG_GRAB_DIR=$TVHEADEND_CONFIG_DIR/epggrab

XMLTV_GRABBER=tv_grab_combiner

EPG_XMLTV_GUIDE_DIR=$MULTIMEDIA_USER_HOME_DIR/.xmltv
EPG_XMLTV_GUIDE_FILE_AGE=259200 # 3 Days
EPG_XMLTV_SOCKET=$TVHEADEND_EPG_GRAB_DIR/xmltv.sock
EPG_XMLTV_LOG_FILE=$PROJECT_SYSTEM_LOG_DIR/xmltv.log

TVHEADEND_TV_MARKET=UG-Kampala

PLATFORM_TAG=1.0.10
LIBCEC_TAG=libcec-2.2.0

VLC_SOURCES_TYPE=tarball #git

#KODI_VERSION=15.2 
#KODI_CODENAME=Isengard
#KODI_SOURCES_TYPE=git

KODI_VERSION=17.6
KODI_CODENAME=Krypton
KODI_SOURCES_TYPE=tarball 

KODI_PACKAGE_NAME=$KODI_VERSION-$KODI_CODENAME

KODI_CONFIG_DIR=$MULTIMEDIA_USER_HOME_DIR/.kodi
KODI_SHARE_DIR=$DATAROOTDIR/kodi
KODI_USER_DATA=$KODI_CONFIG_DIR/userdata
KODI_USER_ADDONS=$KODI_CONFIG_DIR/addons
KODI_USER_DATABASE_DIR=$KODI_USER_DATA/Database
KODI_ADDON_DATA_DIR=$KODI_USER_DATA/addon_data
KODI_SYSTEM_DATA=$KODI_SHARE_DIR/userdata
KODI_SYSTEM_ADDONS=$KODI_SHARE_DIR/addons
KODI_SYSTEM_SYS=$KODI_SHARE_DIR/system
KODI_LOG_FILE=$KODI_CONFIG_DIR/temp/kodi.log
#
KODI_DB_PREFIX=kodi
KODI_DB_VIDEO=${KODI_DB_PREFIX}_video
KODI_DB_MUSIC=${KODI_DB_PREFIX}_music
KODI_DB_USER=$MULTIMEDIA_USER
KODI_DB_PASS=jambulatv4
KODI_HTTP_IP=127.0.0.1
KODI_HTTP_PORT=$(grep -i 'kodi web$' $PORTS_ASSIGNED_FILE | awk {'print $1'})
KODI_HTTP_USER=jambulatv
KODI_HTTP_PASS=jambulatv

# Kodi Addons
# -----------
# Repositories
KODI_ADDONS_REPOSITORIES="repository.xbmc.org repository.metalkettle repository.xbmchub repository.podgod repository.Kinkin repo.natko1412 repository.Goliath repository.shaneyrepos pakistani-repository.shani"
# Required (Krypton)
KODI_ADDONS_REQUIRED_KRYPTON="\
metadata.album.universal \
metadata.artists.universal \
metadata.common.allmusic.com \
metadata.common.fanart.tv \
metadata.common.htbackdrops.com \
metadata.common.imdb.com \
metadata.common.musicbrainz.org \
metadata.common.theaudiodb.com \
metadata.common.themoviedb.org \
metadata.themoviedb.org \
metadata.tvdb.com \
plugin.program.rtorrent \
script.common.plugin.cache \
script.module.arrow \
script.module.addon.common \
script.module.addon.signals \
script.module.beautifulsoup \
script.module.beautifulsoup4 \
script.module.dateutil \
script.module.httplib2 \
script.module.liveresolver \
script.module.mechanize \
script.module.metadatautils \
script.module.metahandler \
script.module.musicbrainz \
script.module.parsedom \
script.module.requests \
script.module.simplecache \
script.module.simple.downloader \
script.module.simplejson \
script.module.t0mm0.common \
script.module.thetvdb \
script.module.unidecode \
script.module.urlresolver \
script.module.youtube.dl \
script.video.F4mProxy \
service.library.data.provider \
service.xbmc.versioncheck"
# Required (Isengard)
KODI_ADDONS_REQUIRED_ISENGARD="metadata.album.universal metadata.common.theaudiodb.com metadata.artists.universal script.module.simplejson service.library.data.provider metadata.artists.universal metadata.common.allmusic.com metadata.common.fanart.tv metadata.common.htbackdrops.com metadata.common.imdb.com metadata.common.musicbrainz.org metadata.common.themoviedb.org metadata.themoviedb.org metadata.tvdb.com plugin.program.rtorrent script.module.addon.signals script.module.beautifulsoup script.module.requests script.module.youtube.dl service.xbmc.versioncheck script.common.plugin.cache script.module.addon.common script.module.beautifulsoup4 script.module.httplib2 script.module.liveresolver script.module.mechanize script.module.parsedom script.module.simple.downloader script.module.urlresolver script.module.metahandler script.video.F4mProxy script.module.t0mm0.common"
# Live TV
KODI_ADDONS_LIVETV="plugin.video.livemix plugin.video.uktvnow plugin.video.ukturk plugin.video.ustvnow.tva plugin.video.phstreams plugin.video.ccloudtv plugin.video.channelpear plugin.video.F.T.V plugin.video.f4mTester plugin.video.srtv plugin.video.ustvnow-1 plugin.video.cartoons8 plugin.video.netflixbmc plugin.video.uiptv plugin.video.rt plugin.video.aljazeera plugin.video.world.news.live plugin.video.itbn_org plugin.video.fox.news plugin.video.twit plugin.video.LiveIPTV plugin.video.NJMSoccer plugin.video.watchcartoononline plugin.video.MaverickTV plugin.video.FMG plugin.video.sportsaccess plugin.video.echostreams plugin.video.sportie plugin.video.teevie plugin.video.echoplayer plugin.video.gobble plugin.video.specialistss plugin.video.amanda plugin.video.dreamfilm plugin.video.veetle plugin.video.HalowTV plugin.video.wildside plugin.video.Rising.Tides"
# Music
KODI_ADDONS_MUSIC="plugin.video.now_music plugin.video.urbanmix plugin.video.bbts plugin.audio.accuradio"
# Sports
KODI_ADDONS_SPORTS="plugin.video.castaway plugin.video.prosport plugin.video.sportsmix plugin.video.SportsDevil plugin.video.livepremiership"
# Games
KODI_ADDONS_GAMES="script.game.connect4 script.game.2048 plugin.game.blackjack plugin.game.match.cards plugin.game.tankshot"
# Jambula Custom
KODI_ADDONS_JAMBULA="plugin.audio.jambulaFMRadio plugin.video.jambulaLiveEvents plugin.video.jambulaIPTV plugin.video.youtube script.doorbell script.service.kodi.callbacks script.service.pcmode"
# Miscellaneous
KODI_ADDONS_MISC="script.xbmc.unpausejumpback"

# Preferred kodi skin configuration
case $KODI_CODENAME in
Isengard)
KODI_PREFERRED_SKIN=aeonmq6
;;
Krypton)
KODI_PREFERRED_SKIN=titan
;;
confluence)
KODI_PREFERRED_SKIN=confluence
;;
estuary)
KODI_PREFERRED_SKIN=estuary
esac

X11_DRIVER="intel" # intel|nouveau|mga|openchrome
INTEL_X11_DRIVER_VERSION=git
NOUVEAU_X11_DRIVER_VERSION=git
OPENCHROME_X11_DRIVER_VERSION=0.3.3 #git
MGA_X11_DRIVER_VERSION=git #1.6.3 #git
ALSA_DRIVER_VERSION=1.0.25
ALSA_LIB_VERSION=1.0.28
ALSA_UTILS_VERSION=1.0.28
ALSA_OSS_VERSION=1.0.28
ALSA_PLUGINS_VERSION=1.0.28
PYALSAAUDIO_VERSION=0.7
BLUEZ_VERSION=4.101 # Keep here, V5.X has no HSP/HFP
SBC_VERSION=1.2
PORTAUDIO_VERSION=snapshot
X264_VERSION=snapshot-20130904-2245
LIBDVBPSI_TAG=1.3.0
TVTIME_VERSION=1.0.2
DVBSTREAMER_VERSION=svn-20130829 #2.1.0
PYDVBSTREAMER_VERSION=0.1
LIVEPAUSE_VERSION=1.1.1
PYOSD_VERSION=0.2.14
NODM_VERSION=0.7
GSTREAMER_VERSION=1.1.3
RYGEL_VERSION=0.19.4
HEYU_VERSION=2.11-rc1
LIBDBI_VERSION=0.9.0
ICINGA1_VERSION=1.9.3
NAGIOS_PLUGINS_VERSION=1.4.16
MINISAPSERVER_VERSION=0.3.8
DNS2TCP_VERSION=0.5.2
OPENRESOLV_VERSION=3.5.7
BEEP2_VERSION=1.2a
GDATA_VERSION=2.0.17

BUILD_LOG=$HOME/$PROJECT_NAME-build.log

EMAIL_CONFIG_DIR=/etc/email
EMAIL_SIGNATURE_FILE=$PROJECT_SYSTEM_CONF_DIR/email.signature
EMAIL_GMAIL_CONFIG=$PROJECT_SYSTEM_CONF_DIR/email-gmail.cfg

MODPROBE_DIR=/etc/modprobe.d
SUDOERS_DIR=/etc/sudoers.d

RES1=1024x768
RES2=800x600
RES3=640x480
DEPTH1=32
DEPTH2=24
DEPTH3=16
PREFERRED_TV_RESOLUTION=$RES1
XORG_CMD=$BINARY_PREFIX/Xorg
XORG_DIR=/etc/X11
XORG_CONF=$XORG_DIR/xorg.conf
XORG_CONF_DIR=$XORG_DIR/xorg.conf.d
XORG_CONF_NEW=/root/xorg.conf.new
XORG_CONF_DISPLAY=1

# Set display and terminal for multimedia players like MPlayer
DISPLAY=":0.0"
TERM="xterm"
export DISPLAY TERM 

XSET_CMD=$BINARY_PREFIX/xset 

LXDE_DM_DIR=/etc/lxdm
LXDM_CONFIG=$LXDE_DM_DIR/lxdm.conf
LXDE_SESSION_DIR=/etc/xdg/lxsession
LXDE_AUTOSTART_DIR=$LXDE_SESSION_DIR/LXDE
LXDE_AUTOSTART_FILE=$LXDE_AUTOSTART_DIR/autostart

XDG_AUTOSTART_DIR=$CONFDIR/xdg/autostart

UUID_ROOT_PARTITION=`cat /etc/fstab | sed /^#/d | grep '1 1' | awk {'print $1'} | cut -d '=' -f2`
GRUB2_BOOT_DIR=/boot/grub2
GRUB2_BOOT_FILE=$GRUB2_BOOT_DIR/grub.cfg
GRUB2_CONFIG_DIR=/etc/grub.d
GRUB2_DEFAULT_FILE=/etc/default/grub

#GRUB2_CMD_OPTIONS="acpi=off noapic"
#GRUB2_CMD_OPTIONS="radeon.modeset=0"
GRUB2_CMD_OPTIONS=""

GRUB2_VIDEO_RESOLUTION=${RES1}x${DEPTH1}
GRUB2_BEEP_SOUND="480 440 1"

PULSE_HOME_DIR=$STATEDIR/run/pulse
PULSE_SYSTEM_CONFIG=$CONFDIR/pulse/system.pa
PULSE_DEFAULT_CONFIG=$CONFDIR/pulse/default.pa
PULSE_ROOT_CONFIG_DIR=/root/.config/pulse

CHRONY_KEYS_FILE=/etc/chrony.keys
CHRONYC_CMD=$BINARY_PREFIX/chronyc

PLYMOUTH_THEME=spinfinity 
PLYMOUTH_SET_CMD=/usr/sbin/plymouth-set-default-theme

SYSTEMD_UNITS_DIR_SYSTEM=/usr/lib/systemd/system
SYSTEMD_UNITS_DIR_USER=/etc/systemd/system

DBUS_SYSTEM_SERVICES_DIR=$DATAROOTDIR/dbus-1/system-services

SYSCONFIG_DIR=/etc/sysconfig
SYSCONFIG_DESKTOP_FILE=$SYSCONFIG_DIR/desktop
SYSCONFIG_NETWORK_FILE=$SYSCONFIG_DIR/network
SYSCONFIG_NETWORK_SCRIPTS_DIR=$SYSCONFIG_DIR/network-scripts

SYSCONFIG_i18N_FILE=/etc/sysconfig/i18n

HOSTNAME_FILE=/etc/hostname

INTERNET_GATEWAY_IP=$(/usr/sbin/ip route list | grep default | sed -n 's/^.*via //p' | awk '{print $1}')
NETWORK_MAC_ADDRESS=$(/usr/sbin/ip addr show | grep ether | awk {'print $2'} | head -1)

DHCLIENT_CONFIG_DIR=$CONFDIR/dhcp
DHCLIENT_CONFIG_FILE=$DHCLIENT_CONFIG_DIR/dhclient.conf

SYSTEM_UUID=$(uuid)
SYSTEM_IDENTIFIER=$(echo $SYSTEM_UUID | cut -d - -f5)

SYSTEM_CPU_CORES=$(cat /proc/cpuinfo | grep -i processor | wc -l)

# Internet ISP settings
INTERNET_USB_ISP_CONFIG=$PROJECT_SYSTEM_CONF_DIR/internet-mobile-usb.cfg
INTERNET_WIFI_ISP_CONFIG=$PROJECT_SYSTEM_CONF_DIR/internet-mobile-wifi.cfg
ISP_NAME_DEFAULT=AIRTEL
ISP_USERNAME_DEFAULT=none
ISP_PASSWORD_DEFAULT=none

FLEXGET_CONFIG_DIR=$PROJECT_SYSTEM_CONF_DIR/flexget
FLEXGET_DEPENDENCIES="itsdangerous setuptools MarkupSafe Paver feedparser SQLAlchemy PyYAML beautifulsoup4 html5lib PyRSS2Gen pynzb progressbar Jinja2 Werkzeug Flask CherryPy certifi chardet requests six jsonschema python-dateutil python-tvrage functools32 plumbum rpyc tmdb3 pbr argparse stevedore babelfish setuptools_scm path.py pytest-runner rebulk guessit future pytz tzlocal funcsigs futures APScheduler aniso8601 Flask-RESTful ordereddict flask-restplus webassets Flask-Assets cssmin Flask-Compress Flask-Login pycparser cffi ipaddress enum34 pyasn1 idna cryptography pyOpenSSL ndg_httpsclient pathlib pyScss pytvmaze Safe Flask-Cors terminaltables colorclass ftputil"

TIMEZONE="Africa/Kampala"
TIMEZONE_FILE=/etc/timezone

RPMBUILD_DIR=$TMPDIR/rpmbuild

NGINX_CONF_DIR=/etc/nginx
NGINX_CONFD_DIR=$NGINX_CONF_DIR/conf.d

# Set WWW user and group for re-installs/upgrades i.e. Non-first time installs
if [ -d "$NGINX_CONF_DIR" ] ;
then
WWW_USER=$(grep -i '^user' $NGINX_CONF_DIR/nginx.conf | head -1 | awk {'print $2'})
WWW_GROUP=$(grep -i '^user' $NGINX_CONF_DIR/nginx.conf | head -1 | awk {'print $3'} | sed 's:;::')
fi

WWW_USER_COMMANDS="/usr/bin/chmod, /usr/bin/grep, /usr/bin/rm"

WWW_HTML_DIR=$PROJECT_SYSTEM_SHARE_DIR/html
WWW_CGI_DIR=$PROJECT_SYSTEM_SHARE_DIR/cgi-bin

MYSQL_PRIVILEGES_FILE=$TMPDIR/freeradius-priviledges.sql

FREERADIUS_DB_NAME=radius
FREERADIUS_DB_USER=radius
FREERADIUS_DB_CONF_DIR=/etc/raddb
FREERADIUS_DB_CONF_FILE=$FREERADIUS_DB_CONF_DIR/sql.conf
FREERADIUS_CLIENTS_CONF_FILE=$FREERADIUS_DB_CONF_DIR/clients.conf
FREERADIUS_RADIUSD_FILE=$FREERADIUS_DB_CONF_DIR/radiusd.conf
FREERADIUS_MODULES_ENABLED_DIR=$FREERADIUS_DB_CONF_DIR/mods-enabled
FREERADIUS_MODULES_AVAIL_DIR=$FREERADIUS_DB_CONF_DIR/mods-available
FREERADIUS_MODULES_CONFIG_DIR=$FREERADIUS_DB_CONF_DIR/mods-config
FREERADIUS_SQL_MAIN_SCHEMA_DIR=$FREERADIUS_MODULES_CONFIG_DIR/sql/main/mysql
FREERADIUS_DB_SCHEMA=$FREERADIUS_SQL_MAIN_SCHEMA_DIR/schema.sql
FREERADIUS_SQL_COUNTERS_DIR=$FREERADIUS_MODULES_CONFIG_DIR/sql/counter/mysql
FREERADIUS_SQL_MODULE_FILE=$FREERADIUS_MODULES_AVAIL_DIR/sql
FREERADIUS_SQLCOUNTER_MODULE_FILE=$FREERADIUS_MODULES_AVAIL_DIR/sqlcounter
FREERADIUS_SITES_AVAIL=$FREERADIUS_DB_CONF_DIR/sites-available
FREERADIUS_SITES_AVAIL_DEFAULT_FILE=$FREERADIUS_SITES_AVAIL/default
FREERADIUS_SITES_AVAIL_INNER_TUNNEL_FILE=$FREERADIUS_SITES_AVAIL/inner-tunnel

COOVA_CONFIG_DIR=/etc/chilli
COOVA_CONFIG_FILE=$COOVA_CONFIG_DIR/config
COOVA_HTML_DIR=$WWW_HTML_DIR/coova

COOVA_OPEN_TCP_PORTS="22 80 81 82 83 84 85 443 1735 1736 1737 1738 1739 1740 5222 6969 8080 8082 8083 8084 8085" 

UPNP_MDNS_ENABLE=y
CHILLI_DHCP_START=50
CHILLI_DHCP_END=99


HOSTAPD_DIR=/etc/hostapd
HOSTAPD_GROUP=hostapd

IPTABLES_CMD=/usr/sbin/iptables

JABBERD_CONF_DIR=$CONFDIR/jabberd
JABBERD_ROUTER_USERS_FILE=$JABBERD_CONF_DIR/router-users.xml
JABBERD_TEMPLATES_DIR=$JABBERD_CONF_DIR/templates
JABBERD_DB_CREATE=$DATAROOTDIR/jabberd/db-setup.mysql
JABBERD_PASSWORD=$(sudo /usr/bin/grep \<secret\> $JABBERD_ROUTER_USERS_FILE | sed -e 's/<secret>//' | sed -e 's/<\/secret>//' | sed -e 's/    //')
JABBERD_RESOURCE=Home

# Smart Home - Generic settings
SMARTHOME_HUB_APP=homeassistant
SMARTHOME_HUB_WWW_PORT=$(grep -i "$SMARTHOME_HUB_APP$" $PORTS_ASSIGNED_FILE | awk {'print $1'})

# OpenHAB
OPENHAB_HTTP_PORT=$(grep -i 'openhab$' $PORTS_ASSIGNED_FILE | awk {'print $1'})
OPENHAB_HTTPS_PORT=$(grep -i 'openhab ssl$' $PORTS_ASSIGNED_FILE | awk {'print $1'})

# Domoticz Home Automation
DOMOTICZ_USER=$MULTIMEDIA_USER
DOMOTICZ_GROUP=$MULTIMEDIA_USER
DOMOTICZ_HOME_DIR=$MULTIMEDIA_USER_HOME_DIR/.domoticz
DOMOTICZ_HTML_DIR=$WWW_HTML_DIR/domoticz
DOMOTICZ_LOG_FILE=$PROJECT_SYSTEM_LOG_DIR/domoticz.log
DOMOTICZ_PID_FILE=$RUNDIR/domoticz.pid
DOMOTICZ_WWW_PORT=$(grep -i 'domoticz$' $PORTS_ASSIGNED_FILE | awk {'print $1'})

# Home Assistant
HOMEASSISTANT_USER=$MULTIMEDIA_USER

# Mosquitto - MQTT
MOSQUITTO_USER=mosquitto
MOSQUITTO_GROUP=mosquitto
MOSQUITTO_PORT=$(grep -i 'mosquitto$' $PORTS_ASSIGNED_FILE | awk {'print $1'})
MOSQUITTO_SSL_PORT=$(grep -i 'mosquitto ssl$' $PORTS_ASSIGNED_FILE | awk {'print $1'})

MOSQUITTO_CONFIG_DIR=/etc/mosquitto
MOSQUITTO_CONFIG_CERTS_DIR=$MOSQUITTO_CONFIG_DIR/ssl

# ZM Database Variables
ZONEMINDER_DB_HOST=localhost
ZONEMINDER_DB_NAME=zm
ZONEMINDER_DB_SCHEMA=$INSTALL_SRC_DIR/ZoneMinder/db/zm_create.sql
ZONEMINDER_DB_USER=jambulatv
ZONEMINDER_DB_PASS=jambulatvzm3
ZONEMINDER_ADMIN_USER=jambulatv
ZONEMINDER_ADMIN_PASS=jambulatv
ZONEMINDER_WWW_PORT=$(grep -i 'ZoneMinder$' $PORTS_ASSIGNED_FILE | awk {'print $1'})
ZONEMINDER_ZMS_INETD_PORT=8521
ZONEMINDER_CONFIG_DIR=$PROJECT_SYSTEM_CONF_DIR/zoneminder
ZONEMINDER_CONTENT_DIR=$MULTIMEDIA_USER_HOME_DIR/CCTV
ZONEMINDER_SOUNDS_DIR=$PROJECT_SYSTEM_SHARE_DIR/sounds/zoneminder
ZONEMINDER_WWW_ROOT_DIR=$WWW_HTML_DIR/zm
ZONEMINDER_WEB_URL="http://${ZONEMINDER_DB_HOST}:${ZONEMINDER_WWW_PORT}"
ZONEMINDER_API_URL=$ZONEMINDER_WEB_URL/api
ZONEMINDER_CCTV_MONITORS_CONFIGS_DIR=$PROJECT_CONTRIB_DIR/cameras
ZONEMINDER_CCTV_MONITORS="logitech_quickcam_communicate_stx logitech_c200"
ZONEMINDER_CCTV_SETTINGS_FILE=$PROJECT_SYSTEM_CONF_DIR/cctv-settings.cfg

# ZMEventServer
ZMEVENTSERVER_PORT=$(grep -i 'zmeventserver$' $PORTS_ASSIGNED_FILE | awk {'print $1'})

# Motion Database Variables
MOTION_DB_HOST=localhost
MOTION_DB_NAME=motion
MOTION_DB_USER=jambulatv
MOTION_DB_PASS=jambulatvmotion3

# Pocketsphinx ASR
POCKETSPHINX_DATA_DIR=$PROJECT_SYSTEM_SHARE_DIR/pocketsphinx

JAMBULATV_SETUP_DB_NAME=jambulatv
JAMBULATV_SETUP_DB_USER=jambula_setup
JAMBULATV_SETUP_DB_PASS=eng8Na
JAMBULATV_SETUP_DB_TABLE=setup
JAMBULATV_SETUP_DB_SCHEMA=$WWW_HTML_DIR/setup/jambulatv.sql

# DNS Settings
# *************
# Current DNS 1
CURRENT_DNS1=`sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 1'`
#
# Number of DNS settings
NUMBER_OF_DNS=`sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | wc -l`
#
# Add second DNS if more than 1 setting
if [ "$NUMBER_OF_DNS" -gt "1" ];
then
# Current DNS 2
CURRENT_DNS2=`sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 2'` 
else
CURRENT_DNS2=$CURRENT_DNS1
fi

# All Domain Name Servers
NETWORK_DNS_1=$CURRENT_DNS1
NETWORK_DNS_2=$CURRENT_DNS2

# Public DNS Servers
GOOGLE_DNS_SERVER_IP_1=8.8.8.8
GOOGLE_DNS_SERVER_IP_2=8.8.4.4
CLOUDFARE_DNS_SERVER_IP_1=1.0.0.1
CLOUDFARE_DNS_SERVER_IP_2=1.1.1.1
OPEN_DNS_SERVER_IP_1=208.67.222.222
COMODO_DNS_SERVER_IP_1=8.26.56.26
YANDEX_DNS_SERVER_IP_1=77.88.8.8
#
PUBLIC_DNS_SERVERS="$GOOGLE_DNS_SERVER_IP_1 $CLOUDFARE_DNS_SERVER_IP_1 $OPEN_DNS_SERVER_IP_1 $COMODO_DNS_SERVER_IP_1"
#
DNS_SERVER_IP_ADDRESS_DEFAULT=$GOOGLE_DNS_SERVER_IP_1

# Netdata
NETDATA_PORT=$(grep -i 'netdata$' $PORTS_ASSIGNED_FILE | awk {'print $1'})

# Dynamic variables
# -----------------
IR_DAEMON=inputlirc #lircd
IR_PROTOCOLS="NEC,RC-5,RC-6"
IR_REPEAT_DELAY=1200
IR_REPEAT_PERIOD=400
INPUTLIRC_REPEAT_RATE=400

WIFI_SSID="Jambula Labs"
WIFI_SECURITY_KEY="Mustbe8ormorecharacters"
WIFI_WPA_CONFIG_DIR=/etc/wpa_supplicant
WIFI_WPA_CONFIG_FILE=$WIFI_WPA_CONFIG_DIR/wpa_supplicant.conf
WIFI_INTERFACES_AVAILABLE=$(/usr/sbin/iw dev | grep Interface | wc -l)
# Virtual wifi interfaces support 
#lsmod | grep mac80211 | grep 'ath9k' > /dev/null 2>&1
#VIRT_WIFI_SUPPORT=$?
VIRT_WIFI_SUPPORT=2 # Disabled

# WiFi AP/Station device names
WIFI_AP_INTERFACE=jwlan0
WIFI_STATION_INTERFACE=jwlan1
WIFI_PHY_DEV=0
WIFI_WAIT_TIME=40

NETWORK_ETHERNET_DEVICE=$(/usr/sbin/ip link | grep '2: ' | cut -d : -f2 | head -1 | sed -e 's/ //g')
NETWORK_IP_ADDRESS=$(/usr/sbin/ip -4 addr show dev $NETWORK_ETHERNET_DEVICE | grep brd | awk {'print $2'} | cut -d / -f1)
NETWORK_GATEWAY_ADDRESS=$(/usr/sbin/ip route list | grep default | sed -n 's/^.*via //p' | awk '{print $1}')
NETWORK_MASK_PREFIX=24
NETWORK_DOMAIN=jambulatv.com
NETWORK_WIRELESS_SSID="$PROJECT_NAME-$(echo $SYSTEM_IDENTIFIER | cut -c 1-5)"
NETWORK_WIRELESS_CHANNEL_NO=11
NETWORK_WIRELESS_PASSPHRASE=$(pwgen -A -v -N1 12)
NETWORK_WIRELESS_NET_MASK=$(/usr/sbin/ip addr show tun0 | awk '$1=="inet"{print $2}')
NETWORK_DHCP_RANGE="192.168.0.100,192.168.0.199"

CHRONYC_PASSWD=jul1214

MYSQL_ROOT_PASSWORD=173dell
FREERADIUS_DB_PASS=lled371
FREERADIUS_ADMIN_USER="$PROJECT_NAME"
FREERADIUS_ADMIN_PASS=lled371

COOVA_NORMAL_USER_LOGIN=coovuser
COOVA_NORMAL_USER_PASSWORD=coovpass
COOVA_SERVER_IP=172.16.0.1
COOVA_UAM_SECRET=lled371
COOVA_PRIVILEGED_MAC="00:21:5c:25:32:5b,00:02:2D:53:66:21,00:0E:9B:15:98:8E"

# Cepstral
CEPSTRAL_VERSION=6.0.1
CEPSTRAL_VOICE=Allison-8kHz
CEPSTRAL_EULA=no # agree # 
CEPSTRAL_PREFIX=/opt/swift
# License info/key you obtained from Cepstral
CEPSTRAL_CUSTOMER_NAME="$PROJECT_NAME"
CEPSTRAL_COMPANY_NAME="$COMPANY_NAME" 
CEPSTRAL_LICENSE_KEY="insert0your1cepstral2key3here"

# Icinga
ICINGA_USER=icinga
ICINGA_PASS=jambula

ICINGA_GROUP=icinga
ICINGA_CMD_GROUP=icingacmd
ICINGA_ADMIN_PASS=jambulatv

ICINGA_DB_NAME=$ICINGA_USER
ICINGA_DB_USER=${ICINGA_USER}2
ICINGA_DB_PASS=${ICINGA_PASS}2

ICINGA2_CONFIG_DIR=$CONFDIR/icinga2
ICINGA2_OBJECTS_DIR=$ICINGA2_CONFIG_DIR/conf.d
ICINGA2_CUSTOM_CONFIG_DIR=$ICINGA2_OBJECTS_DIR/$PROJECT_NAME
ICINGA2_SCRIPTS_DIR=$ICINGA2_CONFIG_DIR/scripts
ICINGA2_FEATURES_AVAIL_DIR=$ICINGA2_CONFIG_DIR/features-available

MONITORING_PLUGINS_DIR=$LIBDIR/nagios/plugins
FPING_CMD=/usr/sbin/fping

# ping
PING_COUNT=1
PING_TIMEOUT=2
PING_CMD="/usr/bin/ping"
PING_OPTS="-n -c $PING_COUNT -W $PING_TIMEOUT"

# nmap
NMAP_CMD='/usr/bin/nmap'
NMAP_OPTS_GENERAL='-n'
NMAP_OPTS_PING_SCAN='-sn -Pn -oG -' 

# Icingaweb2
ICINGAWEB2_DB_NAME=icingaweb2
ICINGAWEB2_DB_USER=icingaweb2
ICINGAWEB2_DB_PASS=jambula2
ICINGAWEB2_ADMIN_USER=jambulatv
ICINGAWEB2_ADMIN_PASS=jambulatv2
ICINGAWEB2_ADMIN_PASS_HASH=$(openssl passwd -1 $ICINGAWEB2_ADMIN_PASS)
#
ICINGA2_WEB_GROUP=icingaweb2
ICINGA2_WEB_TOKEN_FILE=$TMPDIR/icingaweb2_setup_token
ICINGA2_WEB_CONFIG_DIR=$PROJECT_SYSTEM_CONF_DIR/icingaweb2
ICINGA2_WEB_AUTH_FILE=$ICINGA2_WEB_CONFIG_DIR/authentication.ini
ICINGA2_WEB_CONF_FILE=$ICINGA2_WEB_CONFIG_DIR/config.ini
ICINGA2_WEB_RESOURCES_FILE=$ICINGA2_WEB_CONFIG_DIR/resources.ini
ICINGA2_WEB_ROLES_FILE=$ICINGA2_WEB_CONFIG_DIR/roles.ini
ICINGA2_WEB_GROUPS_FILE=$ICINGA2_WEB_CONFIG_DIR/groups.ini

# VNC
VNC_DISPLAY=3
VNC_PASSWORD=jambulatvvnc3

# Reverse SSH
# -----------
REVERSE_SSH_NOTIFICATION_METHOD="email" #sms|email|none
REVERSE_SSH_CONFIG=$PROJECT_SYSTEM_CONF_DIR/reverse-ssh.cfg
REVERSE_SSH_NOTIFICATION_EMAIL="reverse-ssh@jambulatv.com"
# Local SSH server
LOCAL_SSH_USER=root
LOCAL_SSH_SERVER=localhost
LOCAL_SSH_SERVER_PORT=22
# Remote SSH server
REMOTE_SSH_SERVER_USER=$PROJECT_NAME.$SYSTEM_IDENTIFIER
REMOTE_SSH_SERVER_PASS=$(pwgen -v -N1 8)
REMOTE_SSH_SERVER=remote1.jambulatv.com
REMOTE_SSH_SERVER_PORT=222
REMOTE_SSH_SERVER_RANDOM_PORT=$[ ( $RANDOM % 10000 )  + 10000 ]
# AutoSSH
AUTOSSH_CMD=$BINARY_PREFIX/autossh
AUTOSSH_PORT=$[ ( $RANDOM % 10000 )  + 20000 ]
AUTOSSH_GATETIME=0

# sshuttle
SSHUTTLE_CMD="/usr/bin/sshuttle"
SSHUTTLE_PID_FILE="$RUNDIR/sshuttle.pid"
SSHUTTLE_OPTS="-D --dns --pidfile $SSHUTTLE_PID_FILE -r"

# OpenVPN
OPENVPN_CLIENT_CONFIG_DIR=$PROJECT_SYSTEM_CONF_DIR/openvpn
OPENVPN_CLIENT_CONFIG_FILE=$OPENVPN_CLIENT_CONFIG_DIR/client.conf
OPENVPN_CLIENT_PROTOCOL=tcp #udp
OPENVPN_SERVER_IP=[REMOTE-VPN-SERVER]
OPENVPN_SERVER_PORT=[REMOTE-VPN-PORT:11945]
OPENVPN_SAMPLE_KEYS_DIR=$(cd $TMPDIR && find $DOCSDIR/openvpn* -iname 'sample-keys')

# DNS2TCP
DNS2TCP_DOMAIN=t1.soroti.com
DNS2TCP_LOCAL_PORT=2222
DNS2TCP_SOCKS_PORT=1080
DNS2TCP_HTTP_PROXY_PORT=8089
DNS2TCP_RESOURCE_1=ssh2
DNS2TCP_RESOURCE_2=vpn
DNS2TCP_DNS_SERVER=41.202.229.144
DNS2TCPC_USER=root

# VLM VoD
VLM_VOD_CONFIG_DIR=$PROJECT_SYSTEM_CONF_DIR/vlm
VLM_VOD_CONFIG_FILE=$VLM_VOD_CONFIG_DIR/vlm.conf
VLM_VOD_DIRECTORY=/JambulaTV/vlm_vod

INCRON_DIRECTORY=/etc/incron.d

# Asterisk config directory
if [ -d $PROJECT_SYSTEM_CONF_DIR/asterisk ];
then
ASTERISK_CONF_DIR=$PROJECT_SYSTEM_CONF_DIR/asterisk
elif [ -d $PROJECT_SYSTEM_CONF_DIR/freepbx ];
then
ASTERISK_CONF_DIR=$PROJECT_SYSTEM_CONF_DIR/freepbx
else
ASTERISK_CONF_DIR=$PROJECT_SYSTEM_CONF_DIR/asterisk
fi
ASTERISK_AGI_BIN_DIR=$STATEDIR/lib/asterisk/agi-bin
# Asterisk AMI
ASTERISK_AMI_USER=JambulaTV
ASTERISK_AMI_PASS=JambulaTV
# Asterisk DB i.e. FreePBX
ASTERISK_DB_NAME=asterisk
ASTERISK_DB_USER=asterisk
ASTERISK_DB_PASS=jambula2
# CDR DB
ASTERISK_CDR_DB_NAME=asteriskcdr
ASTERISK_CDR_DB_USER=$ASTERISK_DB_USER
ASTERISK_CDR_DB_PASS=$ASTERISK_DB_PASS
# User/Group
ASTERISK_FILES_USER=asterisk
# XMPP
ASTERISK_XMPP_HOST=jambulatv
ASTERISK_XMPP_USERNAME=asterisk
ASTERISK_XMPP_PASSWORD=jazzy1
ASTERISK_XMPP_RESOURCE=jambulatv
USER_001_XMPP_HOST=jambulatv
USER_001_XMPP_USERNAME=jambula
USER_001_XMPP_PASSWORD=jambulatv
USER_001_XMPP_RESOURCE=jambulatv
#
ASTERISK_DIALPLAN_NAME=office01
# FreePBX
FREEPBX_CONF_DIR=$PROJECT_SYSTEM_CONF_DIR/freepbx
FREEPBX_ADMIN_USER=jambulatv
FREEPBX_ADMIN_PASS=jambulatv321
FREEPBX_ADMIN_PASS_HASH=$(echo -n $FREEPBX_ADMIN_PASS | sha1sum | awk {'print $1'})
FREEPBX_ADMIN_EMAIL=freepbx@jambulatv.com
FREEPBX_EXTENSION_000=600
FREEPBX_EXTENSION_000_NAME="Jambula SwitchBoard"
FREEPBX_EXTENSION_000_PASS="ellis2012"
FREEPBX_EXTENSION_WEBRTC_001=601
FREEPBX_EXTENSION_WEBRTC_001_NAME="Jambula WebRTC"
FREEPBX_EXTENSION_WEBRTC_001_PASS="ellis2012"
FREEPBX_DIALPLAN_NAME=office04

# Chan_mobile Phone
BLUEZ_DEVICE_HCI=hci0
BLUEZ_PHONE_0_ADDR="30:D7:4F:3B:66:22"

# Samba
SMB_WORKGROUP=$PROJECT_NAME

# OwnCloud
OWNCLOUD_ADMIN_USER=jambulatv
OWNCLOUD_ADMIN_PASS=3jambulatv
OWNCLOUD_CONFIG_DIR=$WWW_HTML_DIR/owncloud/config
OWNCLOUD_CONFIG_FILE=$OWNCLOUD_CONFIG_DIR/config.php
OWNCLOUD_DATA_DIRECTORY=$MULTIMEDIA_USER_HOME_DIR/Cloud
OWNCLOUD_WWW_SERVER_NAME=$(grep server_name $PROJECT_CONFIGS_DIR/nginx/sites-enabled/owncloud | awk {'print $2'} | sed 's/;//')

# Nextcloud
NEXTCLOUD_VERSION="9.0.58.1"
NEXTCLOUD_DEFAULT_APP="files" # calendar
NEXTCLOUD_DB_NAME=nextcloud
NEXTCLOUD_DB_USER=nextcloud
NEXTCLOUD_DB_PASS=jambulatv45
NEXTCLOUD_ADMIN_USER=jambulatv
NEXTCLOUD_ADMIN_PASS=jambulatv45
NEXTCLOUD_CONFIG_DIR=$WWW_HTML_DIR/nextcloud/config
NEXTCLOUD_CONFIG_FILE=$NEXTCLOUD_CONFIG_DIR/config.php
NEXTCLOUD_DATA_DIRECTORY=$MULTIMEDIA_USER_HOME_DIR/Cloud
NEXTCLOUD_WWW_SERVER_NAME=$(grep server_name $PROJECT_CONFIGS_DIR/nginx/sites-enabled/nextcloud | awk {'print $2'} | sed 's/;//')
NEXTCLOUD_HTTP_PORT=$(grep -i 'nextcloud$' $PORTS_ASSIGNED_FILE | awk {'print $1'})

# VOIP/SIP Settings 
SIP_PROVIDER_HOSTNAME=sip.flowroute.com

# Updates FTP Server info
JAMBULATV_FTP_SERVER=sftp.jambulatv.com
JAMBULATV_FTP_PORT=21
JAMBULATV_FTP_SERVER_ROOT_DIR=JambulaTV
JAMBULATV_FTP_SERVER_UPDATES_DIR=$JAMBULATV_FTP_SERVER_ROOT_DIR/updates
JAMBULATV_FTP_SERVER_VERSION_FILE=$JAMBULATV_FTP_SERVER_UPDATES_DIR/VERSION
JAMBULATV_FTP_SERVER_IPTV_DIR_NAME=$JAMBULATV_FTP_SERVER_ROOT_DIR/iptv
JAMBULATV_FTP_USER=jambulaftp1
JAMBULATV_FTP_PASS=nahZic4k
JAMBULATV_UPDATES_FTP_SERVER_INFO_FILE=$PROJECT_SYSTEM_CONF_DIR/updates-ftp-server-cfg

# Telegram messaging
TELEGRAM_CREDENTIALS_CONFIG=$PROJECT_SYSTEM_CONF_DIR/messaging-telegram.cfg

# WhatsApp Info
WHATSAPP_CREDENTIALS_CONFIG=$PROJECT_SYSTEM_CONF_DIR/messaging-whatsapp.cfg

# Email messaging
EMAIL_CREDENTIALS_CONFIG=$PROJECT_SYSTEM_CONF_DIR/messaging-email.cfg
TORRENTS_DOMAIN_NAME="MyJambulaTV"

# Asterisk Credentials - Copy these to globals file
ASTERISK_DIAL_OUT_NUMBER_1=""

# Vnstat
VNSTAT_CONFIG_DIR=$PROJECT_SYSTEM_CONF_DIR/vnstat
VNSTAT_CONFIG_FILE=$VNSTAT_CONFIG_DIR/vnstat.conf

# Bandwidth
BANDWIDTH_USAGE_LOG_DIR=$PROJECT_SYSTEM_LOG_DIR/bandwidth

ARIA2_DOWNLOAD_COMPLETE_BT_TOOL=
ARIA2_DOWNLOAD_COMPLETE_TOOL=
ARIA2_DOWNLOAD_ERROR_TOOL=
ARIA2_DOWNLOAD_PAUSE_TOOL=
ARIA2_DOWNLOAD_START_TOOL=
ARIA2_DOWNLOAD_STOP_TOOL=

# JambulaTV Tools
# ---------------
AUTO_WIFI_PROVISION_TOOL=$BINARY_PREFIX/jambulatv-auto-wifi-provision 
CONNECT_WIFI_AP_TOOL=$BINARY_PREFIX/jambulatv-connect-2-wifi-ap
BANDWIDTH_TOOL=$BINARY_PREFIX/jambulatv-bandwidth
GENERATE_LOCAL_CONF_TOOL=$BINARY_PREFIX/jambulatv-generate-local-conf
INITIAL_SETUP_TOOL=$BINARY_PREFIX/jambulatv-initial-setup 
KODI_CONTROLLER_TOOL=$BINARY_PREFIX/jambulatv-kodi-controller 
KODI_LIBRARY_TOOL=$BINARY_PREFIX/jambulatv-library
KODI_STANDALONE_TOOL=$BINARY_PREFIX/kodi-standalone
KODI_PVR_MANAGER_ENABLE_TOOL=$BINARY_PREFIX/jambulatv-kodi-pvr-hts-manager
LIGHTS_TOOL=/usr/bin/jambulatv-lights
OSD_TOOL=$BINARY_PREFIX/jambulatv-osd
PPP_DIAL_TOOL=$BINARY_PREFIX/jambulatv-ppp-dialer
EMAIL_VIA_GMAIL_TOOL=$BINARY_PREFIX/jambulatv-email 
SOUNDS_TOOL=$BINARY_PREFIX/jambulatv-sounds
TELEGRAM_TOOL=$BINARY_PREFIX/jambulatv-telegram
TVHEADEND_CONTROLLER_TOOL=$BINARY_PREFIX/jambulatv-tvheadend-controller 
TVHEADEND_PROCESSOR_TOOL=$BINARY_PREFIX/jambulatv-tvheadend-processor
VLM_VOD_CREATE_TOOL=$BINARY_PREFIX/jambulatv-create-video-on-demand
VLM_VOD_DELETE_TOOL=$BINARY_PREFIX/jambulatv-delete-video-on-demand
WHATSAPP_TOOL=$BINARY_PREFIX/jambulatv-whatsapp
XMPP_TOOL=$BINARY_PREFIX/jambulatv-xmpp
ZMEVENTSERVER_NOTIFICATION_DAEMON=$BINARY_PREFIX/zmeventnotification.pl
ZONEMINDER_ALARM_NOTIFICATIONS_TOOL=$BINARY_PREFIX/jambulatv-zm-alarm-all-notifications 
ZONEMINDER_ALARM_DAEMON=$BINARY_PREFIX/zmalarm_daemon.pl
ZONEMINDER_ZMS_INETD_TOOL=$BINARY_PREFIX/jambulatv-zms-inetd

# HTTP Headers
# ------------
# MacOS
HTTP_BROWSER_USERAGENT_MAC="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/603.3.8 (KHTML, like Gecko) Version/10.1.2 Safari/603.3.8"
# Linux
HTTP_BROWSER_USERAGENT_LINUX="Mozilla/5.0 (X11; Linux x86_64; rv\:54.0) Gecko/20100101 Firefox/54.0"
# Windows
HTTP_BROWSER_USERAGENT_WINDOWS="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36"
# Youtube
HTTP_BROWSER_USERAGENT_YOUTUBE="Mozilla/5.0"
# Youtube-DL
HTTP_BROWSER_USERAGENT_YOUTUBE_DL="Mozilla/5.0 (X11; Linux x86_64; rv\:10.0) Gecko/20150101 Firefox/47.0 (Chrome)"

# Default User-Agent
DEFAULT_USER_AGENT=$HTTP_BROWSER_USERAGENT_LINUX

# Curl
CURL_CMD="/usr/bin/curl"
CURL_OPTS="-s"
CURL_COOKIE_JAR_FILE=$TMPDIR/curl_cookie.txt

# Wget
WGET_CMD=wget
WGET_TIMEOUT=20
WGET_OPTIONS="-nv --no-check-certificate --retr-symlinks -T $WGET_TIMEOUT"

# Socat
SOCAT_CMD="/usr/bin/socat"
SOCAT_OPTS=""

YOUTUBE_API_KEY="AIzaSyC3bSp66pSZdSvRpWLVVaIQtVtdJw8kDGM"
YOUTUBE_CLIENT_ID="1047595433853-gspvl15aj43op9e2timmcqu9en3eefoo.apps.googleusercontent.com"
YOUTUBE_CLIENT_SECRET="x4HTznrI1eixU5XHVQxA-5wx"

# FM radio Streamer
FMRADIO_STREAMER_PORT=$(grep -i 'fmradio streamer$' $PORTS_ASSIGNED_FILE | awk {'print $1'})



############################
#  NOTIFICATION FUNCTIONS  #
############################
# Set notifications for logging purposes
set_notifications () {
NO_INTERNET_NOTIFICATION_MESSAGE="Error: You are not connected to the Internet. Please check your router and try again later!"
HOST_NOT_REACHEABLE_NOTIFICATION_MESSAGE="Error: The host $REMOTE_HOST_NAME is unreachable and may currently be down, please try again later!"
HOST_IS_BLOCKED_NOTIFICATION_MESSAGE="Warning: Internet traffic to $REMOTE_HOST_NAME is being filtered either by your ISP or the remote server. Expect a degradation in this service."
VPN_TUNNEL_OPENED_NOTIFICATION_MESSAGE="Alert: A secure VPN tunnel has been opened, re-routing all traffic through new connection"
VPN_TUNNEL_CLOSED_NOTIFICATION_MESSAGE="Alert: The VPN tunnel has been closed, re-routing all traffic back to default connection"
FTP_FAILED_NOTIFICATION_MESSAGE="Error: Failed to download the following file:"
WGET_FAILED_NOTIFICATION_MESSAGE="Error: Failed to download the following file:"
TVHEADEND_RESET_MESSAGE="Reset of TV server has been requested"
TVHEADEND_NO_TUNER_FOUND_MESSAGE="No DVB-T Adapter was detected!  Please insert the DVB-T device before continuing. You must also ensure the TV Antenna is also hooked up properly"
TVHEADEND_WAITING_4_SERVER_MESSAGE="Waiting for tvheadend.service to settle. Please be patient"
AGREEMENT_DVBT_CONFIGURE_NO_MESSAGE="You did not agree to configuring DVB-T, so quitting"
DVBT_NETWORK_EXISTS_MESSAGE="Warning: DVB-T network ($DVBT_NETWORK_NAME) already exists"
DVBT_MULTIPLEX_NOT_FOUND_MESSAGE="Error: No multiplexes were found for $TV_MARKET"
DVBT_PICONS_ADDED_MESSAGE="Added DVB-T picon images for $TV_MARKET TV market area"
DVBT_PICONS_NOT_FOUND_MESSAGE="Error: DVB-T picon images for $TV_MARKET TV market not found"
# The following, used by TVHeadend Controller tool
TVHEADEND_SERVER_REFRESH_START_MESSAGE="TV controller tool activated: Please wait while I attempt to perform maintenance on your ($(echo $TV_TYPE | tr '[:lower:]' '[:upper:]')) network"
TVHEADEND_SERVER_IN_USE_MESSAGE="Sorry, the TV server is currently in use ... Postponing maintenance on the ($(echo $TV_TYPE | tr '[:lower:]' '[:upper:]')) network"
DVBT_CHECK_HEALTH_STATUS_MESSAGE="Checking the health status of DVB-T network ($DVBT_NETWORK_NAME)"
DVBT_HEALTH_STATUS_OK_MESSAGE="DVB-T network ($DVBT_NETWORK_NAME) is OK"
DVBT_ADAPTER_NODE_MISSING_MESSAGE="Unable to detect the TV Tuner. This is most likely a hardware issue.  Please check your DVB-T2 tuner and ensure it is properly connected"
DVBT_NETWORK_MISSING_MESSAGE="Your Live TV network and channels list is corrupted. Please wait while I attempt to repair it now"
DVBT_NETWORK_NOT_ASSOCIATED_MESSAGE="The DVB-T network is not associated to your tuner. I will attempt to repair it now, please be patient"
DVBT_NETWORK_REPAIR_STARTED_MESSAGE="DVB-T Network Repair Mode initiated for $DVBT_NETWORK_NAME"
DVBT_NETWORK_CREATION_MESSAGE="Setting up a fresh DVB-T network named $DVBT_NETWORK_NAME"
IPTV_FETCH_PLAYLIST_MESSAGE="Downloading the latest IPTV playlist ($PLAYLISTS_IPTV_WORLD_M3U_FILE)"
IPTV_NETWORK_EXISTS_MESSAGE="IPTV network already exists, proceeding"
CCTV_NETWORK_EXISTS_MESSAGE="CCTV network already exists, proceeding"
IPTV_NETWORK_SCAN_STARTED_MESSAGE="Scanning of IPTV network started. This will take some time, please be patient ..."
DVBT_NETWORK_SCAN_STARTED_MESSAGE="Scanning for DVB Terrestrial services in $TV_MARKET TV market area started, please wait ..."
DVBT_NETWORK_REPAIR_TERMINATED="Warning: DVB-T repair process terminated since TVHeadend is being reset or repaired"
DVBT_WAITING_4_SERVICES_ADD_MESSAGE="Waiting for all DVB-T services to be added to TVHeadend server, please be patient ..." 
DVBT_CHANNEL_MAP_STARTED_MESSAGE="Mapping of your DVB-T network ($DVBT_NETWORK_NAME) started"
IPTV_CHANNEL_MAP_STARTED_MESSAGE="Mapping of your IPTV network started. Please be patient while mapping of your IPTV channels takes place ..."
CCTV_CHANNEL_MAP_STARTED_MESSAGE="Mapping of your CCTV network started. Please be patient while mapping of your CCTV channel feeds takes place ..."
DVBT_CHANNEL_MAP_COMPLETED_MESSAGE="Mapping of your DVB-T network ($DVBT_NETWORK_NAME) completed"
IPTV_CHANNEL_MAP_COMPLETED_MESSAGE="Mapping of your IPTV network completed"
CCTV_CHANNEL_MAP_COMPLETED_MESSAGE="Mapping of your CCTV network completed. You may now resume watching CCTV feeds ..."
KODI_REFRESH_TV_LOGOS_MESSAGE="Refreshing TV icons for your ($(echo $TV_TYPE | tr '[:lower:]' '[:upper:]')) network, the video screen will be restarted shortly"
EPG_DATA_4_KODI_REFRESH_MESSAGE="Refreshing the TV Guide for your ($(echo $TV_TYPE | tr '[:lower:]' '[:upper:]')) channels ..."
EPG_DATA_DOWNLOAD_START_MESSAGE="Download of TV programme information for $EPG_XMLTV_GUIDE_NAME started, please be patient ..."
TVHEADEND_SERVER_REFRESH_STOP_MESSAGE="Maintenance on your ($(echo $TV_TYPE | tr '[:lower:]' '[:upper:]')) network completed successfully. You may now resume watching Live TV"
#
BANDWIDTH_MONITOR_USED_MESSAGE="*[JambulaTV]* The Internet data used by *$MONITOR_REQUESTOR* was:"
BANDWIDTH_QUERY_USED_MESSAGE="*[JambulaTV]* The Internet data used $(echo $QUERY_PERIOD | sed 's:week:during the last 7 days:' | sed 's:month:during the last 30 days:') was:"
BANDWIDTH_QUERY_STANDBY_GENERATING_DATA_MESSAGE="Please standby for a minute while I gather your data bandwidth stats ..."
BANDWIDTH_QUERY_SENDING_WHATSAPP_TELEGRAM_MESSAGE="Sending data bandwidth usage stats to Telegram and WhatsApp, please be patient ..."
BANDWIDTH_GRAPHS_ATTACHED_MESSAGE="Attached are graphs showing total bandwidth used by your JambulaTV"
}

print_notification () {
# Set notification string and method
NOTIFICATION_STRING=$1
NOTIFICATION_METHOD=$2
# Log to stdout and systemd journal
if [[ "$NOTIFICATION_METHOD" = "text" ]];
then
logger -s -t $(basename $0) "$NOTIFICATION_STRING"
fi
# Log to OSD
if [[ -e "$OSD_TOOL" && "$NOTIFICATION_METHOD" = "osd" ]];
then
$OSD_TOOL -m "$NOTIFICATION_STRING" > /dev/null 2>&1
fi
}



######################
#  HELPER FUNCTIONS  #
######################
# Get current Python version
get_python_version () {
PYTHON_VERSION=$(python -V)
PYTHON_FULL_VERSION_NUMBER=$(echo $PYTHON_VERSION | awk {'print $2'})
PYTHON_MAJOR_VERSION_NUMBER=$(echo $PYTHON_FULL_VERSION_NUMBER | cut -d '.' -f1)
PYTHON_MINOR_VERSION_NUMBER=$(echo $PYTHON_FULL_VERSION_NUMBER | cut -d '.' -f1-2)
PYTHON2_SITEDIR=$LIBDIR/python${PYTHON_MINOR_VERSION_NUMBER}/site-packages
PYTHON3_SITEDIR=$PREFIX/local/lib/python${PYTHON_MINOR_VERSION_NUMBER}/site-packages
# Set Python site directories depending on version in use
[[ "$PYTHON_MAJOR_VERSION_NUMBER" = "2" ]] && PYTHON_SITEDIR=$PYTHON2_SITEDIR
[[ "$PYTHON_MAJOR_VERSION_NUMBER" = "3" ]] && PYTHON_SITEDIR=$PYTHON3_SITEDIR
# Export
export PYTHON_VERSION PYTHON_FULL_VERSION_NUMBER PYTHON_MAJOR_VERSION_NUMBER PYTHON_MINOR_VERSION_NUMBER PYTHON_SITEDIR
}

probe_remote_host_using_nmap () {
# Set nmap host to ping
NMAP_PROBE_HOST=$1
# Ping scan remote host using nmap
NMAP_HOST_STATUS=$($NMAP_CMD $NMAP_OPTS_GENERAL $NMAP_OPTS_PING_SCAN $NMAP_PROBE_HOST 2>&1 | grep -Evi -e 'Failed' -e 'WARNING' -e '^#' | awk '$4=="Status:" && $5=="Up" {print $5}')
# Set Internet status exit value based on previous ping scan
if [[ "$NMAP_HOST_STATUS" = "Up" ]];
then
INTERNET_STATUS_VAL=0
# Notify tools that use this function that ICMP ping requests are either blocked by server
# or the ISP is filtering access to this host 
PING_ICMP_REQUESTS_BLOCKED=yes
export PING_ICMP_REQUESTS_BLOCKED
#
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$HOST_IS_BLOCKED_NOTIFICATION_MESSAGE" text
# Print notification using OSD tool
print_notification "$HOST_IS_BLOCKED_NOTIFICATION_MESSAGE" osd

else
INTERNET_STATUS_VAL=255
fi
}

check_internet_connectivity_ping () {
DEFAULT_REMOTE_HOST_NAME_2_PING=$DNS_SERVER_IP_ADDRESS_DEFAULT # Use IP Address NOT DOMAIN NAME!!!
PING_HOST_EXIT_STATUS_TO_BE_USED=$1
PING_HOST_NAME=$2
# Set exit value specified on command line
if [[ "x$PING_HOST_EXIT_STATUS_TO_BE_USED" = "x" ]];
then
EXIT_VALUE=0
else
EXIT_VALUE=$PING_HOST_EXIT_STATUS_TO_BE_USED
fi
#
# Remote hostname to ping
# IMPORTANT: Don't use DNS to ping use actual IP i.e. convert DNS name to IP address
if [[ "x$PING_HOST_NAME" = "x" ]];
then
REMOTE_HOST_NAME=$DEFAULT_REMOTE_HOST_NAME_2_PING
else
REMOTE_HOST_NAME=$PING_HOST_NAME
fi

# Check to see if there's atleast an Internet connection whether filtered or not
$PING_CMD $PING_OPTS $DEFAULT_REMOTE_HOST_NAME_2_PING > /dev/null 2>&1
INTERNET_IS_REACHEABLE=$?
#
if [[ "$INTERNET_IS_REACHEABLE" != "0" ]];
then
# 1. If there is NO Internet at all, notify and quit immediately
# ..............................................................
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$NO_INTERNET_NOTIFICATION_MESSAGE" text
# Print notification using OSD tool
print_notification "$NO_INTERNET_NOTIFICATION_MESSAGE" osd
# Quit script, since there's no internet
exit $EXIT_VALUE
fi

# 2. If there is an Internet connection, check to see if is unfiltered
# ....................................................................
$PING_CMD $PING_OPTS $REMOTE_HOST_NAME > /dev/null 2>&1
INTERNET_STATUS_VAL=$?

if [[ "$INTERNET_STATUS_VAL" = "0" ]];
then
# Back out and continue with the rest of the tasks
break

else
# 3. Use nmap to do a ping scan of the remote as ICMP ping requests may be either
# blocked by server or the ISP is filtering access to this host
# ...............................................................................
probe_remote_host_using_nmap $REMOTE_HOST_NAME

if [[ "$INTERNET_STATUS_VAL" != "0" ]];
then
# Notify and quit when remote host is not alive i.e. dead
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$HOST_NOT_REACHEABLE_NOTIFICATION_MESSAGE" text
# Print notification using OSD tool
print_notification "$HOST_NOT_REACHEABLE_NOTIFICATION_MESSAGE" osd
# Quit script, since there's no internet
exit $EXIT_VALUE
fi

fi
}

vpn_connection_using_sshuttle () {
SSHUTTLE_ACTION=$1
SSHUTTLE_REMOTE_SERVER=$2
SSHUTTLE_REMOTE_PORT=$3
SSHUTTLE_REMOTE_USER=$4
SSHUTTLE_REMOTE_SUBNET=$5
#
case $SSHUTTLE_ACTION in

start)
# Connect to remote SSH server using sshuttle
$SSHUTTLE_CMD $SSHUTTLE_OPTS $SSHUTTLE_REMOTE_USER@$SSHUTTLE_REMOTE_SERVER:$SSHUTTLE_REMOTE_PORT $SSHUTTLE_REMOTE_SUBNET

# Notify that VPN tunnel has been established
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$VPN_TUNNEL_OPENED_NOTIFICATION_MESSAGE" text
# Print notification using OSD tool
print_notification "$VPN_TUNNEL_OPENED_NOTIFICATION_MESSAGE" osd
;;

stop)
# Stop current sshuttle tunnel process
[[ -e $SSHUTTLE_PID_FILE ]] && kill -15 $(cat $SSHUTTLE_PID_FILE)

# Notify that VPN tunnel has been established
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$VPN_TUNNEL_CLOSED_NOTIFICATION_MESSAGE" text
# Print notification using OSD tool
print_notification "$VPN_TUNNEL_CLOSED_NOTIFICATION_MESSAGE" osd
;;

*)
clear
cat <<EOT
Usage:	vpn_connection_using_sshuttle [start] [SERVER] [USER] [SUBNETS]
	vpn_connection_using_sshuttle [stop]
EOT
;;

esac
}

download_asterisk_deps () {
# Download updated asterisk sounds
# ---------------------------------
# Check Internet connectivity
check_internet_connectivity_ping 1
#
# Make temporary backup folder
[ ! -d $TMPDIR/asterisk_deps ] || rm -rf $TMPDIR/asterisk_deps
mkdir $TMPDIR/asterisk_deps
# Change to output directory
cd $TMPDIR/asterisk_deps
# Dahdi
wget -c http://downloads.asterisk.org/pub/telephony/dahdi-linux-complete/dahdi-linux-complete-current.tar.gz
# Libpri
wget -c http://downloads.asterisk.org/pub/telephony/libpri/libpri-current.tar.gz
# Asterisk core
wget -c http://downloads.asterisk.org/pub/telephony/asterisk/asterisk-11-current.tar.gz
# Asterisk Sounds
for CODEC in wav ulaw alaw gsm;
do
# Sounds Core
wget -c http://downloads.asterisk.org/pub/telephony/sounds/asterisk-core-sounds-en-$CODEC-current.tar.gz
# Sounds Extra
wget -c http://downloads.asterisk.org/pub/telephony/sounds/asterisk-extra-sounds-en-$CODEC-current.tar.gz
# Sounds MOH
wget -c http://downloads.asterisk.org/pub/telephony/sounds/asterisk-moh-opsound-$CODEC-current.tar.gz
done
#
# Move files to source tarballs directory
mv -v $TMPDIR/asterisk_deps/* $PROJECT_TARBALLS_DIR
#
echo "Update completed. All asterisk dependencies have been moved to [$PROJECT_TARBALLS_DIR]"
exit
}

download_flexget_deps () {
# Download fresh and updated flexget dependencies
# ------------------------------------------------
# Check Internet connectivity
check_internet_connectivity_ping 1
#
# Make temporary backup folder
[ ! -d $TMPDIR/flexget_deps ] || rm -rf $TMPDIR/flexget_deps
mkdir $TMPDIR/flexget_deps
if [ -d $PROJECT_TARBALLS_DIR/flexget_deps ];
then
# Remove old packages
mv -v $PROJECT_TARBALLS_DIR/flexget_deps/*{gz,bz2,zip} $TMPDIR/flexget_deps/
else
# Create Download directory
mkdir $PROJECT_TARBALLS_DIR/flexget_deps
fi
# Install update python modules
for PYTHON_MODULE in $FLEXGET_DEPENDENCIES
do
pip -v install --no-install -d $PROJECT_TARBALLS_DIR/flexget_deps $PYTHON_MODULE
clear
#
done
echo "Update completed. All flexget dependencies are located in [$PROJECT_TARBALLS_DIR/flexget_deps]"
}

make_build_log () {
echo 2>&1 | tee -a $BUILD_LOG << EOF

=============================
$PACKAGE
=============================

% 
Make: Building $PACKAGE, this may take some time.  Please be patient ...
%

EOF
}

cmake_build_log () {
echo 2>&1 | tee -a $BUILD_LOG << EOF

=============================
$PACKAGE
=============================

% 
cMake: Building $PACKAGE, this may take some time.  Please be patient ...
%

EOF
}

make_install_jambulatv () {
PACKAGE=$(basename $(pwd | sed "s:/build::g"))
# Log to build file
make_build_log
# Run make silently
make $@ > /dev/null 2>&1 # DONT use -j cores option (If you want, add it like: make_install_jambulatv -j$SYSTEM_CPU_CORES)
MAKE_EXIT_STATUS=$?
if [ "$MAKE_EXIT_STATUS" = "0" ];
then
# Complete build
make install
else
# Send error to logfile
cat >> $BUILD_LOG << EOF

-------------------------------------------------------------------------------
ERROR: Installation of package [$PACKAGE] failed.  Please fix!
-------------------------------------------------------------------------------

EOF
fi
}

# Kernel functions for install & upgrades
# ---------------------------------------
kernel_check_4_space () {
if [ "$AVAILABLE_DISK_SPACE_ROOT" -lt "$DISK_THRESHOLD_ROOT" ];
then
clear
cat <<EOF
You do not have enough space to compile the kernel.  Please free up some space before 
proceeding.  Available disk space = $AVAILABLE_DISK_SPACE_ROOT
EOF
exit 1
fi
}

kernel_patches () {
# Change to kernel sources root directory
cd $KERNELS_SRC_DIR/$KERNEL_VERSION.$KERNEL_NAME
# USB Core messages
patch -p1 ./drivers/usb/core/message.c < $PROJECT_PATCHES_DIR/kernel.usb_core.message.patch
# DVB Core Frontend - Set dvb_powerdown_on_sleep = 0
patch -p1 ./drivers/media/dvb-core/dvb_frontend.c < $PROJECT_PATCHES_DIR/kernel.dvb_core.frontend.patch
# Realtek WiFi
#patch -p1 ./drivers/net/wireless/realtek/rtlwifi/regd.c < $PROJECT_PATCHES_DIR/kernel.rtlwifi.regdb.patch
# USB TV Tuner - Gadmei
#patch -p1 ./drivers/media/usb/usbtv/usbtv-core.c < $PROJECT_PATCHES_DIR/kernel.usbtv_core.patch
# si2168 driver - DVB-T/T2 autodetect
patch -p1 ./drivers/media/dvb-frontends/si2168.c < $PROJECT_PATCHES_DIR/kernel.dvb.si2168.patch
}

kernel_install_notice () {
cat <<EOF
You are about to install the latest Linux kernel version [$KERNEL_VERSION], 

CAUTION:  This may take anywhere from 4 to 7 hours to complete! 

Enter to proceed ...
EOF
read
}



#########################
#  UNINSTALL FUNCTIONS  #
#########################
# Pause and check for Errors
_install_pause_check_4_errors_ () {
# Notify at Remote workstation - gxmessage needed there
if [ "x$1" != "x" ] && [ "x$2" != "x" ];
then
# Run only if remote station is up
ping -c 3 -W 3 $2 > /dev/null 2>&1
[ "$?" = "0" ] && ssh $1@$2 /usr/bin/gxmessage -center -ontop -timeout 60 -title "$PROJECT_NAME" "Hi $1! Your attention is required at JambulaTV"
fi
#
echo
echo
echo "Please enter to proceed ..."
echo
read
clear
}

kernel_upgrade_1 () {
SOURCESDIR=/opt
PROJECT_BASE_DIR=$SOURCESDIR/$PROJECT_NAME
# Source functions file
. $PROJECT_BASE_DIR/functions
KERNEL_VERSION=$NEW_KERNEL

# See how much space is left
kernel_check_4_space
#
# Check if desired kernel exists
uname -r | grep -i $KERNEL_VERSION > /dev/null 2>&1
if [ "$?" != "0" ];
then
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/linux-$KERNEL_VERSION.tar.xz  -C $KERNELS_SRC_DIR
cd $KERNELS_SRC_DIR/
# Rename sources directory to our name
mv -v linux-$KERNEL_VERSION $KERNEL_VERSION.$KERNEL_NAME
cd $KERNELS_SRC_DIR/$KERNEL_VERSION.$KERNEL_NAME
#
# Apply patches
kernel_patches
#

cat <<EOF

WARNING!!!!
BEFORE PROCEEDING, CHECK TO SEE IF PATCHES ARE INSTALLED INPROPER LOCATION AND NOT UNDER

$KERNELS_SRC_DIR/drivers


EOF

_install_pause_check_4_errors_

# Change to kernel sources root directory
cd $KERNELS_SRC_DIR/$KERNEL_VERSION.$KERNEL_NAME
#
# Remove stale .o files and dependencies lying around
make mrproper
# Add our .config file
cp -v $PROJECT_CONFIGS_DIR/kernel.config .config
# Compile
make oldconfig
fi
}

kernel_upgrade_2 () {
# Source functions file
#
KERNEL_VERSION=$NEW_KERNEL
#
# Notice - Going to install
kernel_install_notice
#
cd $KERNELS_SRC_DIR/$KERNEL_VERSION.$KERNEL_NAME
make bzImage
make modules
make modules_install
make install
#
# Done - Banner
echo
echo
cat << EOF
###############################################################################
                                                                             
    Done installing the kernel: $KERNEL_VERSION.$KERNEL_NAME                  
                                                                             
    Please perform the following tasks:

    1. Copy .config file to project configs directory

    2. Run make clean

    3. Change Kernel Version in functions file

    4. You must REBOOT before proceeding
                                                                             
###############################################################################
EOF
exit
}

uninstall_src_pkgs () {
if [ -d $INSTALL_SRC_DIR/$1 ];
then
echo "Uninstalling the package: $1 ..."
cd $INSTALL_SRC_DIR/$1 
make uninstall && make clean && make distclean
cd $INSTALL_SRC_DIR
rm -rf $1
fi
#
whereis $1 > /dev/null
PKG_LEFTOVERS_EXIST=$?
[ "$PKG_LEFTOVERS_EXIST" != "0" ] || rm -rf `whereis $1`
}

uninstall_python_pkgs () {
get_python_version
[ ! -d $PYTHON_SITEDIR/$1 ] || rm -rf $PYTHON_SITEDIR/$1
[ -d $PYTHON_SITEDIR/$1*.egg ] && rm -rf $PYTHON_SITEDIR/$1*.egg
whereis $1 > /dev/null
PKG_LEFTOVERS_EXIST=$?
[ "$PKG_LEFTOVERS_EXIST" != "0" ] || rm -rf `whereis $1`
}

uninstall_cmake_pkgs () {
echo "Uninstalling the package: $1 ..."
# Check for manifest in root path
if [ -f $INSTALL_SRC_DIR/$1/install_manifest.txt ];
then
xargs rm < $INSTALL_SRC_DIR/$1/install_manifest.txt
#
# Check for manifest in build path
elif [ -f $INSTALL_SRC_DIR/$1/build/install_manifest.txt ];
then
xargs rm < $INSTALL_SRC_DIR/$1/build/install_manifest.txt 
fi
#
# Remove sources
[ -d $INSTALL_SRC_DIR/$1 ] && rm -rf $INSTALL_SRC_DIR/$1
}

# Uninstall kodi
uninstall_kodi () {
# Stop kodi
systemctl stop jambulatv@kodi.service
# Uninstall kodi
uninstall_src_pkgs kodi
}

uninstall_kodi_addons () {
for KODI_ADDON in $@
do
# Remove from system kodi addons share
if [ -d $KODI_SYSTEM_ADDONS/$KODI_ADDON ];
then
rm -rf $KODI_SYSTEM_ADDONS/$KODI_ADDON
#
echo
echo "$KODI_ADDON removed from $KODI_SYSTEM_ADDONS"
_install_pause_check_4_errors_
#
# Remove from user kodi addons share
elif [ -d $KODI_ADDON_DATA_DIR/$KODI_ADDON ];
then
rm -rf $KODI_ADDON_DATA_DIR/$KODI_ADDON
#
echo
echo "$KODI_ADDON removed from $KODI_ADDON_DATA_DIR"
_install_pause_check_4_errors_
fi
#
done
}

uninstall_oss () {
# Make build directory
cd $INSTALL_SRC_DIR/oss && make clean
# Uninstall
sh $INSTALL_SRC_DIR/oss/setup/Linux/removeoss.sh
rm -rf $INSTALL_SRC_DIR/oss
rm -rf $INSTALL_SRC_DIR/oss-$OSS_VERSION-src-gpl
}

# Uninstall live555
uninstall_live555 () {
uninstall_src_pkgs live
uninstall_src_pkgs live555
uninstall_src_pkgs liveMedia
uninstall_src_pkgs groupsock
uninstall_src_pkgs BasicUsageEnvironment
uninstall_src_pkgs UsageEnvironment
# Remove Binaries
for LIVEBIN in live555MediaServer live555ProxyServer sapWatch playSIP openRTSP testMP3Streamer testMPEG1or2VideoStreamer testMPEG1or2AudioVideoStreamer testMPEG2TransportStreamer testMPEG4VideoStreamer testH264VideoStreamer testDVVideoStreamer testWAVAudioStreamer testAMRAudioStreamer vobStreamer testMP3Receiver testMPEG1or2VideoReceiver testMPEG2TransportReceiver sapWatch testRelay testReplicator testOnDemandRTSPServer testMPEG1or2AudioVideoToDarwin testMPEG4VideoToDarwin testRTSPClient openRTSP playSIP testMPEG1or2Splitter testMPEG1or2ProgramToTransportStream testH264VideoToTransportStream MPEG2TransportStreamIndexer testMPEG2TransportStreamTrickPlay
do
rm $BINARY_PREFIX/$LIVEBIN
done
# Remove Libs
for LIVELIB in libBasicUsageEnvironment.a libliveMedia.a libgroupsock.a libUsageEnvironment.a
do
rm $LIBDIR/$LIVELIB
done
}

uninstall_icinga2 () {
ICINGA2_PREVIOUS_VERSION=$(icinga2 --version | head -1 | cut -d : -f2 | sed 's: ::' | sed 's:)::')
# stop icinga2 service
systemctl stop icinga2.service
# disable service
systemctl disable icinga2.service
# Remove icinga systemd file
[ -f $SYSTEMD_UNITS_DIR_USER/icinga2.service ] && \
	rm -f $SYSTEMD_UNITS_DIR_USER/icinga2.service
# Drop MySQL DB
mysqladmin -f -p$MYSQL_ROOT_PASSWORD drop $ICINGA_DB_NAME
# Remove user and groups
groupdel $ICINGA_CMD_GROUP
userdel -r $ICINGA_USER
# Remove sudoers file
[ -f $SUDOERS_DIR/icinga ] && \
	rm -f $SUDOERS_DIR/icinga
# /etc
mv -v $CONFDIR/icinga2 $CONFDIR/icinga2.$ICINGA2_PREVIOUS_VERSION
rm -f $CONFDIR/rc.d/rc{0,1,2,3,4,5,6}.d/*icinga2
rm -f $CONFDIR/bash_completion.d/icinga2
rm -f $LOGROTATE_CONF_DIR/icinga2
rm -f $CONFDIR/sysconfig/icinga2
# /var 
rm -rf $STATEDIR/cache/icinga2 \
rm -rf $STATEDIR/lib/icinga2 \
rm -rf $STATEDIR/log/icinga2 \
rm -rf $SPOOLDIR/icinga2
# /usr
rm -f $SYSTEMD_UNITS_DIR_SYSTEM/icinga2.service
systemctl --system daemon-reload
rm -f $PREFIX/sbin/icinga2*
rm -rf $LIBDIR/icinga2
rm -rf $PREFIX/lib/icinga2
rm -rf $DOCSDIR/icinga2
rm -rf $DATAROOTDIR/icinga2*
rm -f $MANDIR8/icinga2*
rm -rf $INSTALL_SRC_DIR/icinga2
}

uninstall_icingaweb2 () {
ICINGAWEB2_PREVIOUS_VERSION=$(cat $WWW_HTML_DIR/icingaweb2/VERSION | cut -d - -f1)
# Backup config dir
mv -v $PROJECT_SYSTEM_CONF_DIR/icingaweb2 $PROJECT_SYSTEM_CONF_DIR/icingaweb2.$ICINGAWEB2_PREVIOUS_VERSION
# Remove icingaweb2 user/group
groupdel $ICINGA2_WEB_GROUP 
# Drop MySQL DB
mysqladmin -f -p$MYSQL_ROOT_PASSWORD drop $ICINGAWEB2_DB_NAME
# Remove icingaweb2 html/source files
rm -rf $WWW_HTML_DIR/icingaweb2/
[ -f $NGINX_CONF_DIR/sites-enabled/icingaweb2 ] &&
	rm -f $NGINX_CONF_DIR/sites-enabled/icingaweb2
}

uninstall_zoneminder () {
# Stop, disable, and remove zoneminder systemd unit file
systemctl stop zoneminder.service
systemctl disable zoneminder.service
[[ -e $SYSTEMD_UNITS_DIR_USER/zoneminder.service ]] && \
	rm -f $SYSTEMD_UNITS_DIR_USER/zoneminder.service
systemctl daemon-reload

# Set PID of zoneminder processes still lingering
PID_ZONEMINDER=$(ps auxw | grep zm | awk {'print $2'})
#
# Kill zoneminder processes still lingering
[ "x$PID_ZONEMINDER" = "x" ] || kill -15 $PID_ZONEMINDER

# Backup config directory
[[ -d $ZONEMINDER_CONFIG_DIR ]] && \
	mv -v $ZONEMINDER_CONFIG_DIR $ZONEMINDER_CONFIG_DIR.$(date +%Y%m%d)

# Drop database data for tests/new installs
clear
echo "
CAUTION: Take care here - ZoneMinder files, logs and database about to be dropped !!!

Are you sure you want to proceed? If not, Press 'Ctrl+C' to back out

=======================================================================================
"
mysqladmin -p$MYSQL_ROOT_PASSWORD drop $ZONEMINDER_DB_NAME

# Uninstall ZoneMinder
if [[ -d $INSTALL_SRC_DIR/ZoneMinder ]];
then
cd $INSTALL_SRC_DIR/ZoneMinder
make uninstall
fi
# Remove ZM related directories
rm -rf $DATAROOTDIR/zoneminder
rm -rf $DATAROOTDIR/perl5/vendor_perl/ZoneMinder
rm -rf /usr/lib/perl5/vendor_perl/auto/ZoneMinder
rm -f $MANDIR3/ZoneMinder.3pm
rm -rf $RUNDIR/zm
rm -rf $ZONEMINDER_WWW_ROOT_DIR
rm -rf $WWW_CGI_DIR/zm
rm -rf $STATEDIR/lib/mysql/zm
rm -rf $PROJECT_SYSTEM_LOG_DIR/zoneminder
rm -rf $CACHEDIR/zoneminder
rm -rf $ZONEMINDER_SOUNDS_DIR
rm -rf $INSTALL_SRC_DIR/ZoneMinder
rm -f $ZMEVENTSERVER_NOTIFICATION_DAEMON
}

uninstall_flexget () {
# Stop running instance
systemctl stop flexget.service
# Uninstall
pip uninstall -y flexget
rm -rf $INSTALL_SRC_DIR/Flexget
}

uninstall_flexget_deps () {
for PYTHON_MODULE in $FLEXGET_DEPENDENCIES
do
# Uninstall python modules
echo "Uninstalling $PYTHON_MODULE ..."
pip uninstall -y $PYTHON_MODULE
# Remove source files
[ ! -d $INSTALL_SRC_DIR/$PYTHON_MODULE ] || rm -rf $INSTALL_SRC_DIR/$PYTHON_MODULE
done
}

uninstall_asterisk () {
# Stop running asterisk
systemctl stop asterisk || kill -9 $(ps auxw | grep asterisk | awk {'print $2'})
# Backup sqlite database - contains CallerID lookups etc..
mv -v $VARLIBDIR/asterisk/astdb.sqlite3 $BACKUPS_DIR
# Make build directory
cd $INSTALL_SRC_DIR/asterisk 
# Uninstall
make uninstall-all
# Remove source directories
rm -rf $INSTALL_SRC_DIR/asterisk $LIBDIR/asterisk $INCDIR/asterisk.h
# See if other process like www i.e. nginx are running under user asterisk - remove and restart
# nginx
sed -i "s:user  $ASTERISK_FILES_USER $WWW_USER;:user  nginx;:g" $NGINX_CONF_DIR/nginx.conf
# php-fpm
sed -i "s:user = $ASTERISK_FILES_USER:user = nginx:g" $CONFDIR/php-fpm.d/www.conf
sed -i "s:group = $WWW_USER:group = nginx:g" $CONFDIR/php-fpm.d/www.conf
# Restart nginx
systemctl restart nginx.service
# Restart php-fpm
systemctl restart php-fpm.service
# make spawn-cgi run under 'default' group
sed -i "s:FCGI_USER=$ASTERISK_FILES_USER:FCGI_USER=nginx:g" $SYSCONFIG_DIR/spawn-fcgi 
sed -i "s:FCGI_GROUP=$WWW_USER:FCGI_GROUP=nginx:g" $SYSCONFIG_DIR/spawn-fcgi 
# Restart fcgiwrap service now 
systemctl restart spawn-fcgi.service
#
# Remove asterisk user/group
groupdel asterisk
userdel -r asterisk
# Remove systemd files
rm -f $SYSTEMD_UNITS_DIR_SYSTEM/asterisk.service $SYSTEMD_UNITS_DIR_USER/asterisk.service
systemctl --system daemon-reload
# Backup and remove project configs directory
[ -d $ASTERISK_CONF_DIR ] && \
mv -v $ASTERISK_CONF_DIR $ASTERISK_CONF_DIR-$ASTERISK_VERSION-backup
# Drop asterisk database - CAUTION: Take care - CDR/FreePBX data is there!!!
mysqladmin -p$MYSQL_ROOT_PASSWORD drop $ASTERISK_DB_NAME
}

# Uninstall dahdi
uninstall_dahdi () {
uninstall_src_pkgs dahdi-linux-complete
uninstall_src_pkgs dahdi
}

# Uninstall libpri
uninstall_libpri () {
uninstall_src_pkgs libpri
}

# Uninstall freepbx
uninstall_freepbx () {
# Remove amportal, FreePBX config & webroot files
rm -f $SBINARY_PREFIX/amportal
rm -f $CONFDIR/amportal.conf 
rm -rf $VARLIBDIR/asterisk/bin
rm -f $CONFDIR/freepbx.conf
rm -f $CONFDIR/asterisk/freepbx_module_admin.conf
rm -f $CONFDIR/asterisk/extensions_override_freepbx.conf
rm -f $CONFDIR/asterisk/freepbx_chown.conf
rm -f $CONFDIR/asterisk/manager.conf*
rm -rf $SPOOLDIR/asterisk/.gnupg
rm -f $LOGDIR/asterisk/freepbx*
rm -rf $FREEPBX_CONF_DIR
rm -rf $WWW_HTML_DIR/freepbx 
rm -rf $INSTALL_SRC_DIR/freepbx
#
# Drop database data for tests/new installs
echo "
CAUTION: Take care here - CDR/FreePBX data is about to be dropped !!!
====================================================================
"
mysqladmin -p$MYSQL_ROOT_PASSWORD drop $ASTERISK_CDR_DB_NAME
mysqladmin -p$MYSQL_ROOT_PASSWORD drop $ASTERISK_DB_NAME
# Stop running asterisk
killall asterisk > /dev/null || kill -9 $(ps auxw | grep asterisk | awk {'print $2'}) > /dev/null
killall safe_asterisk > /dev/null || kill -9 $(ps auxw | grep safe_asterisk | awk {'print $2'}) > /dev/null
# Restart asterisk service
systemctl restart asterisk.service
}

# uninstall chilli
uninstall_coova_chilli () {
systemctl stop coova-chilli.service
mv -v $CONFDIR/chilli $CONFDIR/chilli.$(date +%Y%m%d)
mv -v $COOVA_HTML_DIR $COOVA_HTML_DIR.$(date +%Y%m%d)
# Remove systemd files
rm -f $SYSTEMD_UNITS_DIR_USER/coova-chilli.service
systemctl --system daemon-reload
uninstall_src_pkgs coova-chilli
uninstall_src_pkgs chilli
rm -rf $INSTALL_SRC_DIR/coova-chilli
# Replace default nginx config
cp -vf $PROJECT_CONFIGS_DIR/nginx/sites-enabled/default $NGINX_CONF_DIR/sites-enabled/
echo "delete from radcheck;" | mysql -u $FREERADIUS_DB_USER -p$FREERADIUS_DB_PASS $FREERADIUS_DB_NAME
}

# uninstall freeradius
uninstall_freeradius () {
systemctl stop radiusd.service
uninstall_src_pkgs freeradius-server
rm -rf $(whereis freeradius)
rm -rf $(whereis radiusd)
mv -v $CONFDIR/raddb $CONFDIR/raddb.$(date +%Y%m%d)
# Remove user
userdel radiusd
}

uninstall_owncloud () {
# Remove owncloud HTML files
rm -rf $WWW_HTML_DIR/owncloud
}

uninstall_nextcloud () {
# Remove owncloud HTML files
rm -rf $WWW_HTML_DIR/nextcloud
# Drop database data for tests/new installs
cat <<EOF
CAUTION: Take care here - NextCloud data is about to be dropped !!!
====================================================================
EOF
mysqladmin -p$MYSQL_ROOT_PASSWORD drop $NEXTCLOUD_DB_NAME
}

uninstall_gstreamer_plugins () {
for GST_PLUGIN in \
base \
good \
bad \
ugly 
do
uninstall_src_pkgs gst-plugins-$GST_PLUGIN 
done
}

uninstall_avplayers () {
uninstall_src_pkgs livepause
uninstall_python_pkgs pydvbstreamer
uninstall_src_pkgs dvbstreamer
uninstall_src_pkgs tvheadend
uninstall_src_pkgs xine-ui
uninstall_src_pkgs xine-lib
uninstall_src_pkgs xine
uninstall_src_pkgs vlc 
#&& rm -f `find /usr/lib -name libvlc*` && rm -f `find $LIBDIR -name libvlc*`
uninstall_src_pkgs mplayer
uninstall_src_pkgs ffmpeg
uninstall_src_pkgs x264 
uninstall_src_pkgs libdvbpsi
uninstall_live555
}

uninstall_wpa_supplicant () {
killall wpa_supplicant > /dev/null 2>&1
rm -f /usr/sbin/{wpa_supplicant,wpa_cli,wpa_passphrase}
# Backup old configs
[[ -e $CONFDIR/wpa_supplicant ]] && mv -v $CONFDIR/wpa_supplicant $CONFDIR/wpa_supplicant.$(date +%Y%m%d)
# Remove systemd files
[ -e $SYSTEMD_UNITS_DIR_USER/wpa_supplicant.service ] && rm -f $SYSTEMD_UNITS_DIR_USER/wpa_supplicant.service
systemctl --system daemon-reload
# Remove source files
rm -rf $INSTALL_SRC_DIR/hostap/wpa_supplicant
}

uninstall_hostapd () {
systemctl stop hostapd.service > /dev/null 2>&1
rm -f /usr/sbin/{hostapd,hostapd_cli}
# Backup old configs
[[ -e $CONFDIR/hostapd ]] && mv -v $CONFDIR/hostapd $CONFDIR/hostapd.$(date +%Y%m%d)
# Remove systemd files
[ -e $SYSTEMD_UNITS_DIR_USER/hostapd.service ] && rm -f $SYSTEMD_UNITS_DIR_USER/hostapd.service
systemctl --system daemon-reload
# Remove source files
rm -rf $INSTALL_SRC_DIR/hostapd
}

# Uninstall pocketsphinx
uninstall_pocketsphinx () {
uninstall_src_pkgs pocketsphinx
}

# Uninstall sphinxbase
uninstall_sphinxbase () {
uninstall_src_pkgs sphinxbase
}

uninstall_domoticz () {
# Stop domoticz and remove service file
systemctl stop domoticz.service && systemctl disable domoticz.service
rm -f $SYSTEMD_UNITS_DIR_USER/domoticz.service
# Remove binary from bindir
rm -f $BINARY_PREFIX/domoticz
# Remove log file
rm -f $DOMOTICZ_LOG_FILE
# Remove web files from JambulaTV location
rm -rf $DOMOTICZ_HTML_DIR
# Backup home directory if it exists
[ -d $DOMOTICZ_HOME_DIR ] && \
	mv -v $DOMOTICZ_HOME_DIR $DOMOTICZ_HOME_DIR.$(date '+%Y%m%d')
# Remove source directory
rm -rf $INSTALL_SRC_DIR/domoticz
}

uninstall_firefox () {
[ -d $INSTALL_SRC_DIR/firefox ] && rm -rf $INSTALL_SRC_DIR/firefox
}
uninstall_youtube_dl () {
uninstall_python_pkgs youtube-dl
}

uninstall_netdata () {
# Stop and disable netdata systemd service
systemctl stop netdata.service
systemctl disable netdata.service
# Uninstall
if [ -e $INSTALL_SRC_DIR/netdata/netdata-uninstaller.sh ];
then
$INSTALL_SRC_DIR/netdata/netdata-uninstaller.sh --force
else
# Backup config directory
[ -e $CONFDIR/netdata/netdata.conf ] && \
	mv -v $CONFDIR/netdata $CONFDIR/netdata.$(date +%Y%m%d)
# Remove sources
[ -d $INSTALL_SRC_DIR/netdata ] && rm -rf $INSTALL_SRC_DIR/netdata
rm -rf $(whereis netdata) $LOGDR/netdata $STATEDIR/cache/netdata
fi
# Remove user and groups
groupdel netdata
userdel -r netdata
}



#####################
#  RESET FUNCTIONS  #
#####################
reset_tvheadend_2_default () {
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$TVHEADEND_RESET_MESSAGE" text
# Print notification using OSD tool
print_notification "$TVHEADEND_RESET_MESSAGE" osd

# Add control file for other apps to know that TVHeadend Reset is in progress
[ -e $TVHEADEND_RESET_IN_PROGRESS_TEMP_FILE ] || \
touch $TVHEADEND_RESET_IN_PROGRESS_TEMP_FILE
# Stop tvheadend service
sudo systemctl stop tvheadend.service
# Backup and remove old files
mv -v $TVHEADEND_CONFIG_DIR ${TVHEADEND_CONFIG_DIR}.$(date +%Y%m%d%H%M)
#
# Source DVB-T2 variables
dvbt_ask_4_variables yes
dvbt_set_variables
#
# Quit if no
if [[ "$TVH_DVBT_CONFIG_REQUESTED" != "yes" ]];
then
clear
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$AGREEMENT_DVBT_CONFIGURE_NO_MESSAGE" text
# Print notification using OSD tool
print_notification "$AGREEMENT_DVBT_CONFIGURE_NO_MESSAGE" osd

exit 0
fi
# DVB-T2 & IPTV
tvheadend_configure
iptv_tvheadend_configure
iptv_icons_add 
# EPG
epg_tvheadend_configure
cctv_tvheadend_configure
# Remove control file for other apps to know that TVHeadend Reset completed
[ -e $TVHEADEND_RESET_IN_PROGRESS_TEMP_FILE ] && \
sudo rm -f $TVHEADEND_RESET_IN_PROGRESS_TEMP_FILE
#
# Repair TV icons in Kodi Interface
$KODI_CONTROLLER_TOOL tv_picons_repair
}



#######################
#  INSTALL FUNCTIONS  #
#######################

kernel_install () {
# See how much space is left
kernel_check_4_space
#
# Check if desired kernel exists
uname -r | grep -i $KERNEL_VERSION > /dev/null 2>&1
if [ "$?" != "0" ];
then
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/linux-$KERNEL_VERSION.tar.xz  -C $KERNELS_SRC_DIR
cd $KERNELS_SRC_DIR/
# Rename sources directory to our name
mv -v linux-$KERNEL_VERSION $KERNEL_VERSION.$KERNEL_NAME
cd $KERNELS_SRC_DIR/$KERNEL_VERSION.$KERNEL_NAME
#
# Apply patches
kernel_patches
#
_install_pause_check_4_errors_
#
# Remove stale .o files and dependencies lying around
make mrproper
# Add our .config file
cp -v $PROJECT_CONFIGS_DIR/kernel.config .config
# Compile
make oldconfig
#
# Notice - Going to install
kernel_install_notice
#
make bzImage
make modules
make modules_install
make install
# Clean up - saves upto 8GB
make clean
# Done - Banner
clear
cat << EOF
###############################################################################
                                                                             
    Done installing the kernel: $KERNEL_VERSION.$KERNEL_NAME                  
                                                                             
    Please reboot and re-run install.sh. Install will continue to next stage  
                                                                             
###############################################################################
EOF
exit
fi
}

# Info about this install
about_install () {
clear
cat <<EOF
 ========================================================================================
  $COMPANY_NAME Installation Program
 $COPYRIGHT_NOTICE

  Product:	$PROJECT_NAME
  Version:	$PROJECT_VERSION
  Website: 	$PROJECT_URL

 ========================================================================================

 ***********
 * WARNING *
 ***********
 Please be advised that this install process will take at least 8 hours 
 to complete.  Please enter to proceed or press 'Ctrl+C to cancel' ...

EOF
read
}

update_dtv_scan_tables () {
# Update dtv scan tables
rsync -avz $PROJECT_GITHUB_DIR/dtv-scan-tables/ $DATAROOTDIR/dvb/
}

dvbt_ask_4_variables () {
# ----------
# TV Market
# ----------
clear
DEFAULT_TV_MARKET=$TVHEADEND_TV_MARKET
read -p "Please enter the name of your TV Market [$DEFAULT_TV_MARKET]

Examples:
UG-Kampala
KE-Nairobi

" TV_MARKET
# If empty set to default
if [ "x$TV_MARKET" = "x" ];
then
TV_MARKET=$DEFAULT_TV_MARKET
fi
# Export
export TV_MARKET
#
# -----------------
# TV Tuner chipset
# -----------------
clear
DEFAULT_DVBT_TUNER_NAME="Silicon Labs Si2168"
read -p "Please enter the name of your TV tuner chipset [$DEFAULT_DVBT_TUNER_NAME]

Examples:
Silicon Labs Si2168
Sony CXD2820R

" DVBT_TUNER_NAME
# If empty set to default
if [ "x$DVBT_TUNER_NAME" = "x" ];
then
DVBT_TUNER_NAME=$DEFAULT_DVBT_TUNER_NAME
fi
# Export
export DVBT_TUNER_NAME
#
# ---------------
# InfraRed Remote
# ---------------
DEFAULT_IR_REMOTE_CHOICE=1
clear
read -p "Please enter the name of your Infra Red Remote [$DEFAULT_IR_REMOTE_CHOICE]

1. vr-1100
2. hauppauge
3. intex
4. streamzap
5. samsung

" IR_REMOTE_CHOICE
# If empty set to default
if [ "x$IR_REMOTE_CHOICE" = "x" ];
then
IR_REMOTE_CHOICE=$DEFAULT_IR_REMOTE_CHOICE
fi
# Set Remote name
case $IR_REMOTE_CHOICE in
1)
IR_REMOTE=vr-1100
;;
2)
IR_REMOTE=hauppauge
;;
3)
IR_REMOTE=intex
;;
4)
IR_REMOTE=streamzap
;;
5)
IR_REMOTE=samsung
;;
*)
IR_REMOTE=vr-1100
;;
esac
# Export
export IR_REMOTE
#
# ------------------------
# DVB-T Configure request
# ------------------------
clear
# Set default action depending on whether its specified in function
[[ "x$1" = "x" ]] && DEFAULT_TVH_DVBT_CONFIG_REQUESTED="no" || \
DEFAULT_TVH_DVBT_CONFIG_REQUESTED="$1"
read -p "Would you like to configure DVB-T network in tvheadend (yes|no)? [$DEFAULT_TVH_DVBT_CONFIG_REQUESTED]

IMPORTANT: If yes, please insert the DVB-T device before continuing.
You must also ensure the TV Antenna is also hooked up properly

" TVH_DVBT_CONFIG_REQUESTED
# If empty set to default
if [ "x$TVH_DVBT_CONFIG_REQUESTED" = "x" ];
then
TVH_DVBT_CONFIG_REQUESTED=$DEFAULT_TVH_DVBT_CONFIG_REQUESTED
fi
# Export
export TVH_DVBT_CONFIG_REQUESTED

# Set DVBT variables
# ----------
# TV Market
# ----------
FIND_DVBT_NETWORK=$(find $DATAROOTDIR/dvb/dvb-t -maxdepth 1 -iname "$TV_MARKET")
[[ "x$FIND_DVBT_NETWORK" = "x" ]] || \
DVBT_NETWORK_NAME=$(basename $FIND_DVBT_NETWORK)
case $TV_MARKET in
[Uu][Gg]-[Kk][Aa][Mm][Pp][Aa][Ll][Aa])
DVBT_PNETWORK_NAME="UBC TX2"
DVBT_MULTIPLEXES="$(awk /FREQUENCY/{'print $3'} $DATAROOTDIR/dvb/dvb-t/[Uu][Gg]-[Kk][Aa][Mm][Pp][Aa][Ll][Aa] | grep -Ex '[0-9]{9}' | paste -s -d " ")"
;;

[Kk][Ee]-[Nn][Aa][Ii][Rr][Oo][Bb][Ii])
DVBT_PNETWORK_NAME="ADN"
DVBT_MULTIPLEXES="$(awk /FREQUENCY/{'print $3'} $DATAROOTDIR/dvb/dvb-t/[Kk][Ee]-[Nn][Aa][Ii][Rr][Oo][Bb][Ii] | grep -Ex '[0-9]{9}' | paste -s -d " ")"
;;

esac
# Export
export DVBT_NETWORK_NAME DVBT_PNETWORK_NAME DVBT_MULTIPLEXES
#
# -----------------
# TV Tuner chipset
# -----------------
DVBT_TUNER_NAME="Silicon Labs Si2168"
if [ "x$DVBT_TUNER_NAME" = "x" ];
then
DVBT_TUNER_NAME=$DEFAULT_DVBT_TUNER_NAME
fi
#
DVB_TUNER_ADAPTER=$(dmesg | grep "$DVBT_TUNER_NAME" | grep 'DVB: registering adapter' | cut -d : -f3 | awk {'print $3'})
if [ "x$DVB_TUNER_ADAPTER" = "x" ];
then
DVBT_TUNER_NO=0
else
DVBT_TUNER_NO=$DVB_TUNER_ADAPTER
fi
# Export
export DVBT_TUNER_NAME DVB_TUNER_ADAPTER DVBT_TUNER_NO
}

dvbt_set_variables () {
# Copy to DVBT settings file
# --------------------------
cat > $PROJECT_DVBT_SETTINGS_FILE <<EOF
DVBT_TUNER_NAME="$DVBT_TUNER_NAME"
DVB_TUNER_ADAPTER=$DVB_TUNER_ADAPTER
DVBT_TUNER_NO=$DVBT_TUNER_NO
TV_MARKET="$TV_MARKET"
IR_REMOTE="$IR_REMOTE"
DVBT_NETWORK_NAME="$DVBT_NETWORK_NAME"
DVBT_PNETWORK_NAME="$DVBT_PNETWORK_NAME"
DVBT_MULTIPLEXES="$DVBT_MULTIPLEXES"
EOF
# Change ownership to multimedia user i.e. jambula and make it executable
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PROJECT_DVBT_SETTINGS_FILE
chmod 755 $PROJECT_DVBT_SETTINGS_FILE
}

install_dir_create () {
# create install directory
[ -d $INSTALL_SRC_DIR ] || mkdir -p $INSTALL_SRC_DIR
# create configuration directory
[ -d $PROJECT_SYSTEM_CONF_DIR ] || mkdir -p $PROJECT_SYSTEM_CONF_DIR
# create share directory
[ -d $PROJECT_SYSTEM_SHARE_DIR ] || mkdir -p $PROJECT_SYSTEM_SHARE_DIR
# create backups directory
[ -d $BACKUPS_DIR ] || mkdir -p $BACKUPS_DIR
}

images_add () {
# Copy project images directory
rsync -av $PROJECT_IMAGES_DIR $PROJECT_SYSTEM_SHARE_DIR/
# Give permissons
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PROJECT_SYSTEM_SHARE_DIR/images
}

ssl_cert_key_generate () {
# ssl_cert_key_generate [CERT_FILE_PATH] [KEY_FILE_PATH] [DAYS]
openssl req -new -x509 -nodes -out $1 -keyout $2 -days $3 -subj "/CN=${SYSTEM_IDENTIFIER}.${PROJECT_NAME} /O=$PROJECT_NAME /OU=$COMPANY_NAME"
}

tls_ca_server_cert_key_generate () {
# Arguments
CERTIFICATES_DIR=$1
CA_KEY_FILE=$CERTIFICATES_DIR/$2
CA_CERT_FILE=$CERTIFICATES_DIR/$3
SERVER_KEY_FILE=$CERTIFICATES_DIR/$4
SERVER_CSR_FILE=$CERTIFICATES_DIR/$5
SERVER_CERT_FILE=$CERTIFICATES_DIR/$6
CERTIFICATES_DAYS=$7
#
# CA Key
openssl genrsa -out $CA_KEY_FILE 2048 
# CA Cert
openssl req -new -x509 -key $CA_KEY_FILE -out $CA_CERT_FILE -days $CERTIFICATES_DAYS \
  -subj "/CN=${SYSTEM_IDENTIFIER}.${PROJECT_NAME} /O=$PROJECT_NAME /OU=$COMPANY_NAME"
#
# Server Key
openssl genrsa -out $SERVER_KEY_FILE 2048
# Server Certificate
openssl req -new -key $SERVER_KEY_FILE -out $SERVER_CSR_FILE \
  -subj "/CN=${SYSTEM_IDENTIFIER}.${PROJECT_NAME} /O=$PROJECT_NAME /OU=$COMPANY_NAME"
#
# Sign Cert
openssl x509 -req -in $SERVER_CSR_FILE -CA $CA_CERT_FILE -CAkey $CA_KEY_FILE \
  -CAcreateserial -out $SERVER_CERT_FILE -days $CERTIFICATES_DAYS
}

gcc5_install () {
tar xvf $PROJECT_TARBALLS_DIR/gcc-5*.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv gcc-5* gcc5
# Move to build directory
mkdir $INSTALL_SRC_DIR/gcc5/build
cd $INSTALL_SRC_DIR/gcc5/build
# Configure
../configure --prefix=$PREFIX/local --enable-languages=c,c++ --enable-checking=release --disable-multilib
# Compile - Takes a minimum of 77 mins to complete
make_install_jambulatv -j$SYSTEM_CPU_CORES
}

python3_install () {
# Remove existing python3 rpm based packages if any
rpm -q python3-libs > /dev/null 2>&1 && rpm -e --nodeps python3-libs
rpm -q python3 > /dev/null 2>&1 && rpm -e --nodeps python3
#
# Unpack Python 3 package
tar xvf $PROJECT_TARBALLS_DIR/Python-3*.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v Python-3* python3
# Compile
cd $INSTALL_SRC_DIR/python3 && ./configure --prefix=$PREFIX/local
# make and install in alternate locations
make && make altinstall
#
# Create symlinks to python binaries
ln -s -f $PREFIX/local/bin/python3.6 $PREFIX/local/bin/python
ln -s -f $PREFIX/local/bin/python3.6 $PREFIX/local/bin/python3
# Create symlinks to pip binaries
ln -s -f $PREFIX/local/bin/pip3.6 $PREFIX/local/bin/pip
ln -s -f $PREFIX/local/bin/pip3.6 $PREFIX/local/bin/pip3
}

python3_common_modules_install () {
for PYTHON_PACKAGE in \
pytz==2017.2 \
setuptools_scm \
pytest-runner \
beautifulsoup4 \
pbr \
pycodestyle \
incremental \
vcversioner \
sqlalchemy==1.1.15 \
chardet==3.0.4 \
requests==2.18.4 \
httplib2 \
pyxmpp2 \
sleekxmpp \
jinja2==2.9.6 \
certifi==2017.4.17 \
six==1.10.0
do
# Install Python package
pip3 install --no-index --find-links $PROJECT_PIPS_DIR $PYTHON_PACKAGE
done
}

intel_x11_driver_install () {
# Remove any existing intel drivers
yum -y remove xorg-x11-drv-intel-*
# check version
if [ "$INTEL_X11_DRIVER_VERSION" = "git" ];
then
rsync -avz --delete-after $PROJECT_GITHUB_DIR/xf86-video-intel/ $INSTALL_SRC_DIR/xf86-video-intel/
cd $INSTALL_SRC_DIR/xf86-video-intel
./autogen.sh
else
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/xf86-video-intel-$INTEL_X11_DRIVER_VERSION.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v xf86-video-intel-* xf86-video-intel
fi
#
# Compile all
cd $INSTALL_SRC_DIR/xf86-video-intel
./configure --prefix=$PREFIX --libdir=$LIBDIR --with-xorg-module-dir=$LIBDIR/xorg/modules
make_install_jambulatv
}

nouveau_x11_driver_install () {
# Remove any existing nouveau drivers
yum -y remove xorg-x11-drv-nouveau-*
# check version
if [ "$NOUVEAU_X11_DRIVER_VERSION" = "git" ];
then
rsync -avz --delete-after $PROJECT_GITHUB_DIR/xf86-video-nouveau/ $INSTALL_SRC_DIR/xf86-video-nouveau/
$INSTALL_SRC_DIR/xf86-video-nouveau/autogen.sh
else
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/xf86-video-nouveau-$NOUVEAU_X11_DRIVER_VERSION.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v xf86-video-nouveau-* xf86-video-nouveau
fi
#
# Compile all
cd $INSTALL_SRC_DIR/xf86-video-nouveau
./configure --prefix=$PREFIX --libdir=$LIBDIR \
	--with-xorg-module-dir=$LIBDIR/xorg/modules
make_install_jambulatv
}

mga_x11_driver_install () {
# Remove any existing mga drivers
yum -y remove xorg-x11-drv-mga-*
# check version
if [ "$MGA_X11_DRIVER_VERSION" = "git" ];
then
rsync -avz --delete-after $PROJECT_GITHUB_DIR/xf86-video-mga/ $INSTALL_SRC_DIR/xf86-video-mga/
$INSTALL_SRC_DIR/xf86-video-mga/autogen.sh
else
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/xf86-video-mga-$MGA_X11_DRIVER_VERSION.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v xf86-video-mga-* xf86-video-mga
fi
#
# Compile all
cd $INSTALL_SRC_DIR/xf86-video-mga
./configure --prefix=$PREFIX --libdir=$LIBDIR \
	--disable-exa --enable-xaa --with-xorg-module-dir=$LIBDIR/xorg/modules
make_install_jambulatv
}

openchrome_x11_driver_install () {
# Remove any existing openchrome drivers
yum -y remove xorg-x11-drv-openchrome-*
# check version
if [ "$OPENCHROME_X11_DRIVER_VERSION" = "git" ];
then
rsync -avz --delete-after $PROJECT_GITHUB_DIR/xf86-video-openchrome/ $INSTALL_SRC_DIR/xf86-video-openchrome/
$INSTALL_SRC_DIR/xf86-video-openchrome/autogen.sh
else
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/xf86-video-openchrome-$OPENCHROME_X11_DRIVER_VERSION.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v xf86-video-openchrome-* xf86-video-openchrome
fi
#
# Compile all
cd $INSTALL_SRC_DIR/xf86-video-openchrome
./configure --prefix=$PREFIX --libdir=$LIBDIR \
	--with-xorg-module-dir=$LIBDIR/xorg/modules
make_install_jambulatv
}

rt8192cu_install () {
unzip -d $INSTALL_SRC_DIR/ $PROJECT_ZIPS_DIR/rt8192cu*.zip
cd $INSTALL_SRC_DIR
mv -v rt8192cu* rt8192cu
cd $INSTALL_SRC_DIR/rt8192cu
make_install_jambulatv
}

alsa_lib_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/alsa-lib-$ALSA_LIB_VERSION.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v alsa-lib-* alsa-lib
# Compile
cd $INSTALL_SRC_DIR/alsa-lib && ./configure --prefix=$PREFIX \
--libdir=$LIBDIR
make_install_jambulatv
}

alsa_utils_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/alsa-utils-$ALSA_UTILS_VERSION.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v alsa-utils-* alsa-utils
# Compile
cd $INSTALL_SRC_DIR/alsa-utils && ./configure --prefix=$PREFIX \
--disable-xmlto --libdir=$LIBDIR
make_install_jambulatv
}

oss_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/oss-*src-gpl.tar.bz2 -C $INSTALL_SRC_DIR
# Patch make file to disable soundon

# Make build directory
mkdir $INSTALL_SRC_DIR/oss
# Compile
cd $INSTALL_SRC_DIR/oss && \
$INSTALL_SRC_DIR/oss-*-src-gpl/configure
# Log to build file
make_build_log
# Make
make -s build 
make install
}

alsa_oss_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/alsa-oss-$ALSA_OSS_VERSION.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v alsa-oss-* alsa-oss
# Compile
cd $INSTALL_SRC_DIR/alsa-oss && ./configure --prefix=$PREFIX --libdir=$LIBDIR
make_install_jambulatv
}

ofono_install () {
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/ofono-*.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v ofono-* ofono
# Compile
cd $INSTALL_SRC_DIR/ofono && ./configure --prefix=$PREFIX --libdir=$LIBDIR \
	--sysconfdir=$CONFDIR --localstatedir=$STATEDIR --mandir=$MANDIR1
make_install_jambulatv
}

bluez4_install () {
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/bluez-4*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v bluez-4* bluez
# Compile
cd $INSTALL_SRC_DIR/bluez && ./configure --prefix=$PREFIX --libdir=$LIBDIR \
--localstatedir=$STATEDIR --enable-test
make_install_jambulatv
}

bluez4_configure () {
# Allow bluetoothd to access dbus
echo "<!-- This configuration file specifies the required security policies
     for Bluetooth core daemon to work. -->

<!DOCTYPE busconfig PUBLIC \"-//freedesktop//DTD D-BUS Bus Configuration 1.0//EN\"
 \"http://www.freedesktop.org/standards/dbus/1.0/busconfig.dtd\">
<busconfig>

  <!-- ../system.conf have denied everything, so we just punch some holes -->

  <policy user=\"root\">
    <allow own=\"org.bluez\"/>
    <allow send_destination=\"org.bluez\"/>
    <allow send_interface=\"org.bluez.Agent\"/>
    <allow send_interface=\"org.bluez.HandsfreeAgent\"/>
    <allow send_interface=\"org.bluez.MediaEndpoint\"/>
    <allow send_interface=\"org.bluez.MediaPlayer\"/>
    <allow send_interface=\"org.bluez.Watcher\"/>
    <allow send_interface=\"org.bluez.ThermometerWatcher\"/>
  </policy>

  <policy at_console=\"true\">
    <allow send_destination=\"org.bluez\"/>
  </policy>

  <!-- allow users of lp group (printing subsystem) to 
       communicate with bluetoothd -->
  <policy group=\"lp\">
    <allow send_destination=\"org.bluez\"/>
  </policy>

  <policy context=\"default\">
    <deny send_destination=\"org.bluez\"/>
  </policy>

</busconfig>" > /etc/dbus-1/system.d/bluetooth.conf
#
# Pairing scripts
# Copy simple-agent to binaries directory - used for pairing
cp -v $INSTALL_SRC_DIR/bluez/test/simple-agent $BINARY_PREFIX/bluez_simple-agent
# Patch bluez simple-agent binary - so it does not prompt for PIN code
patch -p1 $BINARY_PREFIX/bluez_simple-agent < $PROJECT_PATCHES_DIR/bluez_simple-agent.patch
#
# Copy jambulatv-bluez-pairing script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-bluez-pairing ] || cp -v $PROJECT_BIN_DIR/jambulatv-bluez-pairing $BINARY_PREFIX/
#
# Enable bluetooth service
systemctl enable bluetooth.service
systemctl start bluetooth.service
}

bluez5_install () {
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/bluez-5*.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v bluez-5* bluez
# Compile
cd $INSTALL_SRC_DIR/bluez && ./configure --prefix=$PREFIX --libdir=$LIBDIR \
--localstatedir=$STATEDIR --enable-android=no
make_install_jambulatv
}

bluez5_configure () {
# Pairing scripts
# Copy simple-agent to binaries directory - used for pairing
cp -v $INSTALL_SRC_DIR/bluez/test/simple-agent $BINARY_PREFIX/bluez_simple-agent
# Patch bluez simple-agent binary - so it does not prompt for PIN code
patch -p1 $BINARY_PREFIX/bluez_simple-agent < $PROJECT_PATCHES_DIR/bluez_simple-agent.patch
#
# Copy jambulatv-bluez-pairing script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-bluez-pairing ] || cp -v $PROJECT_BIN_DIR/jambulatv-bluez-pairing $BINARY_PREFIX/
#
# Enable bluetooth service
systemctl enable bluetooth.service
systemctl start bluetooth.service
}

sbc_install () {
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/sbc-$SBC_VERSION.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v sbc-* sbc
# Compile
cd $INSTALL_SRC_DIR/sbc && ./configure --prefix=$PREFIX --libdir=$LIBDIR
make_install_jambulatv
}

pulseaudio_install () {
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/pulseaudio-*.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v pulseaudio-* pulseaudio
# Compile
cd $INSTALL_SRC_DIR/pulseaudio && ./configure --prefix=$PREFIX \
--libdir=$LIBDIR --sysconfdir=$CONFDIR --localstatedir=$STATEDIR \
--enable-alsa PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig
make_install_jambulatv
# Add pulse groups
for PULSE_GROUP in pulse pulse-access
do
groupadd -r $PULSE_GROUP
done
#
# Add pulse system user - put them in pulse, audio groups
useradd -r -c "PulseAudio System" -d $PULSE_HOME_DIR -g pulse -s /sbin/nologin pulse
# Add pulse user to audio group
usermod -a -G audio pulse
# Add multimedia users to pulse-access group
usermod -a -G pulse-access $MULTIMEDIA_USER
# Cache recently shared libraries 
ldconfig
}

# Install alsa-plugins after pulseaudio install
alsa_plugins_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/alsa-plugins-$ALSA_PLUGINS_VERSION.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v alsa-plugins-* alsa-plugins
# Compile
cd $INSTALL_SRC_DIR/alsa-plugins && ./configure --prefix=/usr \
--disable-avcodec \
--libdir=$LIBDIR PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig
make_install_jambulatv
}

pyalsaaudio_install () {
get_python_version
tar zxvf $PROJECT_TARBALLS_DIR/pyalsaaudio-$PYALSAAUDIO_VERSION.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v pyalsaaudio-* pyalsaaudio
# Compile
cd $INSTALL_SRC_DIR/pyalsaaudio 
python setup.py install --install-lib=$PYTHON_SITEDIR
}

pulseaudio_query () {
# Start pulseaudio temporarily in system mode if not running
ps auxw | grep pulseaudio > /dev/null 2>&1
PULSEAUDIO_STATE=$?
[ "$PULSEAUDIO_STATE" = "0" ] || $BINARY_PREFIX/pulseaudio --system --disallow-module-loading --disallow-exit -D > /dev/null 2>&1
#
# Default sink
PULSE_DEFAULT_SINK=$(su -l $MULTIMEDIA_USER -c "pactl list sinks short" | awk {'print $2'} | head -1)
PULSE_DEFAULT_SOURCE=$(su -l $MULTIMEDIA_USER -c "pactl list sources short" | grep monitor | head -1 | awk {'print $2'})
# V4L TV Card Loopback device
TV_AUDIO_SOURCE=$(su -l $MULTIMEDIA_USER -c "pactl list" | grep -B1 'SAA713' | grep alsa_input | cut -d : -f2 | sed 's/ //g')

# Notify of missing sinks or sources
if [[ "x$PULSE_DEFAULT_SINK" = "x" ]] || [[ "x$PULSE_DEFAULT_SOURCE" = "x" ]];
then
# Force error to be displayed in log
su -l $MULTIMEDIA_USER -c "pactl list sinks short" && \
	su -l $MULTIMEDIA_USER -c "pactl list sources short"
# Add error to post install notes
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
Pulseaudio Sinks/Sources not configured
=======================================
% Error: Please note that no pulseaudio sinks/sources were configured
         You will need to edit the following files with the right
	 devices:

  $PULSE_DEFAULT_CONFIG
 
% TIP: Ensure pulseaudio is running first and then execute the following commands:

  pactl list sinks short; pactl list sources short  

#
EOF
fi
}

pulseaudio_configure () {
# Create user root pulse config directory
[ -d $PULSE_ROOT_CONFIG_DIR ] || mkdir -p $PULSE_ROOT_CONFIG_DIR
# Allow root user to access pulseaudio server started by Multimedia User
# Don't put in /etc/pulse/client.conf!!!
echo "# Allow root user to access pulseaudio server started by $MULTIMEDIA_USER
default-server = 127.0.0.1" > $PULSE_ROOT_CONFIG_DIR/client.conf
#
# Create pulse dir if it does not exist
[ -d $PULSE_HOME_DIR ] || mkdir -p $PULSE_HOME_DIR
# Change ownership to pulse user
chown -R pulse $PULSE_HOME_DIR
# Backup system and default pulse files
cp -v $PULSE_DEFAULT_CONFIG $PULSE_DEFAULT_CONFIG.orig
# Add multimedia user to video,audio and pulse groups
usermod -a -G video,audio,pulse,pulse-access $MULTIMEDIA_USER

# Get needed pulseaudio variables
pulseaudio_query

# Create customized default.pa file
# **********************************
cat > $PULSE_DEFAULT_CONFIG << EOF
#!$BINARY_PREFIX/pulseaudio -nF

### Automatically restore the volume of streams and devices
load-module module-device-restore
load-module module-stream-restore
load-module module-card-restore

### Automatically augment property information from .desktop files
### stored in $DATAROOTDIR/application
load-module module-augment-properties

### Should be after module-*-restore but before module-*-detect
load-module module-switch-on-port-available

### Automatically load driver modules depending on the hardware available
.ifexists module-udev-detect.so
load-module module-udev-detect
.endif

### Automatically load driver modules for Bluetooth hardware
.ifexists module-bluetooth-policy.so
load-module module-bluetooth-policy
.endif

.ifexists module-bluetooth-discover.so
load-module module-bluetooth-discover
.endif

### Load several protocols
.ifexists module-esound-protocol-unix.so
load-module module-esound-protocol-unix
.endif
load-module module-native-protocol-unix

### Network access 
load-module module-zeroconf-publish
load-module module-zeroconf-discover

### Automatically restore the default sink/source when changed by the user
### during runtime
### NOTE: This should be loaded as early as possible so that subsequent modules
### that look up the default sink/source get the right value
load-module module-default-device-restore

### Automatically move streams to the default sink if the sink they are
### connected to dies, similar for sources
load-module module-rescue-streams

### Make sure we always have a sink around, even if it is a null sink.
load-module module-always-sink

### Honour intended role device property
load-module module-intended-roles

### Automatically suspend sinks/sources that become idle for too long
load-module module-suspend-on-idle

### If autoexit on idle is enabled we want to make sure we only quit
### when no local session needs us anymore.
.ifexists module-console-kit.so
load-module module-console-kit
.endif
.ifexists module-systemd-login.so
load-module module-systemd-login
.endif

### Enable positioned event sounds
load-module module-position-event-sounds

### Cork music/video streams when a phone stream is active
load-module module-role-cork

### Modules to allow autoloading of filters (such as echo cancellation)
### on demand. module-filter-heuristics tries to determine what filters
### make sense, and module-filter-apply does the heavy-lifting of
### loading modules and rerouting streams.
load-module module-filter-heuristics
load-module module-filter-apply

### DBUS
.ifexists module-dbus-protocol.so
load-module module-dbus-protocol
.endif


### Make some devices default
set-default-sink $PULSE_DEFAULT_SINK
set-default-source $PULSE_DEFAULT_SOURCE


### Jambula Labs
### Allow access to this pulseaudio server i.e. Network audio server
### -----------------------------------------------------------------
load-module module-esound-protocol-tcp auth-anonymous=1
load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1;192.168.0.0/16

# Where INPUT will be played at i.e. Music Source
#-------------------------------------------------
# Point to Where Speakers are Located
#load-module module-alsa-sink device=hw:1,0 sink_name=frontend
#load-module module-tunnel-sink sink_name=backend server=$NETWORK_IP_ADDRESS
#load-module module-combine-sink sink_name=all_speakers slaves=frontend,backend
#load-module module-combine sink_name=all_speakers slaves=$PULSE_DEFAULT_SINK,backend
#set-default-sink all_speakers
EOF
#
# Add asoundrc file
cat > $CONFDIR/asound.conf <<EOF
pcm.!default {
    type pulse
    hint.description "$PROJECT_NAME PulseAudio Device"
}   
ctl.!default {
    type pulse
}

pcm.pulse_monitor {
  type pulse
  device $PULSE_DEFAULT_SOURCE
}
ctl.pulse_monitor {
  type pulse
  device $PULSE_DEFAULT_SOURCE
}
EOF
}

portaudio_install () {
# Remove existing rpm package if any
rpm -q portaudio > /dev/null 2>&1 && rpm -e --nodeps portaudio
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/pa_$PORTAUDIO_VERSION.tgz -C $INSTALL_SRC_DIR
# Compile
cd $INSTALL_SRC_DIR/portaudio
./configure --prefix=$PREFIX --libdir=$LIBDIR
make_install_jambulatv
ldconfig
}

oss_devices_configure () {
# Add OSS devices entries i.e. /dev/dspX /dev/mixerX
cp -v $PROJECT_CONFIGS_DIR/sndcards.conf.sample $MODPROBE_DIR/sndcards.conf
}

SDL_install () {
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/SDL*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v SDL* SDL
# Compile
cd $INSTALL_SRC_DIR/SDL
./configure --prefix=$PREFIX --sysconfdir=$CONFDIR --libdir=$LIBDIR --localstatedir=$STATEDIR 
make_install_jambulatv
}

OpenCV_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/OpenCV-*.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v OpenCV-* OpenCV
# Compile
cd $INSTALL_SRC_DIR/OpenCV 
cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_CXX_COMPILER=$BINARY_PREFIX/g++ -DCMAKE_C_COMPILER=$BINARY_PREFIX/gcc -DCMAKE_INSTALL_PREFIX=$PREFIX ../OpenCV
make_install_jambulatv
# Fix the following using CMake --libdir type option?
#---------------------------------------------------
# Create links to lib directory
for LIB_FILE in `ls $PREFIX/lib/libopencv*.so`;
do
ln -s $LIB_FILE $LIBDIR/`basename $LIB_FILE`
done
# Move opencv.pc to proper libdir
mv -v $PREFIX/lib/pkgconfig/opencv.pc $LIBDIR/pkgconfig/
}

openal_soft_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/openal-soft-*.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v openal-soft-* openal-soft
# Compile
cd $INSTALL_SRC_DIR/openal-soft 
# Log to build file
cmake_build_log
# cMake
cmake -DCMAKE_INSTALL_PREFIX=$PREFIX -DLIB_SUFFIX=64 
make_install_jambulatv
}

vsxu_install () {
rsync -avz $PROJECT_GITHUB_DIR/vsxu/ $INSTALL_SRC_DIR/vsxu/
ln -s $INCDIR/GL/glfw3.h $INCDIR/GL/glfw.h
# configure
cd $INSTALL_SRC_DIR/vsxu
mkdir BUILD
cd BUILD
# Log to build file
cmake_build_log
# cMake
cmake -DCMAKE_CXX_COMPILER=$BINARY_PREFIX/g++ -DCMAKE_C_COMPILER=$BINARY_PREFIX/gcc -DCMAKE_INSTALL_PREFIX=$PREFIX -DGLFW_INCLUDE_PATH=$INCDIR/GL ../../vsxu
make_install_jambulatv 
}

ffmpeg_deps_install () {
# vo-aacenc
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/vo-aacenc-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v vo-aacenc-* vo-aacenc
# Compile
cd $INSTALL_SRC_DIR/vo-aacenc && ./configure --prefix=$PREFIX --sysconfdir=$CONFDIR --libdir=$LIBDIR --localstatedir=$STATEDIR 
make_install_jambulatv
#
# vo-amrwbenc
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/vo-amrwbenc-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v vo-amrwbenc-* vo-amrwbenc
# Compile
cd $INSTALL_SRC_DIR/vo-amrwbenc && ./configure --prefix=$PREFIX --sysconfdir=$CONFDIR --libdir=$LIBDIR --localstatedir=$STATEDIR 
make_install_jambulatv
#
# fdk-aac
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/fdk-aac-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v fdk-aac-* fdk-aac
# Compile
cd $INSTALL_SRC_DIR/fdk-aac && ./configure --prefix=$PREFIX --sysconfdir=$CONFDIR --libdir=$LIBDIR --localstatedir=$STATEDIR 
make_install_jambulatv
#
# libaacplus
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/libaacplus-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v libaacplus-* libaacplus
# Compile
cd $INSTALL_SRC_DIR/libaacplus
./autogen.sh
./configure --prefix=$PREFIX --sysconfdir=$CONFDIR --libdir=$LIBDIR --localstatedir=$STATEDIR 
# Add 3gpp sources
cp -v $PROJECT_ZIPS_DIR/26410-800.zip src/
make_install_jambulatv
#
# gpac
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/gpac-*.tar.gz -C $INSTALL_SRC_DIR
# Compile
cd $INSTALL_SRC_DIR/gpac && ./configure --prefix=$PREFIX --sysconfdir=$CONFDIR --libdir=$LIBDIR --localstatedir=$STATEDIR 
make_install_jambulatv
#
# libvdpau
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/libvdpau-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v libvdpau-* libvdpau
# Compile
cd $INSTALL_SRC_DIR/libvdpau
./autogen.sh
./configure --prefix=$PREFIX --sysconfdir=$CONFDIR --libdir=$LIBDIR --localstatedir=$STATEDIR 
make_install_jambulatv
#
# libvdpau-va-gl
# Unpack
rsync -av --delete-after $PROJECT_GITHUB_DIR/libvdpau-va-gl/ $INSTALL_SRC_DIR/libvdpau-va-gl/
# configure
cd $INSTALL_SRC_DIR/libvdpau-va-gl
# Create cmake build directory
mkdir build
cd build
# Log to build file
cmake_build_log
# cMake
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX \
	-DCMAKE_INSTALL_LIBDIR=$LIBDIR ..
make install
#
#Add VDPAU_DRIVER=va_gl to your environment
#
# Add symbolic link to libdir
[ -e $LIBDIR/vdpau/libvdpau_va_gl.so ] || \
	ln -s $PREFIX/lib/vdpau/libvdpau_va_gl.so.1 $LIBDIR/vdpau/libvdpau_va_gl.so
#
# nut
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/nut-*.tar.gz -C $INSTALL_SRC_DIR
# Compile
cd $INSTALL_SRC_DIR/nut
# Log to build file
make_build_log
# Make
make PREFIX=/usr CFLAGS="-fPIC"
make PREFIX=/usr CFLAGS="-fPIC" install
#
# xavs
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/xavs-*.tar.gz -C $INSTALL_SRC_DIR
# Compile
cd $INSTALL_SRC_DIR/xavs
./configure --prefix=$PREFIX --libdir=$LIBDIR --enable-pic
make_install_jambulatv
#
# fluidsynth
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/fluidsynth-*.tar.gz -C $INSTALL_SRC_DIR
# Compile
cd $INSTALL_SRC_DIR && mv -v fluidsynth-* fluidsynth
cd $INSTALL_SRC_DIR/fluidsynth && ./configure --prefix=$PREFIX --sysconfdir=$CONFDIR --libdir=$LIBDIR --localstatedir=$STATEDIR 
make_install_jambulatv
#
# libgoom2-devel
# Unpack in temporary directory
tar jxvf $PROJECT_TARBALLS_DIR/libgoom2-devel-*.tar.bz2 -C /tmp
# Move files to proper destinations
rsync -avz $TMPDIR/usr/include/ $INCDIR/
rsync -avz $TMPDIR/usr/lib/ $LIBDIR/
# Remove temp files
rm -rf $TMPDIR/usr
#
# libffms2-devel
# Unpack in temporary directory
tar jxvf $PROJECT_TARBALLS_DIR/libffms2-devel-*.tar.bz2 -C $TMPDIR
# Move files to proper destinations
rsync -avz $TMPDIR/usr/include/ $INCDIR/
rsync -avz $TMPDIR/usr/lib/ $LIBDIR/
# Remove temp files
rm -rf $TMPDIR/usr
}

live555_install () {
tar zxvf $PROJECT_TARBALLS_DIR/live.*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR/live
# Change install prefix
for MAKEFILE_PREF in `grep -rl 'PREFIX = /usr/local'`
do
sed -i "s:PREFIX = /usr/local:PREFIX = $PREFIX:g" $MAKEFILE_PREF
done
# Change lib path
for MAKEFILE_LIB in `grep -rl '$(PREFIX)/lib'`
do
sed -i "s:\$(PREFIX)/lib:$LIBDIR:g" $MAKEFILE_LIB
done
# Fix VLC Error
patch -p1 $INSTALL_SRC_DIR/live/config.linux < $PROJECT_PATCHES_DIR/live555.config.linux.patch
# Compile
./genMakefiles linux
make_install_jambulatv
}

libdvdcss_install () {
# Remove old libdvdcss
yum -y remove libdvdcss-*
# Unpack
rsync -av --delete-after $PROJECT_GITHUB_DIR/libdvdcss/ $INSTALL_SRC_DIR/libdvdcss/
# configure
cd $INSTALL_SRC_DIR/libdvdcss
autoreconf -i 
./configure --prefix=$PREFIX --libdir=$LIBDIR
make_install_jambulatv
}

libdvbpsi_install () {
# Remove old libdvbpsi
yum -y remove libdvbpsi-*
# Change to Github sources
cd $PROJECT_GITHUB_DIR/libdvbpsi
# Unpack desired git branch/tag
git archive --format tar.gz --prefix=libdvbpsi/ $LIBDVBPSI_TAG | (cd $INSTALL_SRC_DIR/ && tar zxvf -)
# configure
cd $INSTALL_SRC_DIR/libdvbpsi 
./bootstrap
./configure --prefix=$PREFIX --libdir=$LIBDIR --enable-debug
make_install_jambulatv
}

libdvbcsa_install () {
# Unpack 
rsync -av --delete-after $PROJECT_GITHUB_DIR/libdvbcsa/ $INSTALL_SRC_DIR/libdvbcsa/
# configure
cd $INSTALL_SRC_DIR/libdvbcsa 
./bootstrap
./configure --prefix=$PREFIX --libdir=$LIBDIR --enable-debug
make_install_jambulatv
}

x264_install () {
# Remove old x264
yum -y remove x264-*
# Unpack
rsync -avz $PROJECT_GITHUB_DIR/x264/ $INSTALL_SRC_DIR/x264/
# Configure
cd $INSTALL_SRC_DIR/x264
./configure --prefix=$PREFIX --enable-shared --enable-pic --system-libx264 --enable-debug --libdir=$LIBDIR 
make_install_jambulatv
}

ffmpeg_install () {
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/ffmpeg-*.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v ffmpeg-* ffmpeg
cd $INSTALL_SRC_DIR/ffmpeg 
# check for libx264
which x264 > /dev/null 2>&1
LIBX264_EXISTS=$?
# Compile 
if [ "$LIBX264_EXISTS" = "0" ];
then
# compile with x264 libraries
./configure --prefix=$PREFIX --libdir=$LIBDIR --shlibdir=$LIBDIR --disable-podpages --disable-static --enable-shared --enable-gpl --enable-nonfree --enable-runtime-cpudetect --enable-pthreads --enable-vdpau --enable-gnutls --enable-libx264 

else
# compile withOUT x264 libraries
./configure --prefix=$PREFIX --libdir=$LIBDIR --shlibdir=$LIBDIR --disable-podpages --disable-static --enable-shared --enable-gpl --enable-nonfree --enable-runtime-cpudetect --enable-pthreads --enable-vdpau --enable-gnutls
fi
#
make_install_jambulatv -j$SYSTEM_CPU_CORES
# Clean up - saves upto 300MB
make clean
}

vlc_unpack_git () {
# Unpack
rsync -avz $PROJECT_GITHUB_DIR/vlc/ $INSTALL_SRC_DIR/vlc/
# Patch configure_ac - make AX_CXX_COMPILE_STDCXX_11 optional
patch -p1 $INSTALL_SRC_DIR/vlc/configure.ac < $PROJECT_PATCHES_DIR/vlc_confiure_ac.patch
}

vlc_unpack_tarball () {
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/vlc-*.tar.xz -C $INSTALL_SRC_DIR
mv -v $INSTALL_SRC_DIR/vlc-* $INSTALL_SRC_DIR/vlc
}

vlc_install () {
# Unpack sources depending on type of sources
case $VLC_SOURCES_TYPE in
git)
# Unpack vlc
vlc_unpack_git
;;
tarball)
# Unpack vlc
vlc_unpack_tarball
;;
esac
#
# Change to install directory
cd $INSTALL_SRC_DIR/vlc
# Compile
[[ -e bootstrap ]] && ./bootstrap
# Configure
./configure --prefix=$PREFIX --libdir=$LIBDIR --enable-debug --enable-run-as-root --enable-realrtsp --enable-wma-fixed --enable-shine --enable-omxil --enable-rpi-omxil --enable-merge-ffmpeg --enable-fdkaac --enable-tremor --enable-aa --enable-opensles --enable-lirc --disable-ncurses --disable-skins2 --enable-shine=no --enable-goom=no
#
make_install_jambulatv -j$SYSTEM_CPU_CORES
#
# Cache recently shared libraries 
ldconfig
# Clean up - saves upto 100MB
make clean
}

xine_lib_install () {
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/xine-lib-*.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v xine-lib-* xine-lib
# Compile
cd $INSTALL_SRC_DIR/xine-lib && ./configure --prefix=$PREFIX \
PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig --libdir=$LIBDIR \
--with-real-codecs-path=$LIBDIR/codecs \
--with-w32-path=$LIBDIR/codecs \
--with-pic= \
--enable-dvb \
--enable-v4l2 \
--enable-vcd \
--enable-bluray \
--enable-a52dec \
--enable-asf \
--enable-faad \
--with-pulseaudio \
--with-alsa \
--disable-vcd \
--disable-dxr3 \
--disable-vaapi
make_install_jambulatv
}

xine_ui_install () {
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/xine-ui-*.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v xine-ui-* xine-ui
# Compile
cd $INSTALL_SRC_DIR/xine-ui && ./configure --prefix=$PREFIX PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig --libdir=$LIBDIR
make_install_jambulatv
}

mplayer_install () {
# Create MPlayer codecs directory
[ -d $LIBDIR/codecs ] || mkdir -p $LIBDIR/codecs
# Add Win32 Codecs
tar -jxvf $PROJECT_TARBALLS_DIR/mplayer-codecs-all-*.tar.bz2 --strip-components 1 -C $LIBDIR/codecs/
# Add RealPlayer Codecs
cp -rv $PROJECT_CONTRIB_DIR/codecs/RealPlayer/* $LIBDIR/codecs/
# Unpack mplayer
tar jxvf $PROJECT_TARBALLS_DIR/mplayer-checkout-snapshot.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v mplayer* mplayer
# Add ffmpeg latest sources
tar jxvf $PROJECT_TARBALLS_DIR/ffmpeg-*.tar.bz2 -C $INSTALL_SRC_DIR/mplayer
# Patch that adds Uganda frequency table i.e. chanlist
patch -p1 $INSTALL_SRC_DIR/mplayer/stream/frequencies.c < $PROJECT_PATCHES_DIR/mplayer_frequency_vhf.patch
# Patch that fixes a problem when playing multiple streams 
# (separate audio and video) over RTSP with user-specified -rtsp_port #
patch -p1 $INSTALL_SRC_DIR/mplayer/libmpdemux/demux_rtp.cpp < $PROJECT_PATCHES_DIR/mplayer_demux_rtp.patch
# Compile
cd $INSTALL_SRC_DIR/mplayer
# Rename ffmpeg dir
mv -v ffmpeg* ffmpeg
# Compile
./configure --prefix=$PREFIX --confdir=$CONFDIR --libdir=$LIBDIR --enable-xv \
  --enable-sdl --enable-radio --enable-radio-capture --enable-radio-v4l2 \
  --enable-tv-v4l2 --enable-pvr --enable-dvb --enable-pulse --enable-menu
make_install_jambulatv
# Clean up - saves upto 90MB
make clean
}

mpv_install () {
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/mpv-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v mpv-* mpv
# Add ffmpeg latest sources
tar jxvf $PROJECT_TARBALLS_DIR/ffmpeg-*.tar.bz2 -C $INSTALL_SRC_DIR/mpv
cd $INSTALL_SRC_DIR/mpv
# Rename ffmpeg dir
mv -v ffmpeg* ffmpeg
# Compile
./old-configure --prefix=$PREFIX
make_install_jambulatv
}

sox_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/sox-*.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v sox-* sox
# Compile
cd $INSTALL_SRC_DIR/sox && ./configure --prefix=/usr \
--libdir=$LIBDIR 
make_install_jambulatv
}

tvtime_install () {
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/tvtime-$TVTIME_VERSION.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v tvtime-* tvtime
# Compile
cd $INSTALL_SRC_DIR/tvtime && ./configure --disable-dependency-tracking --disable-rpath --prefix=$PREFIX --sysconfdir=$CONFDIR --libdir=$LIBDIR --localstatedir=$STATEDIR 
make_install_jambulatv
}

tvheadend_install () {
# Unpack
rsync -avz $PROJECT_GITHUB_DIR/tvheadend/ $INSTALL_SRC_DIR/tvheadend/
# Change to tvheadend directory
cd $INSTALL_SRC_DIR/tvheadend
#
# Patch: Change default DVR profile from null to our name i.e. JambulaTV
cat $PROJECT_PATCHES_DIR/tvheadend.dvr_config.patch \
	| sed -e "s:DVR_PROFILE_NAME:$PROJECT_NAME:g" > $TMPDIR/tvheadend.dvr_config.patch
patch -p1 $INSTALL_SRC_DIR/tvheadend/src/dvr/dvr_config.c < $TMPDIR/tvheadend.dvr_config.patch
#
# Patch: Increase timeout when playing IPTV muxes for slow Internet connections
patch -p1 $INSTALL_SRC_DIR/tvheadend/src/webui/webui.c < $PROJECT_PATCHES_DIR/tvheadend.webui.patch
#
# configure tvheadend
./configure --prefix=$PREFIX --libdir=$LIBDIR --mandir=$MANDIR1 --disable-ffmpeg_static \
	--disable-libav --disable-dvbscan --disable-hdhomerun_static --enable-imagecache
make_install_jambulatv

# Configure Systemd service file
cat $PROJECT_INIT_SCRIPTS_DIR/tvheadend.service | \
	sed "s:TVHEADEND_LOG_FILE:$TVHEADEND_LOG_FILE:g" \
		> $SYSTEMD_UNITS_DIR_USER/tvheadend.service
# Enable tvheadend
systemctl enable tvheadend.service

# Copy logrotate file to reduce size of tvheadend log
cat $PROJECT_CONFIGS_DIR/logrotate/tvheadend | \
	sed "s:MY_TVHEADEND_LOG_FILE:$TVHEADEND_LOG_FILE:g" \
		> $LOGROTATE_CONF_DIR/tvheadend
}

dvb_tvheadend_adapter_add () {
# NOTE: Run after DVB-T2 network has been configured

# Adapter UUID
TVHEADEND_ADAPTER_UUID=$(uuidgen -t | sed 's:-::g')

# Source DVBT settings file
. $PROJECT_DVBT_SETTINGS_FILE
# Configure DVBT-2 adapter settings
TVHEADEND_ADAPTERS_CONFIG_FILE=$(grep -rli "$DVBT_TUNER_NAME" $TVHEADEND_ADAPTERS_CONFIG_DIR | xargs grep -l adapter${DVBT_TUNER_NO})
TVHEADEND_DVBT_NETWORK_UUID=$($CURL_CMD $CURL_OPTS $TVHEADEND_API_URL/mpegts/network/grid?limit=100000 | jq -r '.entries[] | select(.networkname=="'"$DVBT_NETWORK_NAME"'") |.uuid' | uniq)
#
cat > $TVHEADEND_ADAPTERS_CONFIG_FILE << EOF
{
	"rootpath": "/dev/dvb/adapter${DVBT_TUNER_NO}",
	"frontends": {		
		"DVB-T #0": {
			"lna": false,
			"pids_max": 32,
			"powersave": false,
			"tune_repeats": 0,
			"skip_bytes": 0,
			"ibuf_size": 188000,
			"status_period": 1000,
			"old_status": false,
			"enabled": true,
			"priority": 0,
			"spriority": 0,
			"displayname": "$DVBT_TUNER_NAME : DVB-T #0",
			"ota_epg": true,
			"initscan": true,
			"idlescan": true,
			"free_weight": 0,
			"networks": [
				"$TVHEADEND_DVBT_NETWORK_UUID"
			],
			"linked": "",
			"type": "DVB-T",
			"uuid": "$TVHEADEND_ADAPTER_UUID"
		}
	}
}
EOF

# Restart TVHeadend
sudo systemctl restart tvheadend.service
}

dvb_tvheadend_network_add () {
# Source DVBT settings file
. $PROJECT_DVBT_SETTINGS_FILE

# Count number of existing DVB-T network
DVBT_NETWORK_EXISTS_COUNT=$($CURL_CMD $CURL_OPTS $TVHEADEND_API_URL/mpegts/network/grid?limit=100000 | jq -r '.entries[] | select(.networkname=="'"$DVBT_NETWORK_NAME"'") |.networkname' | wc -l)

# If no DVB-T network already exits (i.e. count equal 0 or blank), create it
if [[ "$DVBT_NETWORK_EXISTS_COUNT" = "0" || "x$DVBT_NETWORK_EXISTS_COUNT" = "x" ]];
then

# Remove previous temp script file for creating DVB-T network
[[ -e $TVHEADEND_DVBT_CREATE_NETWORK_TEMP_FILE ]] && sudo rm -f $TVHEADEND_DVBT_CREATE_NETWORK_TEMP_FILE 
#
# Add DVB-T network creation command to temp file
cat >> $TVHEADEND_DVBT_CREATE_NETWORK_TEMP_FILE <<EOF
# $DVBT_NETWORK_NAME
# ----------------------------
# Add DVB-T network to backend
$CURL_CMD $CURL_OPTS -d "class=dvb_network_dvbt" -d "\$(printf $(echo -n $(cat <<EOT
conf='{
	"networkname": "$DVBT_NETWORK_NAME",
	"pnetworkname": "$DVBT_PNETWORK_NAME",
	"nid": 0,
	"autodiscovery": 0,
        "bouquet": false,
	"skipinitscan": true,
	"idlescan": false,
	"sid_chnum": false,
	"ignore_chnum": true,
	"satip_source": 0,
	"localtime": 180,
	"wizard": false,
	"class": "dvb_network_dvbt"
}'
EOT
)
))" $TVHEADEND_API_URL/mpegts/network/create > /dev/null 2>&1
#
# Notify - DVB-T network added
logger -s -t $(basename $0) "Added DVB-T network [$DVBT_NETWORK_NAME]"

EOF
#
# Create DVB-T network script
if [[ -e $TVHEADEND_DVBT_CREATE_NETWORK_TEMP_FILE ]];
then
# Prepare create DVB-T network script
sed -i '1i #!/bin/sh' "$TVHEADEND_DVBT_CREATE_NETWORK_TEMP_FILE"
chmod 755 $TVHEADEND_DVBT_CREATE_NETWORK_TEMP_FILE
#
# Run script to create DVB-T network
$TVHEADEND_DVBT_CREATE_NETWORK_TEMP_FILE
#
# Pause for a bit to allow DVB-T network to be added properly
sleep 3
# Remove temp script file
rm -f $TVHEADEND_DVBT_CREATE_NETWORK_TEMP_FILE
fi

# Query and set DVB-T network UUID
TVHEADEND_DVBT_NETWORK_UUID=$($CURL_CMD $CURL_OPTS $TVHEADEND_API_URL/mpegts/network/grid?limit=100000 | jq -r '.entries[] | select(.networkname=="'"$DVBT_NETWORK_NAME"'") |.uuid' | uniq)

else
# Notify of already existing DVB-T network for specified TV market
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$DVBT_NETWORK_EXISTS_MESSAGE" text
# Print notification using OSD tool
print_notification "$DVBT_NETWORK_EXISTS_MESSAGE" osd
fi
}

dvb_tvheadend_multiplex_add () {
# Source DVBT settings file
. $PROJECT_DVBT_SETTINGS_FILE

# Query and set DVB-T network UUID
TVHEADEND_DVBT_NETWORK_UUID=$($CURL_CMD $CURL_OPTS $TVHEADEND_API_URL/mpegts/network/grid?limit=100000 | jq -r '.entries[] | select(.networkname=="'"$DVBT_NETWORK_NAME"'") |.uuid' | uniq)

# Set location of pre-defined DVB-T multiplexes
MUXES_DIR_4_TV_MARKET=$(find $PROJECT_CONFIGS_DIR/tvheadend/muxes -maxdepth 1 -iname "$TV_MARKET")

# Remove previous temp script file for creating DVB-T multiplex
[[ -e $TVHEADEND_DVBT_CREATE_MUX_TEMP_FILE ]] && sudo rm -f $TVHEADEND_DVBT_CREATE_MUX_TEMP_FILE 

# Cycle through available multiplexes for this TV market
for MUX in ${DVBT_MULTIPLEXES[$@]}
do

# Break off if config file for multiplex is not found
[[ -e "$MUXES_DIR_4_TV_MARKET/$MUX" ]] || break

# Convert MUX frequency to MHz
MUX_MHZ=$(echo "$MUX/1000000" | bc)MHz

# Count number of this DVB-T multiplex that exists
DVBT_MUX_EXISTS_COUNT=$($CURL_CMD $CURL_OPTS $TVHEADEND_API_URL/mpegts/mux/grid?limit=100000 | jq -r '.entries[] | select (.name=="'$MUX_MHZ'") |.name' | wc -l)

# Test for existence of DVB-T multiplex and ensure no duplicates are created
[[ "$DVBT_MUX_EXISTS_COUNT" = "0" ]] || break

# Add DVB-T multiplex creation command to temp file
cat >> $TVHEADEND_DVBT_CREATE_MUX_TEMP_FILE <<EOF
# FREQUENCY: [$MUX_MHZ]
# ----------------------------
# Add DVB-T mux to backend
$CURL_CMD $CURL_OPTS -d "uuid=$TVHEADEND_DVBT_NETWORK_UUID" -d "\$(printf $(echo -n $(cat <<EOT
conf='
$(cat $MUXES_DIR_4_TV_MARKET/$MUX)
'
EOT
)
))" $TVHEADEND_API_URL/mpegts/network/mux_create > /dev/null 2>&1
#
# Notify - DVB-T mux added
logger -s -t $(basename $0) "Added DVB-T multiplex [$MUX_MHZ]"

EOF
done

# Create DVB-T multiplex script
if [[ -e $TVHEADEND_DVBT_CREATE_MUX_TEMP_FILE ]];
then
# Prepare create DVB-T multiplex script
sed -i '1i #!/bin/sh' "$TVHEADEND_DVBT_CREATE_MUX_TEMP_FILE"
chmod 755 $TVHEADEND_DVBT_CREATE_MUX_TEMP_FILE

# Run script to create DVB-T multiplex
$TVHEADEND_DVBT_CREATE_MUX_TEMP_FILE

# Pause for a bit to allow DVB-T multiplex to be added properly
sleep 3

# Remove temp script file
rm -f $TVHEADEND_DVBT_CREATE_MUX_TEMP_FILE
fi
}

tvheadend_dvbt_configure () {
# NOTE: This function will be used by other tools e.g. jambulatv-initial-setup
#       This means functions/commands should be executable by normal user like jambula
#
# Source DVBT settings file
. $PROJECT_DVBT_SETTINGS_FILE

# DVB-T multiplexes for selected TV market must exist before proceeding, otherwise fail
if [[ "x$DVBT_MULTIPLEXES" = "x" ]];
then
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$DVBT_MULTIPLEX_NOT_FOUND_MESSAGE" text
# Print notification using OSD tool
print_notification "$DVBT_MULTIPLEX_NOT_FOUND_MESSAGE" osd
exit 0
fi

# Start tvheadend if adapter has been inserted
if [ ! -d /dev/dvb/adapter${DVBT_TUNER_NO} ];
then
beep
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$TVHEADEND_NO_TUNER_FOUND_MESSAGE" text
# Print notification using OSD tool
print_notification "$TVHEADEND_NO_TUNER_FOUND_MESSAGE" osd

read
fi
sleep 9
sudo systemctl restart tvheadend.service
#
# Wait until adapters directory has been populated
while true
do
  if [ "$(ls -A "$TVHEADEND_ADAPTERS_CONFIG_DIR")" ]; 
    then
    break
  else
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$TVHEADEND_WAITING_4_SERVER_MESSAGE" text
# Print notification using OSD tool
print_notification "$TVHEADEND_WAITING_4_SERVER_MESSAGE" osd

    sleep 7
  fi

done

# -----------------
# Configure DVB-T 
# -----------------

# Add DVB-T network
dvb_tvheadend_network_add

# Add DVB-T adapter
dvb_tvheadend_adapter_add 

# Add DVB-T muxes
dvb_tvheadend_multiplex_add 
}

dvb_icons_add () {
# Source DVBT settings file
. $PROJECT_DVBT_SETTINGS_FILE
#
# Create picons directory if it does not exist
[ -d $PROJECT_SYSTEM_ICONS_DIR ] || mkdir -p $PROJECT_SYSTEM_ICONS_DIR
#
# Copy DVB icons to JambulaTV share directory if logos plus requested TV market exist
if [[ -e $PROJECT_CONTRIB_DIR/tv/picons/$TV_MARKET && "x$DVBT_MULTIPLEXES" != "x" ]];
then
# Set chicon dir used in chiconpath
TVHEADEND_CHICON_DIR=$PROJECT_SYSTEM_ICONS_DIR/$TV_MARKET
# Add DVB picons
rsync -avq $PROJECT_CONTRIB_DIR/tv/picons/$TV_MARKET/ $TVHEADEND_CHICON_DIR/

# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$DVBT_PICONS_ADDED_MESSAGE" text
# Print notification using OSD tool
print_notification "$DVBT_PICONS_ADDED_MESSAGE" osd

# Give permissons to TV Icons
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $TVHEADEND_CHICON_DIR

else
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$DVBT_PICONS_NOT_FOUND_MESSAGE" text
# Print notification using OSD tool
print_notification "$DVBT_PICONS_NOT_FOUND_MESSAGE" osd
fi
}

tvheadend_create_dvr_profile_mkv () {
# Make sure tvheadend is running before extracting recording profile
sudo systemctl -q is-active tvheadend.service || sudo systemctl start tvheadend.service
TVHEADEND_PROFILE_PASS=$($CURL_CMD $CURL_OPTS $TVHEADEND_API_URL/profile/list | jq -r '.entries[0].key')
TVHEADEND_PROFILE_MKV=$($CURL_CMD $CURL_OPTS $TVHEADEND_API_URL/profile/list | jq -r '.entries[1].key')

# Remove created default passthrough DVR entry, only one needs to exist for recordings
rm -f $TVHEADEND_DVR_CONFIG_DIR/*
#
# Remove previous temp script file for creating DVR profile
[[ -e $TVHEADEND_DVR_CREATE_PROFILE_TEMP_FILE ]] && sudo rm -f $TVHEADEND_DVR_CREATE_PROFILE_TEMP_FILE 
#
# Add DVR profile creation command to temp file
cat >> $TVHEADEND_DVR_CREATE_PROFILE_TEMP_FILE <<EOF
# Add default DVR profile to backend
$CURL_CMD $CURL_OPTS -d "name=$PROJECT_NAME-Matroska" -d "\$(echo -n $(echo -n $(cat <<EOT
conf='{
	"warm-time": 30,
	"postremove": "$TVHEADEND_PROCESSOR_TOOL remove-recording \"'\\\\u0025'f\" \"'\\\\u0025'b\" \"'\\\\u0025't\" \"'\\\\u0025'c\"",
	"postproc": "$TVHEADEND_PROCESSOR_TOOL post-recording \"'\\\\u0025'f\" \"'\\\\u0025'b\" \"'\\\\u0025't\" \"'\\\\u0025'c\" \"'\\\\u0025'S\" \"'\\\\u0025'E\"",
	"preproc": "$TVHEADEND_PROCESSOR_TOOL pre-recording \"'\\\\u0025'f\" \"'\\\\u0025'b\" \"'\\\\u0025't\" \"'\\\\u0025'c\"",
	"skip-commercials": true,
	"autorec-maxsched": 0,
	"autorec-maxcount": 0,
	"epg-running": true,
	"epg-update-window": 86400,
	"tag-files": true,
	"windows-compatible-filenames": false,
	"whitespace-in-title": true,
	"directory-permissions": "0775",
	"storage-mused": 0,
	"storage-mfree": 1000,
	"storage": "$USER_TV_RECORDINGS_DIR",
	"comment": "$PROJECT_NAME Recording Profile (Matroska)",
	"rerecord-errors": 0,
	"clone": true,
	"post-extra-time": 5,
	"name": "$PROJECT_NAME",
	"profile": "$TVHEADEND_PROFILE_MKV",
	"pri": 1,
	"retention-days": 1,
	"removal-days": 2147483647,
	"pre-extra-time": 2,
	"file-permissions": "0664",
	"charset": "UTF-8",
	"pathname": "'\\\\u0025'F/\$t\$-c-\$.s'\\\\u0025'R\$n.\$x",
	"cache": 2,
	"day-dir": true,
	"channel-dir": false,
	"title-dir": false,
	"format-tvmovies-subdir": "tvmovies",
	"format-tvshows-subdir": "tvshows",
	"channel-in-title": true,
	"date-in-title": false,
	"time-in-title": true,
	"episode-in-title": false,
	"subtitle-in-title": true,
	"omit-title": false,
	"clean-title": false
}'
EOT
)
))" $TVHEADEND_API_URL/dvr/config/create > /dev/null 2>&1
#
# Notify - Default DVR profile added
logger -s -t $(basename $0) "Default DVR profile $PROJECT_NAME (matroska) added"

EOF
#
# Create DVR profile script
if [[ -e $TVHEADEND_DVR_CREATE_PROFILE_TEMP_FILE ]];
then
# Prepare create DVR profile script
sed -i '1i #!/bin/sh' "$TVHEADEND_DVR_CREATE_PROFILE_TEMP_FILE"
chmod 755 $TVHEADEND_DVR_CREATE_PROFILE_TEMP_FILE
#
# Run script to create DVR profile
$TVHEADEND_DVR_CREATE_PROFILE_TEMP_FILE
#
# Pause for a bit to allow  DVR profile to be added properly
sleep 3
# Remove temp script file
rm -f $TVHEADEND_DVR_CREATE_PROFILE_TEMP_FILE
fi
#
#
TVHEADEND_DVR_UUID=$($CURL_CMD $CURL_OPTS $TVHEADEND_API_URL/dvr/config/grid?limit=100000 | jq -r '.entries[0] | select(.name=="'"$PROJECT_NAME"'") |.uuid')
# Export DVR profile UUID
export TVHEADEND_DVR_UUID
}

tvheadend_configure () {
# Add DVB TV Icons
# ----------------
dvb_icons_add

# Create tvheadend directories if it does not exist
# -------------------------------------------------
[ -d $TVHEADEND_CONFIG_DIR ] || mkdir -p $TVHEADEND_CONFIG_DIR
[ -d $TVHEADEND_IMAGE_CACHE_CONFIG_DIR ] || mkdir -p $TVHEADEND_IMAGE_CACHE_CONFIG_DIR
[ -d $TVHEADEND_TIMESHIFT_CONFIG_DIR ] || mkdir -p $TVHEADEND_TIMESHIFT_CONFIG_DIR
[ -d $TVHEADEND_DVR_CONFIG_DIR ] || mkdir -p $TVHEADEND_DVR_CONFIG_DIR
[ -d $TVHEADEND_DVBT_NETWORK_CONFIG_DIR/$TVHEADEND_DVBT_NETWORK_UUID ] || \
	mkdir -p $TVHEADEND_DVBT_NETWORK_CONFIG_DIR/$TVHEADEND_DVBT_NETWORK_UUID
[ -d $TVHEADEND_ADAPTERS_CONFIG_DIR ] || mkdir -p $TVHEADEND_ADAPTERS_CONFIG_DIR
[ -d $TVHEADEND_CHANNELS_CONFIG_DIR ] || mkdir -p $TVHEADEND_CHANNELS_CONFIG_DIR

# Setup tvheadend main config file
# --------------------------------
cat > $TVHEADEND_CONFIG_DIR/config << EOF
{
	"server_name": "$PROJECT_NAME",
	"version": 24,
	"full_version": "$(tvheadend --version | awk {'print $3'})",
	"language_ui": "eng_GB",
	"theme_ui": "blue",
	"ui_quicktips": true,
	"uilevel": 2,
	"uilevel_nochange": false,
	"caclient_ui": false,
	"info_area": [
		"login",
		"storage",
		"time"
	],
	"chname_num": true,
	"chname_src": false,
	"language": [
	],
	"epg_compress": true,
	"epg_cutwindow": 300,
	"epg_window": 86400,
	"prefer_picon": false,
        "chiconpath": "file://$TVHEADEND_CHICON_DIR/%C.png",
	"chiconscheme": 0,
	"piconscheme": 0,
	"http_server_name": "HTS/tvheadend",
	"http_realm_name": "JambulaTV-HTS",
	"digest": 2,
	"cookie_expires": 7,
	"proxy": false,
	"http_user_agent": "TVHeadend/4.3-1236~g518d57b-dirty",
	"iptv_tpool": 4,
	"dscp": -1,
	"descrambler_buffer": 9000,
	"parser_backlog": false,
	"hbbtv": false,
	"tvhtime_update_enabled": false,
	"tvhtime_ntp_enabled": false,
	"tvhtime_tolerance": 5000,
	"satip_rtsp": 0,
	"satip_anonymize": false,
	"satip_noupnp": false,
	"satip_weight": 100,
	"satip_remote_weight": true,
	"satip_descramble": 1,
	"satip_muxcnf": 0,
	"satip_rtptcpsize": 42,
	"satip_nat_rtsp": 0,
	"satip_nat_name_force": false,
	"satip_iptv_sig_level": 220,
	"force_sig_level": 0,
	"satip_dvbs": 0,
	"satip_dvbs2": 0,
	"satip_dvbt": 0,
	"satip_dvbt2": 0,
	"satip_dvbc": 0,
	"satip_dvbc2": 0,
	"satip_atsct": 0,
	"satip_atscc": 0,
	"satip_max_sessions": 0,
	"satip_max_user_connections": 0,
	"satip_rewrite_pmt": false,
	"satip_nom3u": false,
	"satip_notcp_mode": false,
	"satip_restrict_pids_all": false,
	"satip_drop_fe": false
}
EOF

# Configure Image Cache i.e. Caching of TV icons
# -----------------------------------------------
cat > $TVHEADEND_IMAGE_CACHE_CONFIG_DIR/config << EOF
{
	"enabled": true,
	"ignore_sslcert": false,
	"ok_period": 168,
	"fail_period": 24
}
EOF

# Configure Timeshift i.e. Pausing of Live TV
# -------------------------------------------
cat > $TVHEADEND_TIMESHIFT_CONFIG_DIR/config << EOF
{
	"enabled": true,
	"ondemand": false,
	"path": "$TVHEADEND_TIMESHIFT_BUFFER_FILE",
	"max_period": 60,
	"unlimited_period": false,
	"max_size": 2048,
	"ram_size": 0,
	"unlimited_size": false,
	"ram_only": false,
	"ram_fit": false
}
EOF

# Create recording profile for JambulaTV (matroska)
# -------------------------------------------------
tvheadend_create_dvr_profile_mkv

# TVHeadend Logging
# -----------------
# Create TVHeadend logs directory if non-existent
[ -d $TVHEADEND_LOG_DIR ] || mkdir -p $TVHEADEND_LOG_DIR

# Give multimedia user permission to access tvheadend directories
# --------------------------------------------------------------------
chown -R $MULTIMEDIA_USER:video $TVHEADEND_CONFIG_DIR
chown -R $MULTIMEDIA_USER:video $TVHEADEND_LOG_DIR

# Generate jambulatv-tvheadend-processor tool which is used to process tvheadend processes like recordings
[ -e $BINARY_PREFIX/jambulatv-tvheadend-processor ] || \
	cat $PROJECT_BIN_DIR/jambulatv-tvheadend-processor | \
		sed -e "s:MY_TVHEADEND_IPTV_LOG_DIR:$TVHEADEND_IPTV_LOG_DIR:g" | \
		sed -e "s:MY_TVHEADEND_HTTP_IP:$TVHEADEND_HTTP_IP:g" | \
		sed -e "s:MY_TVHEADEND_HTTP_PORT:$TVHEADEND_HTTP_PORT:g" | \
		sed "s:MY_TVHEADEND_CONFIG_DIR:$TVHEADEND_CONFIG_DIR:g" | \
		sed "s:MY_TMPDIR:$TMPDIR:g" \
			> $BINARY_PREFIX/jambulatv-tvheadend-processor
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-tvheadend-processor
#
# Copy jambulatv-dvbt-scan used to scan 4 DVB-T services, if none exists in bin directory
[ -e $BINARY_PREFIX/jambulatv-dvbt-scan ] || cp -v $PROJECT_BIN_DIR/jambulatv-dvbt-scan $BINARY_PREFIX/
#
# Generate jambulatv-tvheadend-controller script
[ -e $TVHEADEND_CONTROLLER_TOOL ] || \
	cat $PROJECT_BIN_DIR/jambulatv-tvheadend-controller | \
		sed "s:MY_PLAYLISTS_PORT:$PLAYLISTS_PORT:g" \
			> $TVHEADEND_CONTROLLER_TOOL
# Make script executable
chmod 755 $TVHEADEND_CONTROLLER_TOOL

# Configure DVB-T2 network if requested
# -------------------------------------
if [ "$TVH_DVBT_CONFIG_REQUESTED" = "yes" ];
then

# Create, configure DVB-T network, then Scan and Map all available channels
$TVHEADEND_CONTROLLER_TOOL dvb all

# Create script which will enable kodi pvr.hts addon at next boot, but only if it is
# non-existent.  Can't do it here, since kodi still not alive
if [[ ! -e $KODI_PVR_MANAGER_ENABLE_TOOL ]];
then
cat > $KODI_PVR_MANAGER_ENABLE_TOOL <<EOF
#!/bin/sh
# Temporary script to enable PVR Manager in kodi after initial install
#
PVR_STATUS_FILE=\$(grep ^PVR_STATUS_FILE $KODI_CONTROLLER_TOOL | cut -d '=' -f2 | head -1 | awk {'print $1'})

# Quit if PVR manager was already enabled
[ -e $KODI_USER_DATA/.pvrmanager_enabled ] && exit
# Quit if DVBT was never configured
[ -e $TVHEADEND_CONFIG_DIR/.dvbt_configured ] || exit 

# Check status of kodi pvr.hts addon, and enable it if false
$KODI_CONTROLLER_TOOL addon_status pvr.hts > /dev/null 2>&1
# Source PVR status temp file
[ -e \$PVR_STATUS_FILE ] && . \$PVR_STATUS_FILE
# If status is disabled - Enable it! i.e. Toggle to true
[ "\$ADDON_STATUS" = "true" ] || $KODI_CONTROLLER_TOOL addon_switch pvr.hts > /dev/null 2>&1

# Let other runs know, we did this already
touch $KODI_USER_DATA/.pvrmanager_enabled 
EOF
# Copy autoexec.py startup file for kodi if non-existent
[ -e $KODI_USER_DATA/autoexec.py ] || cp -v $PROJECT_CONFIGS_DIR/kodi/autoexec.py $KODI_USER_DATA
# Append PVR Manager enable script to auto start file
cat >> $KODI_USER_DATA/autoexec.py <<EOF

# Enable PVR Manager if it was disabled and was requested for at setup
subprocess.check_call("$KODI_PVR_MANAGER_ENABLE_TOOL")
EOF
# Make script executable
chmod 755  $KODI_PVR_MANAGER_ENABLE_TOOL
# Let other tools know, we already configured DVB-T
touch $TVHEADEND_CONFIG_DIR/.dvbt_configured
fi

else
# Remind to run manually in post install information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
TVHeadend DVB-T Network
========================
% The DVB-T network was not configured during install.  Please run the following function:

  tvheadend_dvbt_configure and map channels using:

  $TVHEADEND_CONTROLLER_TOOL dvb all

  
TIP: Run initial-setup tool or just add it to testing.sh and run!  
#
EOF
fi
}

fmtools_install () {
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/fmtools-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v fmtools-* fmtools
# Compile
cd $INSTALL_SRC_DIR/fmtools && ./configure --prefix=$PREFIX \
	--libdir=$LIBDIR
make_install_jambulatv
}

dvbstreamer_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/dvbstreamer-$DVBSTREAMER_VERSION.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v dvbstreamer-* dvbstreamer
cd $INSTALL_SRC_DIR/dvbstreamer 
# Patches to fix libev configure errors
cp -v $INCDIR/libev/*.h $INCDIR
#patch -p1 < $PROJECT_PATCHES_DIR/dvbstreamer_libev.patch # fixed in SVN version
fgrep -rlZ pkginclude_DATA --include Makefile.am . | xargs -0 sed -i 's/pkginclude_DATA/pkginclude_HEADERS/g'
#autoreconf -i # Not needed for SVN
# Compile
./autogen.sh
./configure --prefix=$PREFIX --sysconfdir=$CONFDIR --libdir=$LIBDIR --localstatedir=$STATEDIR --disable-atsc --enable-file-streamer
make_install_jambulatv
}

pydvbstreamer_install () {
get_python_version
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/pydvbstreamer-$PYDVBSTREAMER_VERSION.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v pydvbstreamer-* pydvbstreamer
cd $INSTALL_SRC_DIR/pydvbstreamer 
# Compile
python setup.py install --install-lib=$PYTHON_SITEDIR
}

livepause_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/livepause-$LIVEPAUSE_VERSION.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v livepause-* livepause
# Compile
cd $INSTALL_SRC_DIR/livepause && ./configure --prefix=$PREFIX --sysconfdir=$CONFDIR --libdir=$LIBDIR --localstatedir=$STATEDIR
make_install_jambulatv
}

avplayers_install () {
live555_install
libdvbpsi_install
#---Install ffmpeg first without x264 - will be removed and re-installed shortly
ffmpeg_install && x264_install 
#---Uninstall already existing ffmpeg (without x264 libs) and install again w/ x264
uninstall_src_pkgs ffmpeg && ffmpeg_install
mplayer_install
vlc_install
xine_lib_install
xine_ui_install
tvheadend_install
dvbstreamer_install
pydvbstreamer_install
livepause_install 
}

pyosd_install () {
get_python_version
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/pyosd-$PYOSD_VERSION.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v pyosd-* pyosd
# Compile
cd $INSTALL_SRC_DIR/pyosd 
python setup.py install --install-lib=$PYTHON_SITEDIR
# Patch - default font not working
patch -p1 $PYTHON_SITEDIR/pyosd/__init__.py < $PROJECT_PATCHES_DIR/pyosd_font.patch
}

kaa_install () {
get_python_version
# Create kaa install directory
[ -d $KAA_INSTALL_DIR ] || mkdir -p $KAA_INSTALL_DIR
# Loop through all kaa-modules
for KAA_MODULE in kaa-base kaa-imlib2 kaa-display kaa-metadata kaa-webmetadata kaa-epg kaa-popcorn kaa-candy
do
# Copy module to install directory
rsync -avz --delete-after $KAA_MODULES_GIT_DIR/$KAA_MODULE/ $KAA_INSTALL_DIR/$KAA_MODULE/
# Install module
cd $KAA_INSTALL_DIR/$KAA_MODULE
python setup.py install --install-lib=$PYTHON_SITEDIR
done
}

freevo1_install () {
get_python_version
# Create freevo1 install directory
[ -d $FREEVO_INSTALL_DIR ] || mkdir -p $FREEVO_INSTALL_DIR
# Choose freevo verion
if [ "$FREEVO_VERSION" = "git" ];
then
# Copy freevo1-git files to install directory
rsync -avz --delete-after $FREEVO1_GIT_DIR/ $FREEVO_INSTALL_DIR/
else
# Copy freevo1-svn files to install directory
rsync -avz --delete-after $FREEVO1_SVN_DIR/ $FREEVO_INSTALL_DIR/
fi
# Install module
cd $FREEVO_INSTALL_DIR
./autogen.sh nodocs
if [ "$FREEVO_VERSION" = "svn" ];
then
# BUG Fix: revision number missing in SVN
echo "__revision__ = ''" > $FREEVO_INSTALL_DIR/src/revision.py 
fi
python setup.py install --install-lib=$PYTHON_SITEDIR
}

freevo1_configure () {
# Create config, share, log, cache, lib freevo directories
for PROJECT_DIR in \
$PROJECT_SYSTEM_CONF_DIR \
$PROJECT_SYSTEM_SHARE_DIR \
$PROJECT_SYSTEM_LOG_DIR \
$PROJECT_SYSTEM_LIB_DIR \
$PROJECT_SYSTEM_CACHE_DIR
do
mkdir -p $PROJECT_DIR/freevo
done
# Create freevo local config directory if non-existent
[ -d $FREEVO_LOCAL_CONFIG_DIR ] || mkdir -p $FREEVO_LOCAL_CONFIG_DIR
# Create freevo commands directory if it doesn't exist
[ -d $FREEVO_SYSTEM_CONFIG_DIR/commands ] || mkdir -p $FREEVO_SYSTEM_CONFIG_DIR/commands
# Create local settings directory if non-existent(This will be user accessible)
[ -d $LOCAL_SETTINGS_DIR ] || mkdir -p $LOCAL_SETTINGS_DIR
# freevo.conf
$FREEVO_INSTALL_DIR/freevo setup --geometry=$PREFERRED_TV_RESOLUTION --position="0,0" --display="x11" --tv=pal --chanlist="southafrica" --prefix=/etc 
# local_conf.py
cp -v $FREEVO_INSTALL_DIR/local_conf.py.example $FREEVO_LOCAL_CONFIG_DIR/local_conf.py
# patch local_conf.py
patch -p1 $FREEVO_LOCAL_CONFIG_DIR/local_conf.py < $PROJECT_PATCHES_DIR/local_conf_py_1.patch
# Add custom local_conf.py file
cp -v $PROJECT_CONFIGS_DIR/jambulatv_main_conf.py.sample $FREEVO_SYSTEM_CONFIG_DIR/main_conf.py 
# Add lircrc file
# Copy Remote control file to above directory
cp -rv $PROJECT_CONTRIB_DIR/remotes/$IR_REMOTE/lircrc $FREEVO_SYSTEM_CONFIG_DIR
# Copy Analog TV channels and frequencies to share directory
cp -rv $PROJECT_CONTRIB_DIR/tv $PROJECT_SYSTEM_SHARE_DIR
# Copy static db files e.g. weather to lib directory
cp -rv $PROJECT_CONTRIB_DIR/db $PROJECT_SYSTEM_LIB_DIR
# Populate commands directory
cp -rv $PROJECT_CONTRIB_DIR/commands/*fxd $FREEVO_SYSTEM_CONFIG_DIR/commands
# Add cron entry to cache freevo daily
cat >> $SPOOLDIR/cron/$MULTIMEDIA_USER << EOF
# Freevo entries
# --------------
# Add cron entry to cache freevo daily
@daily $BINARY_PREFIX/freevo cache --rebuild > /dev/null 2>&1
EOF
}

freevo1_plugins () {
# Configure freevo static, log, cache directories
patch -p1 $FREEVO_INSTALL_DIR/src/config.py < $PROJECT_PATCHES_DIR/freevo_config.py.patch
# Change Starting freevo to jambulatv
patch -p1 $FREEVO_INSTALL_DIR/src/main.py < $PROJECT_PATCHES_DIR/main.py.patch
# Patch utils-misc file - usbstorage plugin
patch -p1 $FREEVO_INSTALL_DIR/src/util/misc.py < $PROJECT_PATCHES_DIR/misc_usbstorage.patch
# Patch xine.py so quit takes place when using IPTV wrapper
patch -p1 $FREEVO_INSTALL_DIR/src/video/plugins/xine.py < $PROJECT_PATCHES_DIR/xine.py.patch
# move radio to main menu
mv -v $FREEVO_INSTALL_DIR/src/audio/plugins/radio.py $FREEVO_INSTALL_DIR/src/audio
}

freevo_skin_customization () {
# Patch GeeXBox Skin to use a nice font like MsTTF's trebucbd
patch -p1 $FREEVO_RUNTIME_SKINS_DIR/main/geexbox.fxd  < $PROJECT_PATCHES_DIR/geexbox_skin.patch
}

# Kodi Dependencies
# -----------------
libnfs_install () {
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/libnfs-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v libnfs-* libnfs
# Compile
cd $INSTALL_SRC_DIR/libnfs && ./bootstrap
./configure --prefix=$PREFIX --sysconfdir=$CONFDIR --libdir=$LIBDIR --localstatedir=$STATEDIR 
make_install_jambulatv
}

libusb_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/libusb-*.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v libusb-* libusb
# Compile all
cd $INSTALL_SRC_DIR/libusb
./configure --prefix=$PREFIX --libdir=$LIBDIR 
make_install_jambulatv
}

platform_install () {
cd $PROJECT_GITHUB_DIR/platform
git archive --format tar.gz --prefix=platform/ $PLATFORM_TAG | (cd $INSTALL_SRC_DIR/ && tar zxvf -)
cd $INSTALL_SRC_DIR/platform
# Log to build file
cmake_build_log
# CMake
cmake -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_INSTALL_LIBDIR=$LIBDIR .
make_install_jambulatv
}

libcec_install () {
cd $PROJECT_GITHUB_DIR/libcec
git archive --format tar.gz --prefix=libcec/ $LIBCEC_TAG | (cd $INSTALL_SRC_DIR/ && tar zxvf -)
cd $INSTALL_SRC_DIR/libcec
./bootstrap
./configure --prefix=$PREFIX --libdir=$LIBDIR
make_install_jambulatv
ldconfig
}

kodi_deps_install () {
libnfs_install
libusb_install
# Needed for Addons like PVR.HTS
platform_install 
libcec_install
}

kodi_unpack_git () {
# Change to Github sources
cd $PROJECT_GITHUB_DIR/kodi-$KODI_CODENAME
# Check to see if desired branch/tag exists
git tag -l | grep -x $KODI_PACKAGE_NAME > /dev/null 2>&1
TAG_EXISTS=$?
if [ "$TAG_EXISTS" = "0" ];
then
git archive --format tar.gz --prefix=kodi/ $KODI_PACKAGE_NAME | (cd $INSTALL_SRC_DIR/ && tar zxvf -)
else
git archive --format tar.gz --prefix=kodi/ HEAD | (cd $INSTALL_SRC_DIR/ && tar zxvf -)
# Display Kodi's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
KODI Version
============
% The Kodi branch you specified, does not exist, so I used master/ HEAD instead

#
EOF
fi
#
# Set FFmpeg version for kodi
KODI_FFMPEG_VERSION=$(grep VERSION $INSTALL_SRC_DIR/kodi/tools/depends/target/ffmpeg/FFMPEG-VERSION | grep $KODI_CODENAME | cut -d "=" -f2)
#
# Archive to kodi ffmpeg target folders directory
cd $PROJECT_GITHUB_DIR/kodi-FFmpeg
git archive -o $INSTALL_SRC_DIR/kodi/tools/depends/target/ffmpeg/ffmpeg-$KODI_FFMPEG_VERSION.tar.gz --prefix=ffmpeg-$KODI_FFMPEG_VERSION/ $KODI_FFMPEG_VERSION
}

kodi_unpack_tarball () {
tar zxvf $PROJECT_TARBALLS_DIR/xbmc-$KODI_PACKAGE_NAME*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v xbmc-$KODI_PACKAGE_NAME* kodi
cd $INSTALL_SRC_DIR/kodi
#
# Set FFmpeg version for kodi
KODI_FFMPEG_VERSION=$(grep VERSION $INSTALL_SRC_DIR/kodi/tools/depends/target/ffmpeg/FFMPEG-VERSION | grep $KODI_CODENAME | cut -d "=" -f2)
#
# Copy to kodi ffmpeg target folders directory
cp -v $PROJECT_TARBALLS_DIR/ffmpeg-$KODI_FFMPEG_VERSION.tar.gz $INSTALL_SRC_DIR/kodi/tools/depends/target/ffmpeg/
}

kodi_install () {
# Unpack sources depending on type of sources
case $KODI_SOURCES_TYPE in
git)
# Unpack kodi
kodi_unpack_git
;;
tarball)
# Unpack kodi
kodi_unpack_tarball
;;
esac

# JsonSchemaBuilder
# -----------------
if [ ! -x $BINARY_PREFIX/JsonSchemaBuilder ];
then
# Build JsonSchemaBuilder, if not available
make -C $INSTALL_SRC_DIR/kodi/tools/depends/native/JsonSchemaBuilder/
cp -v $INSTALL_SRC_DIR/kodi/tools/depends/native/JsonSchemaBuilder/bin/JsonSchemaBuilder $BINARY_PREFIX
chmod 775 $BINARY_PREFIX/JsonSchemaBuilder
fi

# CrossGuid
# ---------
# Copy tarball to kodi target directories
cp -v $PROJECT_TARBALLS_DIR/crossguid-*.tar.gz $INSTALL_SRC_DIR/kodi/tools/depends/target/crossguid
# Build
make -C $INSTALL_SRC_DIR/kodi/tools/depends/target/crossguid PREFIX=/usr

# Copy libdvdcss, libdvread, libdvdnav tarballs to kodi target directories
for LIBDVDPKG in \
libdvdcss \
libdvdread \
libdvdnav
do
cp -v $PROJECT_TARBALLS_DIR/$LIBDVDPKG-*.tar.gz $INSTALL_SRC_DIR/kodi/tools/depends/target/$LIBDVDPKG
done

# Apply patches
# -------------
# Change uPnP device names from kodi to ours - useful in discovery Apps
cp -v $INSTALL_SRC_DIR/kodi/xbmc/network/upnp/UPnP.cpp \
	$INSTALL_SRC_DIR/kodi/xbmc/network/upnp/UPnP.cpp.orig
#
cat $INSTALL_SRC_DIR/kodi/xbmc/network/upnp/UPnP.cpp.orig | \
	sed "s|device->m_ModelName        = \"Kodi\";|device->m_ModelName        = \"$PROJECT_NAME\";|g" | \
	sed "s|device->m_ModelDescription = \"Kodi - Media Server\";|device->m_ModelDescription = \"$PROJECT_NAME - Media Renderer\";|g" | \
	sed "s|device->m_ModelURL         = \"http://kodi.tv/\";|device->m_ModelURL         = \"$PROJECT_URL\";|g" | \
	sed "s|device->m_Manufacturer     = \"XBMC Foundation\";|device->m_Manufacturer     = \"$COMPANY_NAME\";|g" | \
	sed "s|device->m_ManufacturerURL  = \"http://kodi.tv/\";|device->m_ManufacturerURL  = \"$COMPANY_URL\";|g" \
		> $INSTALL_SRC_DIR/kodi/xbmc/network/upnp/UPnP.cpp

# --------------------------------------------------------------------------------------------------
# Compile - ONLY for kodi versions 17-Krypton and below.  For above 17, switch to cmake build system
# --------------------------------------------------------------------------------------------------
cd $INSTALL_SRC_DIR/kodi
./bootstrap
./configure --prefix=$PREFIX --libdir=$LIBDIR --with-lirc-device=$RUNDIR/lirc/lircd --enable-pulse --enable-udev --enable-libusb --enable-libbluray --enable-player=mplayer,ffplay,cvlc,jambulatv-dvbplayer PYTHON_VERSION=2.7
#
cd $INSTALL_SRC_DIR/kodi
[ ! -d $INCDIR/afpfs-ng ] || ln -s -f $INCDIR/afpfs-ng/* $INCDIR/
#
# Make Install
make_install_jambulatv
# Clean up - saves upto 1.5GB
make clean
}

kodi_platform_install () {
# Install p8-platform for kodi versions above Isengard.  Also needed for pvr addons
[[ "$KODI_CODENAME" = "Isengard" ]] || \
        PLATFORM_TAG=platform-2.1.0 && platform_install
#
# Install kodi-platform - specific to specified kodi branch
rsync -av $PROJECT_GITHUB_DIR/kodi-platform-$KODI_CODENAME/ $INSTALL_SRC_DIR/kodi-platform/
cd $INSTALL_SRC_DIR/kodi-platform
# Log to build file
cmake_build_log
# CMake
cmake -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_INSTALL_LIBDIR=$LIBDIR .
make_install_jambulatv
}

kodi_pvr_hts_install () {
rsync -avz --delete-after $PROJECT_GITHUB_DIR/kodi-addons/pvr.hts-$KODI_CODENAME/ $INSTALL_SRC_DIR/kodi-pvr.hts/
cd $INSTALL_SRC_DIR/kodi-pvr.hts
# Log to build file
cmake_build_log
# CMake
cmake -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_INSTALL_LIBDIR=$LIBDIR/kodi .
make_install_jambulatv
}

kodi_pvr_iptvsimple_install () {
rsync -avz --delete-after $PROJECT_GITHUB_DIR/kodi-addons/pvr.iptvsimple-$KODI_CODENAME/ $INSTALL_SRC_DIR/kodi-pvr.iptvsimple/
cd $INSTALL_SRC_DIR/kodi-pvr.iptvsimple
# Log to build file
cmake_build_log
# CMake
cmake -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_INSTALL_LIBDIR=$LIBDIR/kodi .
make_install_jambulatv
}

kodi_pvr_rtl_radiofm_install () {
# Unpack pvr.rtl.radiofm sources
rsync -avz --delete-after $PROJECT_GITHUB_DIR/kodi-addons/pvr.rtl.radiofm/ $INSTALL_SRC_DIR/pvr.rtl.radiofm/
# configure
cd $INSTALL_SRC_DIR/pvr.rtl.radiofm
# Log to build file
cmake_build_log
# CMake
cmake -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_INSTALL_LIBDIR=$LIBDIR/kodi \
	-DINSTALL_UDEV_RULES=ON -DDETACH_KERNEL_DRIVER=ON .

_install_pause_check_4_errors_
make

_install_pause_check_4_errors_

make_install_jambulatv
}

kodi_addons_unpack () {
# script.module.beautifulsoup
if [ "$KODI_ADDON" = "script.module.beautifulsoup" ];
then
unzip -o -d $KODI_SYSTEM_ADDONS/ $PROJECT_ZIPS_DIR/kodi-addons/$KODI_CODENAME/script.module.beautifulsoup-*.zip
# script.module.beautifulsoup4
elif [ "$KODI_ADDON" = "script.module.beautifulsoup4" ];
then
unzip -o -d $KODI_SYSTEM_ADDONS/ $PROJECT_ZIPS_DIR/kodi-addons/$KODI_CODENAME/script.module.beautifulsoup4-*.zip
# plugin.video.youtube
elif [ "$KODI_ADDON" = "plugin.video.youtube" ];
then
rsync -avz $PROJECT_GITHUB_DIR/kodi-addons/plugin.video.youtube/ \
	$KODI_SYSTEM_ADDONS/plugin.video.youtube/
# weather.openweathermap.extended
elif [ "$KODI_ADDON" = "weather.openweathermap.extended" ];
then
rsync -avz $PROJECT_GITHUB_DIR/kodi-addons/weather.openweathermap.extended/ \
	$KODI_SYSTEM_ADDONS/weather.openweathermap.extended/
# weather.weatherchina
elif [ "$KODI_ADDON" = "weather.weatherchina" ];
then
rsync -avz $PROJECT_GITHUB_DIR/kodi-addons/weather.weatherchina/ \
	$KODI_SYSTEM_ADDONS/weather.weatherchina/
# weather.yahoo
elif [ "$KODI_ADDON" = "weather.yahoo" ];
then
rsync -avz $PROJECT_GITHUB_DIR/kodi-addons/weather.yahoo/ \
	$KODI_SYSTEM_ADDONS/weather.yahoo/

else
# All others
unzip -o -d $KODI_SYSTEM_ADDONS/ $PROJECT_ZIPS_DIR/kodi-addons/$KODI_CODENAME/$KODI_ADDON*.zip

# Debugging
#echo
#_install_pause_check_4_errors_
#echo

fi
# Give permissions to multimedia user for addons system directory
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $KODI_SYSTEM_ADDONS
}

kodi_addons_4_Isengard() {
for KODI_ADDON in \
$KODI_ADDONS_REPOSITORIES \
$KODI_ADDONS_REQUIRED_ISENGARD \
$KODI_ADDONS_LIVETV \
$KODI_ADDONS_MUSIC \
$KODI_ADDONS_SPORTS \
$KODI_ADDONS_GAMES \
$KODI_ADDONS_JAMBULA \
$KODI_ADDONS_MISC
do
kodi_addons_unpack
done
}

kodi_addons_4_Krypton() {
for KODI_ADDON in \
$KODI_ADDONS_REQUIRED_KRYPTON \
$KODI_ADDONS_JAMBULA 
do
# Unpack addon
kodi_addons_unpack
#
# Enable Addon during initial run of JambulaTV
cat >> $TMP_DIR/jambula_addons2enable <<EOT
sqlite3 $KODI_USER_DATA/Database/Addons27.db 'update installed set enabled=1 where addonid=='"'$KODI_ADDON'"';'
EOT
done
#
# Create Database directory if non-existent
[[ -d $KODI_USER_DATA/Database ]] || mkdir -p $KODI_USER_DATA/Database
# Create script that will run after this reboot and only once in a lifetime
cat > $KODI_USER_DATA/Database/jambula_addons.sh <<EOT
#!/bin/sh
# Enable our favourite kodi addons
$(cat $TMP_DIR/jambula_addons2enable)
EOT
# Make script executable
chmod 755 $KODI_USER_DATA/Database/jambula_addons.sh
}

kodi_addons_install () {
case $KODI_CODENAME in
Isengard)
kodi_addons_4_Isengard
;;
Krypton)
kodi_addons_4_Krypton
;;
esac
}

kodi_addons_configure() {
#
[ -d $KODI_ADDON_DATA_DIR ] || mkdir -p $KODI_ADDON_DATA_DIR
#
# weather.openweathermap.extended
# ---
# Kampala
[ "$(echo $TIMEZONE | cut -d '/' -f2)" = "Kampala" ] && \
tar zxvf $PROJECT_CONFIGS_DIR/kodi/addon_data/weather.openweathermap.extended-kampala.tgz -C $KODI_ADDON_DATA_DIR 
#
# script.service.kodi.callbacks 
# ---
tar zxvf $PROJECT_CONFIGS_DIR/kodi/addon_data/script.service.kodi.callbacks.tgz -C $KODI_ADDON_DATA_DIR 

# Disable kodi version check # IMPORTANT: DO NOT REMOVE PLUGIN OTHERWISE EXPECT CRASHES
[ -d $KODI_ADDON_DATA_DIR/service.xbmc.versioncheck ] || mkdir -p $KODI_ADDON_DATA_DIR/service.xbmc.versioncheck
# Change from true to false
cat > $KODI_ADDON_DATA_DIR/service.xbmc.versioncheck/settings.xml << EOF
<settings>
    <setting id="versioncheck_enable" value="false" />
</settings>
EOF

# pvr.hts 
[ -d $KODI_ADDON_DATA_DIR/pvr.hts ] || mkdir -p $KODI_ADDON_DATA_DIR/pvr.hts
# Enable pvr.hts addon
cat > $KODI_ADDON_DATA_DIR/pvr.hts/settings.xml << EOF
<settings>
    <setting id="autorec_approxtime" value="0" />
    <setting id="autorec_maxdiff" value="15" />
    <setting id="connect_timeout" value="10" />
    <setting id="dvr_dubdetect" value="0" />
    <setting id="dvr_lifetime" value="8" />
    <setting id="dvr_priority" value="2" />
    <setting id="epg_async" value="false" />
    <setting id="host" value="${TVHEADEND_HTTP_IP}" />
    <setting id="htsp_port" value="${TVHEADEND_HTSP_PORT}" />
    <setting id="http_port" value="${TVHEADEND_HTTP_PORT}" />
    <setting id="pass" value="${TVHEADEND_HTTP_PASS}" />
    <setting id="pretuner_closedelay" value="10" />
    <setting id="pretuner_enabled" value="true" />
    <setting id="response_timeout" value="5" />
    <setting id="streaming_profile" value="" />
    <setting id="total_tuners" value="2" />
    <setting id="trace_debug" value="false" />
    <setting id="user" value="${TVHEADEND_HTTP_USER}" />
</settings>
EOF

# pvr.iptvsimple 
#[ -d $KODI_ADDON_DATA_DIR/pvr.iptvsimple ] || mkdir -p $KODI_ADDON_DATA_DIR/pvr.iptvsimple
# Change from true to false
#cat > $KODI_ADDON_DATA_DIR/pvr.iptvsimple/settings.xml << EOF
#<settings>
#    <setting id="epgCache" value="true" />
#    <setting id="epgPath" value="" />
#    <setting id="epgPathType" value="1" />
#    <setting id="epgTSOverride" value="false" />
#    <setting id="epgTimeShift" value="0.000000" />
#    <setting id="epgUrl" value="" />
#    <setting id="logoBaseUrl" value="" />
#    <setting id="logoFromEpg" value="0" />
#    <setting id="logoPath" value="$PROJECT_SYSTEM_ICONS_DIR/IPTV/" />
#    <setting id="logoPathType" value="0" />
#    <setting id="m3uCache" value="true" />
#    <setting id="m3uPath" value="" />
#    <setting id="m3uPathType" value="1" />
#    <setting id="m3uUrl" value="http://127.0.0.1:$PLAYLISTS_PORT/$PLAYLISTS_IPTV_WORLD_M3U_FILE" />
#    <setting id="sep1" value="" />
#    <setting id="sep2" value="" />
#    <setting id="sep3" value="" />
#    <setting id="startNum" value="30" />
#</settings>
#EOF

# plugin.video.youtube
[ -d $KODI_ADDON_DATA_DIR/plugin.video.youtube ] || mkdir -p $KODI_ADDON_DATA_DIR/plugin.video.youtube
# Activate API and other settings
cat > $KODI_ADDON_DATA_DIR/plugin.video.youtube/settings.xml <<EOF
<settings>
    <setting id="kodion.access_token" value="" />
    <setting id="kodion.access_token.expires" value="" />
    <setting id="kodion.cache.size" value="5" />
    <setting id="kodion.content.max_per_page" value="9" />
    <setting id="kodion.fanart.show" value="true" />
    <setting id="kodion.login.hash" value="" />
    <setting id="kodion.login.password" value="" />
    <setting id="kodion.login.username" value="" />
    <setting id="kodion.refresh_token" value="" />
    <setting id="kodion.safe.search" value="0" />
    <setting id="kodion.search.size" value="10" />
    <setting id="kodion.setup_wizard" value="false" />
    <setting id="kodion.subtitle.language" value="0" />
    <setting id="kodion.support.alternative_player" value="false" />
    <setting id="kodion.thumbnail.size" value="1" />
    <setting id="kodion.video.quality" value="2" />
    <setting id="kodion.video.quality.ask" value="false" />
    <setting id="kodion.video.quality.mpd" value="false" />
    <setting id="kodion.video.support.mpd.addon" value="false" />
    <setting id="kodion.video.support.mpd.builtin" value="false" />
    <setting id="simple.requests.ssl.verify" value="true" />
    <setting id="youtube.api.enable" value="true" />
    <setting id="youtube.api.id" value="$YOUTUBE_CLIENT_ID" />
    <setting id="youtube.api.key" value="$YOUTUBE_API_KEY" />
    <setting id="youtube.api.key.switch" value="1" />
    <setting id="youtube.api.key.switch.use" value="" />
    <setting id="youtube.api.last.hash" value="" />
    <setting id="youtube.api.last.switch" value="" />
    <setting id="youtube.api.secret" value="$YOUTUBE_CLIENT_SECRET" />
    <setting id="youtube.channel.fanart.show" value="true" />
    <setting id="youtube.filter.my_subscriptions_filtered.blacklist" value="false" />
    <setting id="youtube.filter.my_subscriptions_filtered.list" value="" />
    <setting id="youtube.folder.browse_channels.show" value="true" />
    <setting id="youtube.folder.disliked_videos.show" value="true" />
    <setting id="youtube.folder.history.playlist" value="" />
    <setting id="youtube.folder.history.show" value="true" />
    <setting id="youtube.folder.liked_videos.show" value="true" />
    <setting id="youtube.folder.live.show" value="true" />
    <setting id="youtube.folder.my_channel.show" value="true" />
    <setting id="youtube.folder.my_subscriptions.show" value="true" />
    <setting id="youtube.folder.my_subscriptions_filtered.show" value="false" />
    <setting id="youtube.folder.playlists.show" value="true" />
    <setting id="youtube.folder.popular_right_now.show" value="true" />
    <setting id="youtube.folder.recommendations.show" value="true" />
    <setting id="youtube.folder.settings.show" value="true" />
    <setting id="youtube.folder.sign.in.show" value="true" />
    <setting id="youtube.folder.sign.out.show" value="true" />
    <setting id="youtube.folder.subscriptions.show" value="true" />
    <setting id="youtube.folder.watch_later.playlist" value="" />
    <setting id="youtube.folder.watch_later.show" value="true" />
    <setting id="youtube.language" value="en-US" />
    <setting id="youtube.login.version" value="" />
    <setting id="youtube.playlist.watchlater.autoremove" value="true" />
    <setting id="youtube.region" value="US" />
    <setting id="youtube.suggested_videos" value="false" />
    <setting id="youtube.view.description.show_channel_name" value="true" />
</settings>
EOF

# Give permissions to multimedia user for addon_data directory
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $KODI_ADDON_DATA_DIR
}

iptv_tvheadend_network_add () {
# Remove previous temp script file for creating IPTV network
[[ -e $TVHEADEND_IPTV_CREATE_NETWORK_TEMP_FILE ]] && sudo rm -f $TVHEADEND_IPTV_CREATE_NETWORK_TEMP_FILE 

# Add IPTV network creation command to temp file
cat >> $TVHEADEND_IPTV_CREATE_NETWORK_TEMP_FILE <<EOF
# $TVHEADEND_IPTV_NETWORK_NAME
# ----------------------------
# Add IPTV network to backend
$CURL_CMD $CURL_OPTS -d "class=iptv_auto_network" -d "\$(printf $(echo -n $(cat <<EOT
conf='{
	"url": "http://$TVHEADEND_HTTP_IP:$PLAYLISTS_PORT/$PLAYLISTS_IPTV_WORLD_M3U_FILE",
	"bouquet": false,
	"channel_number": 31,
	"refetch_period": 1440,
	"ssl_peer_verify": false,
	"tsid_zero": true,
	"remove_args": "ticket",
	"scan_create": false,
	"service_sid": 0,
	"priority": 2,
	"spriority": 2,
	"max_streams": 1,
	"max_bandwidth": 0,
	"max_timeout": 120,
	"icon_url": "file://$PROJECT_SYSTEM_ICONS_DIR/IPTV",
	"networkname": "$TVHEADEND_IPTV_NETWORK_NAME",
	"pnetworkname": "$PROJECT_NAME",
	"nid": 0,
	"autodiscovery": 0,
	"skipinitscan": true,
	"idlescan": false,
	"sid_chnum": false,
	"ignore_chnum": false,
	"satip_source": 0,
	"localtime": 180,
	"wizard": false,
	"ignore_path": 0,
	"remove_scrambled": true
}'
EOT
)
))" $TVHEADEND_API_URL/mpegts/network/create > /dev/null 2>&1
#
# Notify - IPTV network added
logger -s -t $(basename $0) "Added IPTV network [$TVHEADEND_IPTV_NETWORK_NAME]"

EOF

# Create IPTV network script
if [[ -e $TVHEADEND_IPTV_CREATE_NETWORK_TEMP_FILE ]];
then
# Prepare create IPTV network script
sed -i '1i #!/bin/sh' "$TVHEADEND_IPTV_CREATE_NETWORK_TEMP_FILE"
chmod 755 $TVHEADEND_IPTV_CREATE_NETWORK_TEMP_FILE

# Run script to create IPTV network
$TVHEADEND_IPTV_CREATE_NETWORK_TEMP_FILE

# Pause for a bit to allow IPTV network to be added properly
sleep 3
# Remove temp script file
rm -f $TVHEADEND_IPTV_CREATE_NETWORK_TEMP_FILE
fi

# Copy default IPTV world playlist for JambulaTV if not existent - see playlists_configure
if [[ -e $PROJECT_CONTRIB_DIR/tv/iptv/$PLAYLISTS_IPTV_WORLD_M3U_FILE ]] && \
	[[ ! -e $PLAYLISTS_DIRECTORY/$PLAYLISTS_IPTV_WORLD_M3U_FILE ]];
then
	cp -rv $PROJECT_CONTRIB_DIR/tv/iptv/$PLAYLISTS_IPTV_WORLD_M3U_FILE $PLAYLISTS_DIRECTORY
fi
}

iptv_tvheadend_configure () {
# Add IPTV network
iptv_tvheadend_network_add
# Copy jambulatv-rtmplayer used to play rtmp based IPTV streams via TVHeadend
[ -e $BINARY_PREFIX/jambulatv-rtmplayer ] || cp -v $PROJECT_BIN_DIR/jambulatv-rtmplayer $BINARY_PREFIX/
#
# Copy jambulatv-yplayer used to play Youtube based IPTV streams via TVHeadend and add User-Agent string too
[ -e $BINARY_PREFIX/jambulatv-yplayer ] || \
	cat $PROJECT_BIN_DIR/jambulatv-yplayer | \
		sed -e "s:MY_USER_AGENT:$HTTP_BROWSER_USERAGENT_YOUTUBE:g" | \
		sed -e "s:MY_IPTV_SERVICE_PROVIDER:$TVHEADEND_IPTV_NETWORK_NAME:g" \
			> $BINARY_PREFIX/jambulatv-yplayer 
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-yplayer 
#
# Schedule IPTV maintenance using systemd timers
# ----------------------------------------------
# Copy systemd service file if not present
[[ -e $SYSTEMD_UNITS_DIR_USER/jambulatv-iptv-maintenance.service ]] || \
cp -v $PROJECT_INIT_SCRIPTS_DIR/jambulatv-iptv-maintenance.service $SYSTEMD_UNITS_DIR_USER/
# Copy systemd timer file if not present
[[ -e $SYSTEMD_UNITS_DIR_USER/jambulatv-iptv-maintenance.timer ]] || \
cp -v $PROJECT_INIT_SCRIPTS_DIR/jambulatv-iptv-maintenance.timer $SYSTEMD_UNITS_DIR_USER/
# Enable and start timer
systemctl enable jambulatv-iptv-maintenance.timer
systemctl start jambulatv-iptv-maintenance.timer

# Copy logrotate file to reduce size of iptv logs
cat $PROJECT_CONFIGS_DIR/logrotate/iptv | \
	sed "s:MY_TVHEADEND_IPTV_LOG_DIR:$TVHEADEND_IPTV_LOG_DIR:g" \
		> $LOGROTATE_CONF_DIR/iptv
}

iptv_icons_add () {
# Create picons directory if it does not exist
[ -d $PROJECT_SYSTEM_ICONS_DIR ] || mkdir -p $PROJECT_SYSTEM_ICONS_DIR
# Copy IP TV picons e.g. logos to JambulaTV share directory
rsync -avq $PROJECT_CONTRIB_DIR/tv/picons/IPTV $PROJECT_SYSTEM_ICONS_DIR/
# Get WWW User and Group
set_www_user_group
# Give permissons to TV Icons
chown -R $WWW_USER:$WWW_GROUP $PROJECT_SYSTEM_ICONS_DIR/IPTV
}

iptv_builder_install () {
# Unpack sources
rsync -avq --delete-after $PROJECT_GITHUB_DIR/jambula-iptv-builder $SOURCESDIR/
# Create XMLTV directory in multimedia user's home directory
[ -d $EPG_XMLTV_GUIDE_DIR ] || mkdir -p $EPG_XMLTV_GUIDE_DIR
# Change iptv-builder directory permissions to multimedia user
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $EPG_XMLTV_GUIDE_DIR
}

epg_tvheadend_configure () {
# Create XMLTV directory in multimedia user's home directory
[ -d $EPG_XMLTV_GUIDE_DIR ] || mkdir -p $EPG_XMLTV_GUIDE_DIR
# Create tvheadend epggrab directory if it does not exist
[ -d $TVHEADEND_EPG_GRAB_DIR ] || mkdir -p $TVHEADEND_EPG_GRAB_DIR

# Copy xmltv system config for selected grabber
[ -e $PROJECT_CONTRIB_DIR/tv/epg/xmltv/${XMLTV_GRABBER}.conf ] && \
	cp -v $PROJECT_CONTRIB_DIR/tv/epg/xmltv/${XMLTV_GRABBER}.conf $EPG_XMLTV_GUIDE_DIR

# Create xmltv supplement maps directory
[ -d $EPG_XMLTV_GUIDE_DIR/supplement/${XMLTV_GRABBER} ] || \
	mkdir -p $EPG_XMLTV_GUIDE_DIR/supplement/${XMLTV_GRABBER}

# Copy xmltv system maps for grabbers like uk_tvguide if available
[ -e $PROJECT_CONTRIB_DIR/tv/epg/xmltv/maps/${XMLTV_GRABBER}.map.conf ] && \
	cp -v $PROJECT_CONTRIB_DIR/tv/epg/xmltv/maps/${XMLTV_GRABBER}.map.conf $EPG_XMLTV_GUIDE_DIR/supplement/${XMLTV_GRABBER}/${XMLTV_GRABBER}.map.conf

# Create epg grab config
cat > $TVHEADEND_EPG_GRAB_DIR/config <<EOF
{
	"channel_rename": false,
	"channel_renumber": false,
	"channel_reicon": true,
	"epgdb_periodicsave": 0,
	"cron": "# Default config (00:04 and 12:04 everyday)\n4 */12 * * *",
	"ota_initial": true,
	"ota_cron": "# Default config (02:04 and 14:04 everyday)\n4 2 * * *\n4 14 * * *",
	"ota_timeout": 600,
	"modules": {
		"$BINARY_PREFIX/${XMLTV_GRABBER}": {
			"class": "epggrab_mod_int_xmltv",
			"dn_chnum": 0,
			"name": "XMLTV: JambulaTV Combined Grabber",
			"type": "Internal",
			"enabled": true,
			"priority": 3
		},
		"xmltv": {
			"class": "epggrab_mod_ext_xmltv",
			"dn_chnum": false,
			"scrape_extra": false,
			"scrape_onto_desc": false,
			"use_category_not_genre": false,
			"name": "XMLTV",
			"type": "External",
			"enabled": true,
			"priority": 3
		},
		"eit": {
			"class": "epggrab_mod_ota",
			"name": "EIT: DVB Grabber",
			"type": "Over-the-air",
			"enabled": true,
			"priority": 1
		}
	}
}
EOF

# Change xmltv directory permissions to multimedia user
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $EPG_XMLTV_GUIDE_DIR
# Change epg directory permissions to multimedia user
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $TVHEADEND_EPG_GRAB_DIR

# Restart TVHeadend
sudo systemctl restart tvheadend.service
}

epg_xmltv_guide_sources () {
# EPG data sources by country
case $EPG_XMLTV_COUNTRY in
UK)
EPG_XMLTV_GUIDE_NAME="the United Kingdom (UK)"
EPG_XMLTV_GUIDE_FILE=$EPG_XMLTV_GUIDE_DIR/tvguide.uk.xml
EPG_XMLTV_GUIDE_URL="http://epg.koditvepg.com/GB/guide.xml"
;;
US)
EPG_XMLTV_GUIDE_NAME="the United States of America (USA)"
EPG_XMLTV_GUIDE_FILE=$EPG_XMLTV_GUIDE_DIR/tvguide.us.xml
EPG_XMLTV_GUIDE_URL="http://epg.koditvepg.com/US/guide.xml"
;;
esac
}

cctv_tvheadend_network_add () {
# Remove previous temp script file for creating CCTV network
[[ -e $TVHEADEND_CCTV_CREATE_NETWORK_TEMP_FILE ]] && sudo rm -f $TVHEADEND_CCTV_CREATE_NETWORK_TEMP_FILE 

# Add CCTV network creation command to temp file
cat >> $TVHEADEND_CCTV_CREATE_NETWORK_TEMP_FILE <<EOF
# $TVHEADEND_CCTV_NETWORK_NAME
# -------------------------------
# Add CCTV network to backend
$CURL_CMD $CURL_OPTS -d "class=iptv_auto_network" -d "\$(printf $(echo -n $(cat <<EOT
conf='{
	"url": "http://$TVHEADEND_HTTP_IP:$PLAYLISTS_PORT/$PLAYLISTS_CCTV_LOCAL_M3U_FILE",
	"channel_number": 980,
	"refetch_period": 1440,
	"ssl_peer_verify": false,
	"tsid_zero": true,
	"remove_args": "",
	"scan_create": false,
	"service_sid": 0,
	"priority": 3,
	"spriority": 3,
	"max_streams": 0,
	"max_bandwidth": 0,
	"max_timeout": 180,
	"icon_url": "file://$PROJECT_SYSTEM_ICONS_DIR/CCTV",
	"remove_scrambled": true,
	"networkname": "$TVHEADEND_CCTV_NETWORK_NAME",
	"pnetworkname": "$PROJECT_NAME",
	"nid": 0,
	"autodiscovery": 0,
	"bouquet": false,
	"skipinitscan": true,
	"idlescan": false,
	"sid_chnum": false,
	"ignore_chnum": false,
	"satip_source": 0,
	"localtime": 180,
	"wizard": false
}'
EOT
)
))" $TVHEADEND_API_URL/mpegts/network/create > /dev/null 2>&1
#
# Notify - CCTV network added
logger -s -t $(basename $0) "Added CCTV network [$TVHEADEND_CCTV_NETWORK_NAME]"

EOF

if [[ -e $TVHEADEND_CCTV_CREATE_NETWORK_TEMP_FILE ]];
then
# Prepare create CCTV network script
sed -i '1i #!/bin/sh' "$TVHEADEND_CCTV_CREATE_NETWORK_TEMP_FILE"
chmod 755 $TVHEADEND_CCTV_CREATE_NETWORK_TEMP_FILE

# Run script to create CCTV network
$TVHEADEND_CCTV_CREATE_NETWORK_TEMP_FILE

# Pause for a bit to allow CCTV network to be added properly
sleep 3
# Remove temp script file
rm -f $TVHEADEND_CCTV_CREATE_NETWORK_TEMP_FILE
fi
}

cctv_tvheadend_configure () {
# Add CCTV network
cctv_tvheadend_network_add

# Copy default CCTV list for JambulaTV if not existent - see playlists_configure
if [[ -e $PROJECT_CONTRIB_DIR/tv/iptv/$PLAYLISTS_CCTV_LOCAL_M3U_FILE && ! -e $PLAYLISTS_DIRECTORY/$PLAYLISTS_CCTV_LOCAL_M3U_FILE ]];
then
cp -rv $PROJECT_CONTRIB_DIR/tv/iptv/$PLAYLISTS_CCTV_LOCAL_M3U_FILE $PLAYLISTS_DIRECTORY
# Change playlist directory ownership to multimedia user i.e. jambula
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PLAYLISTS_DIRECTORY
fi

# Schedule CCTV maintenance using systemd timers
# ----------------------------------------------
# Copy systemd service file if not present
[[ -e $SYSTEMD_UNITS_DIR_USER/jambulatv-cctv-maintenance.service ]] || \
cp -v $PROJECT_INIT_SCRIPTS_DIR/jambulatv-cctv-maintenance.service $SYSTEMD_UNITS_DIR_USER/
# Copy systemd timer file if not present
[[ -e $SYSTEMD_UNITS_DIR_USER/jambulatv-cctv-maintenance.timer ]] || \
cp -v $PROJECT_INIT_SCRIPTS_DIR/jambulatv-cctv-maintenance.timer $SYSTEMD_UNITS_DIR_USER/
# Enable and start timer
systemctl enable jambulatv-cctv-maintenance.timer
systemctl start jambulatv-cctv-maintenance.timer

# Copy jambulatv-camplayer used to play web based CCTV streams via TVHeadend
[ -e $BINARY_PREFIX/jambulatv-camplayer ] || cp -v $PROJECT_BIN_DIR/jambulatv-camplayer $BINARY_PREFIX/
#
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-camplayer 
}

cctv_icons_add () {
# Create picons directory if it does not exist
[ -d $PROJECT_SYSTEM_ICONS_DIR ] || mkdir -p $PROJECT_SYSTEM_ICONS_DIR
# Copy CCTV picons e.g. logos to JambulaTV share directory
rsync -av $PROJECT_CONTRIB_DIR/tv/picons/CCTV $PROJECT_SYSTEM_ICONS_DIR/
# Get WWW User and Group
set_www_user_group
# Give permissons to TV Icons
chown -R $WWW_USER:$WWW_GROUP $PROJECT_SYSTEM_ICONS_DIR/CCTV
}

kodi_configure () {
# JambulaTV: Start Linux Desktop i.e. PC Mode after quiting Kodi
cp -v ${KODI_STANDALONE_TOOL} ${KODI_STANDALONE_TOOL}.orig
#
cat >> ${KODI_STANDALONE_TOOL} <<EOF2
# JambulaTV: Go to PC Mode after quiting Kodi i.e. Start Linux Desktop
at now <<EOF
$BINARY_PREFIX/jambulatv-computer-mode on
EOF
EOF2
#
# MySQL DB for Kodi
# -----------------
# Enable and start mysql service if it is not running
systemctl -q is-active mysqld.service || systemctl enable mysqld.service
systemctl -q is-active mysqld.service || systemctl start mysqld.service
# Change MySQL password if default is empty
mysqladmin password $MYSQL_ROOT_PASSWORD > /dev/null 2>&1 || clear && echo "Default MySQL password was already changed! Proceeding ..." && sleep 5
#
# Drop existing kodi user first
#echo "DROP USER '$KODI_DB_USER'@'%';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
# Create Kodi User
echo "CREATE USER '$KODI_DB_USER'@'%' IDENTIFIED BY '$KODI_DB_PASS';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
#
# Create Kodi Databases
for KODI_DB in $KODI_DB_VIDEO $KODI_DB_MUSIC;
do
# Grant Usage privileges and access from all hosts i.e. anywhere, 127.0.0.1, and localhost
echo "GRANT USAGE ON $KODI_DB.* TO '$KODI_DB_USER'@'%' IDENTIFIED BY '$KODI_DB_PASS';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
echo "GRANT USAGE ON $KODI_DB.* TO '$KODI_DB_USER'@'127.0.0.1' IDENTIFIED BY '$KODI_DB_PASS';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
echo "GRANT USAGE ON $KODI_DB.* TO '$KODI_DB_USER'@'localhost' IDENTIFIED BY '$KODI_DB_PASS';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
done
#
# Grant ALL privileges on kodi databases i.e. MyVideo%.db MyMusic%db
echo "GRANT ALL PRIVILEGES ON \`kodi_%\`.* TO '$KODI_DB_USER'@'%';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
#
# Reconfigure PolicyKit to enable poweroff, suspend and similiar functions 
cat > /etc/polkit-1/localauthority/50-local.d/kodi_shutdown.pkla <<EOF
[Actions for jambula user]
Identity=unix-user:$AUTOLOGIN_USER
Action=org.freedesktop.devicekit.power.*;org.freedesktop.upower.*;org.freedesktop.consolekit.system.*;org.freedesktop.login1.*
ResultAny=yes
EOF

# Create userdata directory
# -------------------------
[ -d $KODI_USER_DATA ] || mkdir -p $KODI_USER_DATA

# Generate sources.xml file
# -------------------------
cat $PROJECT_CONFIGS_DIR/kodi/sources.xml | \
	sed -e "s:USER_TV_SHOWS_DIR:$USER_TV_SHOWS_DIR:g" | \
	sed -e "s:USER_MOVIES_DIR:$USER_MOVIES_DIR:g" | \
	sed -e "s:USER_TV_RECORDINGS_DIR:$USER_TV_RECORDINGS_DIR:g" | \
	sed -e "s:PODCASTS_DIRECTORY:$PODCASTS_DIRECTORY:g" | \
	sed -e "s:USER_MUSIC_DIR:$USER_MUSIC_DIR:g" | \
	sed -e "s:USER_PICTURES_DIR:$USER_PICTURES_DIR:g" | \
   	sed -e "s:TORRENTS_COMPLETED_DIRECTORY:$TORRENTS_COMPLETED_DIRECTORY:g" | \
	sed -e "s:VLM_VOD_DIRECTORY:$VLM_VOD_DIRECTORY:g" | \
	sed -e "s:ZONEMINDER_CONTENT_DIR:$ZONEMINDER_CONTENT_DIR:g" | \
	sed -e "s:BACKUPS_DIR:$BACKUPS_DIR:g" | \
	sed -e "s:NEXTCLOUD_DATA_DIRECTORY:$NEXTCLOUD_DATA_DIRECTORY:g" | \
	sed -e "s:AUTOLOGIN_USER_HOME_DIR:$AUTOLOGIN_USER_HOME_DIR:g" > $KODI_USER_DATA/sources.xml
#
# Copy sources, rss xml file, autostart script
for KODI_CONFIG in \
	RssFeeds.xml
do
cp -v $PROJECT_CONFIGS_DIR/kodi/$KODI_CONFIG $KODI_USER_DATA/
done
#
# Copy autoexec.py startup file for kodi if not already added elsewhere - keep this separate from above
[ -e $KODI_USER_DATA/autoexec.py ] || cp -v $PROJECT_CONFIGS_DIR/kodi/autoexec.py $KODI_USER_DATA
#
# Make startup script executable
chmod 755 $KODI_USER_DATA/autoexec.py
#
# Add Jambula customized advancedsettings file
cat $PROJECT_CONFIGS_DIR/kodi/advancedsettings.xml | \
	sed "s:KODI_DB_VIDEO:$KODI_DB_VIDEO:g" | \
	sed "s:KODI_DB_MUSIC:$KODI_DB_MUSIC:g" | \
	sed "s:KODI_DB_USER:$KODI_DB_USER:g" | \
	sed "s:KODI_DB_PASS:$KODI_DB_PASS:g" \
	> $KODI_USER_DATA/advancedsettings.xml

# Add Jambula customized guisettings file depending on weather Live TV setup has been requested for
if [ "$TVH_DVBT_CONFIG_REQUESTED" = "yes" ];
then
KODI_GUISETTINGS_FILE=$PROJECT_CONFIGS_DIR/kodi/skin.$KODI_PREFERRED_SKIN/guisettings.with.pvr.xml
else
KODI_GUISETTINGS_FILE=$PROJECT_CONFIGS_DIR/kodi/skin.$KODI_PREFERRED_SKIN/guisettings.without.pvr.xml
fi
cat $KODI_GUISETTINGS_FILE | \
	sed -e "s:KODI_HTTP_USER:$KODI_HTTP_USER:g" | \
   	sed -e "s:KODI_HTTP_PASS:$KODI_HTTP_PASS:g" | \
	sed -e "s:KODI_HTTP_PORT:$KODI_HTTP_PORT:g" | \
   	sed -e "s:SMB_WORKGROUP:$SMB_WORKGROUP:g" \
	> $KODI_USER_DATA/guisettings.xml
# Give permissions to multimedia user for config directory
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $KODI_CONFIG_DIR
#
# Create jambulatv log directory
[ -d $PROJECT_SYSTEM_LOG_DIR ] || mkdir -p $PROJECT_SYSTEM_LOG_DIR
# Give jambulatv user permissions to log directory
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PROJECT_SYSTEM_LOG_DIR
#
# Create some default media directories if they don't exist
for FOLDER in $USER_TV_SHOWS_DIR $USER_MOVIES_DIR $USER_TV_RECORDINGS_DIR $PODCASTS_DIRECTORY $USER_MUSIC_DIR $USER_PICTURES_DIR
do
cd $MULTIMEDIA_USER_HOME_DIR
# Create directory
[ -d $FOLDER ] || mkdir -p $FOLDER
# Give permissons
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $FOLDER
done
}

kodi_skin_customization () {
# Preferred Skin
case $KODI_PREFERRED_SKIN in
confluence)
# Create backgrounds directory if it does not exist for preferred skin
[ -d $KODI_SYSTEM_ADDONS/skin.$KODI_PREFERRED_SKIN/backgrounds ] || \
	mkdir -p $KODI_SYSTEM_ADDONS/skin.$KODI_PREFERRED_SKIN/backgrounds
# Copy default background for preferred skin
cp -fv $PROJECT_IMAGES_DIR/kodi/backgrounds/default_bg.jpg \
	$KODI_SYSTEM_ADDONS/skin.$KODI_PREFERRED_SKIN/backgrounds/SKINDEFAULT.jpg
# Change top left logo at Home screen of default skin i.e. confluence
sed -i "s:<texture>kodi-logo.png</texture>:<texture>jambulatv-logo.png</texture>:" \
	$KODI_SYSTEM_ADDONS/skin.$KODI_PREFERRED_SKIN/720p/Home.xml
;;

aeonmq6)
# Unzip skin files to addons directory
for SKIN_ADDON in \
context.cinemavision \
script.cinemavision \
script.aeonmq6.extrapack \
resource.uisounds.aeonmq6 \
skin.aeonmq6
do
unzip -o -d $KODI_SYSTEM_ADDONS $PROJECT_ZIPS_DIR/kodi-addons/$KODI_CODENAME/skin.$KODI_PREFERRED_SKIN/$SKIN_ADDON*.zip
done
# Add custom backgrounds for this preferred skin
rsync -av $PROJECT_IMAGES_DIR/kodi/backgrounds/skin.$KODI_PREFERRED_SKIN/ \
	$KODI_SYSTEM_ADDONS/skin.$KODI_PREFERRED_SKIN/backgrounds/
;;

titan)
# Copy preferred skin files to addons directory
rsync -av --delete-after $PROJECT_GITHUB_DIR/kodi-addons/skin.$KODI_PREFERRED_SKIN \
$KODI_USER_ADDONS/

# Unzip skin related files to addons directory
for SKIN_ADDON in \
resource.images.backgroundoverlays.basic \
resource.images.skinbackgrounds.titanium \
resource.images.skinicons.wide \
resource.uisounds.titan.modern \
script.skin.helper.backgrounds \
script.skin.helper.service \
script.skin.helper.skinbackup \
script.skin.helper.widgets \
script.skinshortcuts
do
unzip -o -d $KODI_USER_ADDONS $PROJECT_ZIPS_DIR/kodi-addons/$KODI_CODENAME/skin.$KODI_PREFERRED_SKIN/$SKIN_ADDON*.zip

# Debugging
#echo
#_install_pause_check_4_errors_
#echo

# Add enabling of skin related addons to script that runs at startup
cat >> $KODI_USER_DATA/Database/jambula_addons.sh <<EOT

# Enable $SKIN_ADDON
sqlite3 $KODI_USER_DATA/Database/Addons27.db 'update installed set enabled=1 where addonid=='"'$SKIN_ADDON'"';'
EOT
#
done

# Add custom backgrounds for this preferred skin
rsync -av $PROJECT_IMAGES_DIR/kodi/backgrounds/skin.$KODI_PREFERRED_SKIN/ \
	$KODI_USER_ADDONS/resource.images.skinicons.wide/resources/

# Adjust custom Logo image dimensions
rsync -av $PROJECT_CONFIGS_DIR/kodi/skin.titan/IncludesHeader.xml \
	$KODI_USER_ADDONS/skin.$KODI_PREFERRED_SKIN/1080i/

# Skin Settings
[ -d $KODI_ADDON_DATA_DIR/skin.$KODI_PREFERRED_SKIN ] || mkdir -p $KODI_ADDON_DATA_DIR/skin.$KODI_PREFERRED_SKIN
# Copy custom skin settings
rsync -av $PROJECT_CONFIGS_DIR/kodi/addon_data/skin.$KODI_PREFERRED_SKIN/settings.xml \
	$KODI_ADDON_DATA_DIR/skin.$KODI_PREFERRED_SKIN/
# Skin shortcuts i.e. Custom menus
rsync -av $PROJECT_CONFIGS_DIR/kodi/addon_data/script.skinshortcuts/ \
	$KODI_ADDON_DATA_DIR/script.skinshortcuts/
# Give permissions to multimedia user for skin addon_data directory
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $KODI_ADDON_DATA_DIR/skin.$KODI_PREFERRED_SKIN
;;
esac

# Copy custom top left logo icon
cp -fv $PROJECT_IMAGES_DIR/kodi/logos/skin.$KODI_PREFERRED_SKIN/top-left.png \
	$KODI_SHARE_DIR/media/jambulatv-logo.png
#
# Copy Splash image for startup
cp -fv $PROJECT_IMAGES_DIR/kodi/logos/skin.$KODI_PREFERRED_SKIN/Splash.png $KODI_SHARE_DIR/media/

# Customize strings.po for JambulaTV
patch -p1 $KODI_SYSTEM_ADDONS/resource.language.en_gb/resources/strings.po < $PROJECT_PATCHES_DIR/kodi.strings_po.patch

# Fix Shutdown Main Menu Button bug, if running kodi 15
[[ "$KODI_CODENAME" = "Isengard" ]] && \
sed -i "s:XBMC.ShutDown():System.Exec(systemctl poweroff):g" $KODI_SYSTEM_ADDONS/skin.$KODI_PREFERRED_SKIN/720p/DialogButtonMenu.xml

# Give permissions to multimedia user for config directory
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $KODI_CONFIG_DIR

# Add enabling of default skin to jambula addons script that runs at startup
cat >> $KODI_USER_DATA/Database/jambula_addons.sh <<EOT

# Enable default skin
sqlite3 $KODI_USER_DATA/Database/Addons27.db 'update installed set enabled=1 where addonid=='"'skin.$KODI_PREFERRED_SKIN'"';'
EOT
}

kodi_scripts () {
# JambulaTV Library clean, updates, scan script
cat $PROJECT_BIN_DIR/jambulatv-library | \
	sed -e "s:MY_MYSQL_ROOT_PASSWORD:$MYSQL_ROOT_PASSWORD:g" | \
	sed -e "s:MY_KODI_DB_PREFIX:$KODI_DB_PREFIX:g" | \
	sed -e "s:MY_KODI_CONFIG_DIR:$KODI_CONFIG_DIR:g" | \
	sed -e "s:MY_USER_TV_SHOWS_DIR:$USER_TV_SHOWS_DIR:g" | \
	sed -e "s:MY_USER_MOVIES_DIR:$USER_MOVIES_DIR:g" | \
	sed -e "s:MY_USER_MUSIC_DIR:$USER_MUSIC_DIR:g" > $KODI_LIBRARY_TOOL
# Make script executable
chmod 755 $KODI_LIBRARY_TOOL
#
# Picture-In-Picture
# Copy jambulatv-pip script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-pip ] || cp -v $PROJECT_BIN_DIR/jambulatv-pip $BINARY_PREFIX/
# Create kodi scripts directory
[ -d $KODI_SHARE_DIR/scripts ] || mkdir -p $KODI_SHARE_DIR/scripts
#
# kodi-api-controller
cat $PROJECT_BIN_DIR/jambulatv-kodi-controller | \
		sed -e "s:MY_KODI_HTTP_IP:$KODI_HTTP_IP:g" | \
		sed -e "s:MY_KODI_HTTP_PORT:$KODI_HTTP_PORT:g" | \
		sed -e "s:MY_KODI_HTTP_USER:$KODI_HTTP_USER:g" | \
		sed -e "s:MY_KODI_HTTP_PASS:$KODI_HTTP_PASS:g" | \
		sed -e "s:MY_TMPDIR:$TMPDIR:g" | \
		sed -e "s:MY_KODI_LOG:$KODI_LOG_FILE:g" | \
		sed -e "s:MY_KODI_DATABASE:$KODI_USER_DATABASE_DIR:g" | \
		sed -e "s:MY_TVHEADEND_HTTP_IP:$TVHEADEND_HTTP_IP:g" | \
		sed -e "s:MY_TVHEADEND_HTTP_PORT:$TVHEADEND_HTTP_PORT:g" | \
		sed -e "s:MY_USER_VIDEOS_DIR:$USER_VIDEOS_DIR:g" | \
		sed -e "s:MY_USER_MUSIC_DIR:$USER_MUSIC_DIR:g" \
			> $KODI_CONTROLLER_TOOL
# Make script executable
chmod 755 $KODI_CONTROLLER_TOOL
# Copy kodi wrapper scripts e.g. time, pip
cp -v $PROJECT_CONTRIB_DIR/scripts/kodi_*.py $KODI_SHARE_DIR/scripts
}

kodi_jambulatv_service_configure () {
# Reinstate default to graphical.target
systemctl set-default graphical.target
# Disable lxdm - We dont need as default
systemctl disable lxdm.service
# Disable display-manager.service - We dont need as default
for UNIT in display-manager.service
do
# Remove UNIT file
[ -f $SYSTEMD_UNITS_DIR_USER/$UNIT ] && rm -f $SYSTEMD_UNITS_DIR_USER/$UNIT
[ -f $SYSTEMD_UNITS_DIR_SYSTEM/$UNIT ] && rm -f $SYSTEMD_UNITS_DIR_SYSTEM/$UNIT
done
#
# Copy JambulaTV wrapper for startup services, if none exists in bin directory
[ -e $BINARY_PREFIX/JambulaTV ] || cp -v $PROJECT_BIN_DIR/JambulaTV $BINARY_PREFIX/
# Copy jambulatv@.service file
cp -v $PROJECT_INIT_SCRIPTS_DIR/jambulatv@.service $SYSTEMD_UNITS_DIR_SYSTEM/
# Start kodi instance at boot time
ln -s $SYSTEMD_UNITS_DIR_SYSTEM/jambulatv@.service $SYSTEMD_UNITS_DIR_USER/multi-user.target.wants/jambulatv@kodi.service
# Reload services daemon
systemctl --system daemon-reload
}

kodi_input_configure () {
# Prevent IR remotes from being seen as Keyboards
cat > $XORG_CONF_DIR/90-jambulatv-remotes.conf << EOF
# Streamzap Remote
Section "InputClass"
    	Identifier "Ignore Streamzap IR as KEYBOARD or MOUSE"
	MatchProduct "Streamzap IR"
    	MatchIsKeyboard "true"    	
    	Option "Ignore" "true"
EndSection

# PCTV Remote
Section "InputClass"
    	Identifier "Ignore em28xx IR as KEYBOARD or MOUSE"
	MatchProduct "em28xx IR"
    	MatchIsKeyboard "true"    	
    	Option "Ignore" "true"
EndSection

# MCE Remote
Section "InputClass"
    	Identifier "Ignore MCE IR as KEYBOARD or MOUSE"
	MatchProduct "MCE IR"
    	MatchIsKeyboard "true"    	
    	Option "Ignore" "true"
EndSection
EOF
}

inputlirc_install () {
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/inputlirc*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v inputlirc* inputlirc
cd $INSTALL_SRC_DIR/inputlirc
# Change prefix in Makefile
sed -i "s:PREFIX ?= /usr/local:PREFIX ?= /usr:g" Makefile
# Compile
make_install_jambulatv
}

inputlirc_configure () {
# Copy udev rules 4 remotes - rename to /dev/input/jambulatv-remote instead of ../eventX
case "$IR_REMOTE" in
vr-1100)
# VR-1100
cat > $UDEV_RULES_DIR/96-jambulatv.usb-remotes.rules <<EOF
# VR-1100
KERNEL=="event*",SUBSYSTEM=="input",ATTRS{idVendor}=="05a4",ATTRS{idProduct}=="9881",IMPORT{program}="input_id %p"
KERNEL=="event*",SUBSYSTEM=="input",ATTRS{idVendor}=="05a4",ATTRS{idProduct}=="9881",ENV{ID_INPUT_KEYBOARD}=="1",SYMLINK="input/jambulatv-remote0"
KERNEL=="event*",SUBSYSTEM=="input",ATTRS{idVendor}=="05a4",ATTRS{idProduct}=="9881",ENV{ID_INPUT_MOUSE}=="1",SYMLINK="input/jambulatv-remote1"
EOF
;;

hauppauge)
# Hauppauge
cat > $UDEV_RULES_DIR/96-jambulatv.usb-remotes.rules <<EOF
# Hauppauge WinTV MiniStick
KERNEL=="event*", ATTRS{idVendor}=="2040", ATTRS{idProduct}=="c000", MODE="0666", SYMLINK="input/jambulatv-remote0"
EOF
;;

*)
cat > $UDEV_RULES_DIR/96-jambulatv.usb-remotes.rules <<EOF
# August DVB-T2
KERNEL=="event*", ATTRS{idVendor}=="0572", ATTRS{idProduct}=="c688", MODE="0666", SYMLINK="input/jambulatv-remote0"
# Pinnacle PCTV 290e
#KERNEL=="event*", ATTRS{idVendor}=="2013", ATTRS{idProduct}=="024f", MODE="0666", SYMLINK="input/jambulatv-remote0"
EOF

;;
esac
#
# Reload udev
/usr/sbin/udevadm control --reload && udevadm trigger --action=add
#
#
# Add Environment file for Systemd
cat > $SYSCONFIG_DIR/inputlirc <<EOF
LIRC_OPTIONS="-r $INPUTLIRC_REPEAT_RATE -g -m 0 -c"
LIRC_DEVICE="/dev/input/jambulatv-remote0 /dev/input/jambulatv-remote1"
IR_PROTOCOLS="$IR_PROTOCOLS"
IR_REPEAT_DELAY=$IR_REPEAT_DELAY
IR_REPEAT_PERIOD=$IR_REPEAT_PERIOD
EOF
#
# If ir-keytable.cfg exists
if [ -e $PROJECT_CONTRIB_DIR/remotes/$IR_REMOTE/ir-keytable.cfg ];
then
# Copy ir-key tables for remote - used in start file
cp -v $PROJECT_CONTRIB_DIR/remotes/$IR_REMOTE/ir-keytable.cfg $CONFDIR/lirc
# Add IR keytable to Environment file for Systemd
cat >> $SYSCONFIG_DIR/inputlirc <<EOF
IR_KEYTABLE="$CONFDIR/lirc/ir-keytable.cfg"
EOF
#
# Copy inputlircd systemd file  - with keytable
cp -v $PROJECT_INIT_SCRIPTS_DIR/inputlircd.with.keytable.service $SYSTEMD_UNITS_DIR_USER/inputlircd.service

else
# Copy inputlircd systemd file - without keytable
cp -v $PROJECT_INIT_SCRIPTS_DIR/inputlircd.no.keytable.service $SYSTEMD_UNITS_DIR_USER/inputlircd.service

fi
#
# Enable inputlircd if needed
systemctl enable inputlircd.service
#
# Display Inputlirc's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
InputLirc / Remote
==================
% I have configured inputlirc to read the remote at:

  LIRC_DEVICE="/dev/input/jambulatv-remote0 /dev/input/jambulatv-remote1"

% Take a look at: $UDEV_RULES_DIR/96-jambulatv.usb-remotes.rules 
  and ensure that your remote devices will be renamed to the above after plugging in

  For help, use: ir-keytable
#
EOF
}

kodi_lircmap_configure () {
# Use either lircd or inputlirc
case $IR_DAEMON in
lircd)
# Copy lircd.conf file
cp -rv $PROJECT_CONTRIB_DIR/remotes/$IR_REMOTE/lircd.conf $CONFDIR/lirc
cp -v $PROJECT_CONTRIB_DIR/remotes/$IR_REMOTE/Lircmap.xml $KODI_SYSTEM_SYS
# Enable and start lircd service
systemctl enable lircd.service
systemctl start lircd.service
;;
inputlirc)
# Disable lircd.service
systemctl disable lircd.service
# Remove LircMap in Home if any exists
[ ! -e $KODI_USER_DATA/Lircmap.xml ] || \
	mv -v $KODI_USER_DATA/Lircmap.xml $KODI_USER_DATA/Lircmap.xml.bak
# Copy contributed Lircmap.xml
cp -v $PROJECT_CONTRIB_DIR/remotes/$IR_REMOTE/Lircmap.xml $KODI_SYSTEM_SYS
# Copy contributed remote.xml
cp -v $PROJECT_CONTRIB_DIR/remotes/$IR_REMOTE/remote.xml $KODI_SYSTEM_SYS/keymaps
;;
esac
}

kodi_remote_configure () {
kodi_input_configure
kodi_lircmap_configure 
# If inputlirc
if [ "$IR_DAEMON" = "inputlirc" ];
then
inputlirc_install
inputlirc_configure
fi
}

python_xbmc_install () {
get_python_version
rsync -avz --delete-after $PROJECT_GITHUB_DIR/python-xbmc/ $INSTALL_SRC_DIR/python-xbmc/
cd $INSTALL_SRC_DIR/python-xbmc
python setup.py install --install-lib=$PYTHON_SITEDIR
}

kodi_osd_configure () {
# Copy jambulatv-osd script, if none exists in bin directory
[ -e $OSD_TOOL ] || cat $PROJECT_BIN_DIR/jambulatv-osd | \
	sed -e "s:MY_KODI_USER_DATA:$KODI_USER_DATA:g" | \
	sed -e "s:MY_KODI_SYSTEM_ADDONS:$KODI_SYSTEM_ADDONS:g" | \
	sed -e "s:MY_TMPDIR:$TMPDIR:g" | \
	sed -e "s:MY_XMPP_TOOL:$XMPP_TOOL:g" | \
	sed -e "s:USER_001_XMPP_HOST:$USER_001_XMPP_HOST:g" | \
	sed -e "s:USER_001_XMPP_USERNAME:$USER_001_XMPP_USERNAME:g" | \
	sed -e "s:USER_001_XMPP_PASSWORD:$USER_001_XMPP_PASSWORD:g" | \
	sed -e "s:USER_001_XMPP_RESOURCE:$USER_001_XMPP_RESOURCE:g" \
		> $OSD_TOOL
# Make script executable
chmod 755 $OSD_TOOL
#
# Copy XMPP tool, if none exists in bin directory
[ -e $XMPP_TOOL ] || cp -v $PROJECT_BIN_DIR/jambulatv-xmpp $XMPP_TOOL
# Make script executable
chmod 755 $XMPP_TOOL
}

livestreamer_install () {
get_python_version
# Install dependency: singledispatch
tar zxvf $PROJECT_TARBALLS_DIR/singledispatch*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v singledispatch-* singledispatch
# Compile
cd $INSTALL_SRC_DIR/singledispatch 
python setup.py install --install-lib=$PYTHON_SITEDIR

# Copy sources 
rsync -avz --delete-after $PROJECT_GITHUB_DIR/livestreamer/ $INSTALL_SRC_DIR/livestreamer/
cd $INSTALL_SRC_DIR/livestreamer
#NOTE: Install after FlexGet which pulls latest dependencies like requests
python setup.py install
}

x11_server_configure () {
# Create a new xorg.conf file
$XORG_CMD -configure :$XORG_CONF_DISPLAY 
# IMPORTANT: This disables XV video driver output - please investigate
# Insert Modes line after Display subsection - Insert line after - using sed
sed "
/SubSection \"Display\"/ a\
			Modes		\"$RES1\" \"$RES2\" \"$RES3\"
" $XORG_CONF_NEW > $XORG_CONF
# Remove xorg.conf.new file
rm -f $XORG_CONF_NEW
}

x11_superuser_permissions_configure () {
# Allow default user to use 'sudo' e.g. to start X
cat > $SUDOERS_DIR/$AUTOLOGIN_USER << EOF
# Don't require TTY
Defaults:$AUTOLOGIN_USER    !requiretty
# Set Command Aliases
Cmnd_Alias $(echo $PROJECT_NAME | tr [:lower:] [:upper:]) = $AUTOLOGIN_USER_COMMANDS, $WHATSAPP_TOOL
# Set User actions
$AUTOLOGIN_USER             ALL = NOPASSWD: $(echo $PROJECT_NAME | tr [:lower:] [:upper:])
EOF
# Change sudoer permissions
chmod 0440 $SUDOERS_DIR/$AUTOLOGIN_USER
}

x11_user_autologin_lxde_configure () {
# Backup original conf file
cp -v $LXDM_CONFIG $LXDM_CONFIG.orig
# Add auto user plus x server start options
echo "# Allow passwordless login user

[base]
autologin=$AUTOLOGIN_USER

[server]
arg=$BINARY_PREFIX/X -background none vt1 -nocursor -dpms -quiet
" > $LXDM_CONFIG
# Add LXDE sysconfig desktop file
echo "DISPLAYMANAGER=/usr/sbin/lxdm" > $SYSCONFIG_DESKTOP_FILE
# 
# Disable polkit from showing at autostart in LXDE desktop
sed -i "s|NotShowIn=GNOME;KDE;XFCE;|NotShowIn=GNOME;KDE;XFCE;LXDE;|g" $XDG_AUTOSTART_DIR/lxpolkit.desktop
}

nodm_install () {
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/nodm-$NODM_VERSION.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v nodm-* nodm
# Compile
cd $INSTALL_SRC_DIR/nodm && ./configure --prefix=$PREFIX 
make_install_jambulatv
}

autostart_freevo_nodm () {
# Copy prefdm.service file
cp -v $PROJECT_INIT_SCRIPTS_DIR/prefdm.service $SYSTEMD_UNITS_DIR_SYSTEM/
systemctl --system daemon-reload
# Enable prefdm - starts freevo script
systemctl enable prefdm.service
# Remove sysconfig desktop file - not needed by nodm
[ ! -f $SYSCONFIG_DESKTOP_FILE ] || rm -f $SYSCONFIG_DESKTOP_FILE
}

autostart_freevo_lxdm () {
# Backup original autostart file
cp -v $LXDE_AUTOSTART_FILE $LXDE_AUTOSTART_FILE.orig
echo "$GENERATE_LOCAL_CONF_TOOL
$XSET_CMD s noblank
$XSET_CMD s off
$XSET_CMD -dpms
$FREEVO_CMD recordserver
$FREEVO_CMD" > $LXDE_AUTOSTART_FILE
}

tv_cards_configure () {
cp -v $PROJECT_CONFIGS_DIR/tvcards.conf.sample $MODPROBE_DIR/tvcards.conf
}

tv_pulse_audio_configure () {
# Get needed pulseaudio variables
pulseaudio_query
# Add loopback
echo "
# TV Audio Source via loopback module
load-module module-loopback source=$TV_AUDIO_SOURCE latency_msec=26" >> $PULSE_DEFAULT_CONFIG
}

v4l_utils_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/v4l-utils-*.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v v4l-utils-* v4l-utils
# Compile
cd $INSTALL_SRC_DIR/v4l-utils && ./configure --prefix=$PREFIX \
	--libdir=$LIBDIR
make_install_jambulatv
}

plymouth_customization () {
# Add rpm macros file, so that rpmbuild will be located elsewhere
[ -e $HOME/.rpmmacros ] || echo "%_topdir $RPMBUILD_DIR" > $HOME/.rpmmacros
# Install plymouth source rpm package in temp location
rpm -Uvh $PROJECT_RPMS_DIR/plymouth-*.src.rpm
# Patch plymouth.spec file
patch -p1 $RPMBUILD_DIR/SPECS/plymouth.spec < $PROJECT_PATCHES_DIR/plymouth.spec.patch
# Change to rpmbuild dir
cd $RPMBUILD_DIR
# Rebuild plymouth
rpmbuild -bb $RPMBUILD_DIR/SPECS/plymouth.spec
# Install freshly built and customized plymouth rpm packages
rpm -Uvh --oldpackage --nodeps --force $RPMBUILD_DIR/RPMS/$(uname -m)/plymouth-*.rpm
# Remove rpm macros file
[ -e $HOME/.rpmmacros ] && rm -f $HOME/.rpmmacros
# Remove rpmbuild directory
[ -d $RPMBUILD_DIR ] && rm -rf $RPMBUILD_DIR
#
# Update System Logo for use with Plymouth themes # Do this before Update
cp -fv $PROJECT_IMAGES_DIR/jambula-labs.png $DATAROOTDIR/pixmaps/
# Change to / dir - otherwise error: "shell-init: error retrieving current directory ..."
cd /
# Select Plymouth Theme & Rebuild initrd
$PLYMOUTH_SET_CMD -R $PLYMOUTH_THEME
# BUG: Run grub2-mkconfig - fixes, changed theme/logo not showing up
grub2-mkconfig -o $GRUB2_BOOT_FILE
}

grub_settings () {
# Make a copy of grub default file
cp -v $GRUB2_DEFAULT_FILE $GRUB2_DEFAULT_FILE.orig
#
echo "# *******************************
#  Grub Settings for JambulaTV  #
# *******************************
#
GRUB_TIMEOUT=0
GRUB_DISTRIBUTOR=\"$PROJECT_NAME\"
GRUB_DEFAULT=0
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT=gfxterm
GRUB_GFXMODE=$GRUB2_VIDEO_RESOLUTION
GRUB_GFXPAYLOAD_LINUX=keep
GRUB_INIT_TUNE=\"$GRUB2_BEEP_SOUND\"
GRUB_DISABLE_RECOVERY=false
GRUB_HIDDEN_TIMEOUT=1
GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_DISABLE_LINUX_UUID=false
#
GRUB_CMDLINE_LINUX=\"vconsole.font=latarcyrheb-sun16 $([ -x /usr/sbin/rhcrashkernel-param ] && /usr/sbin/rhcrashkernel-param || :)rhgb quiet $GRUB2_CMD_OPTIONS\"" > $GRUB2_DEFAULT_FILE
# Patch 10_linux file to remove verbose 'Booting Linux' messages
#patch -p1 $GRUB2_CONFIG_DIR/10_linux < $PROJECT_PATCHES_DIR/grub_10_linux.patch
# Fix BUG: Grub error at boot time 
#cp $GRUB2_BOOT_DIR/locale/en@quot.mo $GRUB2_BOOT_DIR/locale/en.mo
# Fix True font not found error
#sed -i 's:SYSFONT="True":SYSFONT="latarcyrheb-sun16":' $SYSCONFIG_i18N_FILE
# Confirm settings
grub2-mkconfig -o $GRUB2_BOOT_FILE
}

openssl_configure () {
# Patchup Openssl conf file
patch -p1 $CONFDIR/pki/tls/openssl.cnf < $PROJECT_PATCHES_DIR/openssl_cnf.patch
}

internet_usb_3g_configure () {
# Copy Internet settings file
cat > $INTERNET_USB_ISP_CONFIG <<EOF
ISP_NAME=$ISP_NAME_DEFAULT 
USERNAME=$ISP_USERNAME_DEFAULT
PASSWORD=$ISP_PASSWORD_DEFAULT
ACCOUNT_PHONE_NUMBER=
ACCOUNT_ACCESS_CODE=
EOF
# Copy over PPP dialer, chat, ISP and modem initialization scripts if they don't exist
for SCRIPT in \
jambulatv-ppp-chat \
$PPP_DIAL_TOOL \
jambulatv-ppp-init \
jambulatv-ppp-modem-add \
jambulatv-ppp-modem-remove \
jambulatv-ppp-signal-strength \
jambulatv-ussd-query-load-airtime
do
[ -e $BINARY_PREFIX/$SCRIPT ] || cp -v $PROJECT_BIN_DIR/$SCRIPT $BINARY_PREFIX
done
# Configure 3G modems to auto start Internet when plugged in
cp -v $PROJECT_CONFIGS_DIR/udev/96-jambulatv.usb-modems.rules $UDEV_RULES_DIR/
# Reload udev
/usr/sbin/udevadm control --reload && udevadm trigger --action=add
#
# Copy systemctl init helper file used by udev rules above - DON'T enable - No [install] 
cp -v $PROJECT_INIT_SCRIPTS_DIR/3g_internet.service $SYSTEMD_UNITS_DIR_USER/
}

internet_mifi_configure () {
# Copy Internet settings file
cat > $INTERNET_WIFI_ISP_CONFIG <<EOF
ISP_NAME=$ISP_NAME_DEFAULT 
SSID="$WIFI_SSID"
SECURITY_KEY="$WIFI_SECURITY_KEY"
EOF
# Copy Connect to WiFi AP script, if it does not exist in bin directory
[ -e $CONNECT_WIFI_AP_TOOL ] || \
cat $PROJECT_BIN_DIR/jambulatv-connect-2-wifi-ap | \
	sed -e "s:MY_WIFI_STATION_INTERFACE:$WIFI_STATION_INTERFACE:g" \
		> $CONNECT_WIFI_AP_TOOL
# Make script executable
chmod 755 $CONNECT_WIFI_AP_TOOL
#
# Add jambulatv-mifi-query tool - Get stats such as data balance, battery level, signal etc
[ -e $BINARY_PREFIX/jambulatv-mifi-query ] || \
	cp -v $PROJECT_BIN_DIR/jambulatv-mifi-query $BINARY_PREFIX
}

nfs_server_configure () {
echo "# JambulaTV
$PROJECT_PARTITION *(rw,async,insecure,no_subtree_check,nohide)" > $CONFDIR/exports
# Re-export all filesystems
exportfs -v -a -r
# Enable and start NFS services
for NEEDED_SERVICE in \
rpcbind.service \
nfs-server.service \
nfs-lock.service \
nfs-idmap.service
do
systemctl start $NEEDED_SERVICE
systemctl enable $NEEDED_SERVICE
done
}

ieee_oui_configure () {
# Create directory of hardware data
[ -d $PROJECT_SYSTEM_SHARE_DIR/hwdata ] || mkdir -p $PROJECT_SYSTEM_SHARE_DIR/hwdata
# Copy oui.txt file containing OUI for all vendors - used in MAC addresses
cp -v $PROJECT_CONTRIB_DIR/hwdata/oui.txt \
	$PROJECT_SYSTEM_SHARE_DIR/hwdata
}

wired_interfaces_configure () {
# Configure hostname
HOSTNAME=$SYSTEM_IDENTIFIER.$PROJECT_NAME
# Use 'hostnamectl'
hostname $HOSTNAME 
echo "$HOSTNAME" > $HOSTNAME_FILE
# Add IP Address to hosts file
echo "# JambulaTV IP-Hostname
$NETWORK_IP_ADDRESS	$HOSTNAME $PROJECT_NAME" >> /etc/hosts
# Remove IPv6 localhost address
sed -i "s/::1/#::1/g" /etc/hosts
# Configure dhclient so it picks up specific options from DHCP server on network. 
cat > $DHCLIENT_CONFIG_FILE << EOF
interface "$NETWORK_ETHERNET_DEVICE" {
           send host-name "$HOSTNAME";
           supersede domain-search $(for DOMAIN in $PROJECT_DOMAINS;do echo -n "\"$DOMAIN\", " | sed 's:,::';done);
           prepend domain-name-servers 127.0.0.1;
           #send dhcp-requested-address 192.168.0.249;
       }
EOF
#
# Configure IP & DNS settings for wired interface - Use DHCP boot protocol
cat > $SYSCONFIG_NETWORK_SCRIPTS_DIR/ifcfg-$NETWORK_ETHERNET_DEVICE << EOF
# IP/DNS settings for $NETWORK_ETHERNET_DEVICE
HWADDR="$NETWORK_MAC_ADDRESS"
DEVICE="$NETWORK_ETHERNET_DEVICE"
TYPE="Ethernet"
BOOTPROTO="dhcp"
ONBOOT="yes"
NM_CONTROLLED="no"
IPV4_FAILURE_FATAL="yes"
IPV6INIT=no
EOF
#
# BUG: Patch network rc.d init file i.e. delay start with something
patch -p1 $CONFDIR/rc.d/init.d/network  < $PROJECT_PATCHES_DIR/network.rc.init.patch
# 
# Post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
Network Configuration
=====================
% If you need a static IP address assigned to this system.  Edit the following file:

  $DHCLIENT_CONFIG_FILE

  Uncomment the line 'send dhcp-requested-address ...' and set to desired IP address

#
EOF
}

wireless_drivers_support () {
# Copy various WiFi Drivers into firmware directory
# Intel 7260
rsync -av $PROJECT_GITHUB_DIR/linux-firmware/iwlwifi-7260-* $FIRMWARE_DIR/
# Reload this module
#rmmod -f iwlwifi
modprobe iwlwifi
}

create_list_of_wireless_devices () {
# Temp list file
WIFI_DEVICES_RAW_LIST=/tmp/list_of_wireless_devices_raw
# Remove existing wireless devices file
[ -f $WIFI_DEVICES_RAW_LIST ] && rm -f $WIFI_DEVICES_RAW_LIST
#
# Extract detected wireless device information
journalctl -b -o cat --no-pager | grep 'renamed from wlan' | awk {'print $3'} | sed 's/://g' | sort -u | while read LINE
do
# Get device biosdev name
export WIFI_DEVICE=$LINE
# Query MAC address
export MAC_ADDRESS=$(/usr/sbin/ip link show dev ${WIFI_DEVICE} | grep 'link/ether' | awk {'print $2'})
#
# Determine if device is USB or PCI based
WIFI_DEVICE_CHARS=$(echo -n $WIFI_DEVICE | wc -c)
if [ $WIFI_DEVICE_CHARS -gt 6 ]
then
export WIFI_DEVICE_TYPE=USB
else
export WIFI_DEVICE_TYPE=PCI
fi
#
# Generate temporary list of wireless devices
cat >> $WIFI_DEVICES_RAW_LIST << EOF
$WIFI_DEVICE_TYPE $WIFI_DEVICE $MAC_ADDRESS 
EOF

done
}

assign_roles_2_wireless_devices () {
# Get raw list of wireless devies
create_list_of_wireless_devices
# Set temp file variables
WIFI_DEVICES_SORTED_LIST=/tmp/list_of_wireless_devices_sorted
WIFI_DEVICES_ROLES_LIST=/tmp/list_of_wireless_devices_roles
# Remove existing wireless device roles and sorted list files
[ -f $WIFI_DEVICES_SORTED_LIST ] && rm -f $WIFI_DEVICES_SORTED_LIST
[ -f $WIFI_DEVICES_ROLES_LIST ] && rm -f $WIFI_DEVICES_ROLES_LIST
#
# Sort list of detected WiFi devices.  Starting with PCI and then USB, see if they exist in raw file
for DEVTYPE in PCI USB;
do

grep $DEVTYPE $WIFI_DEVICES_RAW_LIST > /dev/null 2>&1
DEVTYPE_EXISTS=$?
if [ "$DEVTYPE_EXISTS" = "0" ];
then
cat >> $WIFI_DEVICES_SORTED_LIST << EOF
$(grep $DEVTYPE $WIFI_DEVICES_RAW_LIST)
EOF
fi

done
#
# Set Access Point (AP) and Station (ST) device roles
LINE_NUMBER=1
cat $WIFI_DEVICES_SORTED_LIST | while read LINE
do

# Quit if no line data
[ "x$LINE" = "x" ] && break
#
if [ "$LINE_NUMBER" = 1 ];
then
WIFI_DEVICE_ROLE=WIFI_AP
else
WIFI_DEVICE_ROLE=WIFI_ST
fi
#
# Generate list of wireless devices and their roles
cat >> $WIFI_DEVICES_ROLES_LIST << EOF
$LINE $WIFI_DEVICE_ROLE
EOF
#
# Increment line no.
let "LINE_NUMBER = $LINE_NUMBER + 1"

done
}

get_wireless_interface_parameters () {
# Create list and get roles and variables
assign_roles_2_wireless_devices
# AP
WIFI_AP_BIOSDEV_NAME=$(grep WIFI_AP $WIFI_DEVICES_ROLES_LIST | awk {'print $2'})
# If configuring virtual interfaces, then set random AP/Station MAC addresses based on OEM/UUID
if [ "$VIRT_WIFI_SUPPORT" = "0" ];
then
WIFI_AP_MACADDRESS="00:E0:29:$(echo $SYSTEM_IDENTIFIER | cut -c 1-2,3-4 --output-delimiter ':' | tr '[:lower:]' '[:upper:]'):01"
else
WIFI_AP_MACADDRESS=$(grep WIFI_AP $WIFI_DEVICES_ROLES_LIST | awk {'print $3'})
fi
#
# ST
WIFI_STATION_BIOSDEV_NAME=$(grep WIFI_ST $WIFI_DEVICES_ROLES_LIST | awk {'print $2'})
# If configuring virtual interfaces, then set random AP/Station MAC addresses based on OEM/UUID
if [ "$VIRT_WIFI_SUPPORT" = "0" ];
then
WIFI_STATION_MACADDRESS="00:E0:29:$(echo $SYSTEM_IDENTIFIER | cut -c 1-2,3-4 --output-delimiter ':' | tr '[:lower:]' '[:upper:]'):02"
else
WIFI_STATION_MACADDRESS=$(grep WIFI_ST $WIFI_DEVICES_ROLES_LIST | awk {'print $3'})
fi
}

create_wifi_ap_rule () {
# Import WiFi variables
get_wireless_interface_parameters
# Create AP rule
cat > $UDEV_RULES_DIR/96-jambulatv.wifi-net.rules <<EOF
# $WIFI_AP_INTERFACE
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="$WIFI_AP_MACADDRESS", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="wlan*", NAME="$WIFI_AP_INTERFACE", TAG+="systemd", ENV{SYSTEMD_WANTS}+="coova-chilli.service"
EOF
# Reload Udev
/usr/sbin/udevadm control --reload && udevadm trigger --action=add
}

create_wifi_st_rule () {
# Import WiFi variables
get_wireless_interface_parameters
# Create ST rule if station device present
if [ "x$WIFI_STATION_MACADDRESS" != "x" ];
then
cat >> $UDEV_RULES_DIR/96-jambulatv.wifi-net.rules <<EOF
# $WIFI_STATION_INTERFACE
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="$WIFI_STATION_MACADDRESS", ATTR{dev_id}=="0x0", ATTR{type}=="1", KERNEL=="wlan*", NAME="$WIFI_STATION_INTERFACE"
EOF
fi
# Reload Udev
/usr/sbin/udevadm control --reload && udevadm trigger --action=add
}

wireless_interfaces_configure () {
# Get woreless parameters
get_wireless_interface_parameters
# Get number of PCI/WiFi devices
NUMBER_PCI_WIFI_DEVICES=$(grep PCI $WIFI_DEVICES_ROLES_LIST | wc -l)
NUMBER_USB_WIFI_DEVICES=$(grep USB $WIFI_DEVICES_ROLES_LIST | wc -l)
# Notify
cat << EOF
================================================================================

	Configuring wireless interfaces, please be patient ...

	Number of [PCI] based WiFi devices detected:  $NUMBER_PCI_WIFI_DEVICES
	Number of [USB] based WiFi devices detected:  $NUMBER_USB_WIFI_DEVICES

================================================================================

EOF

# 2 PCI Cards
if [ "$NUMBER_PCI_WIFI_DEVICES" = 2 ];
then
create_wifi_ap_rule
create_wifi_st_rule
break

# 1 PCI Card + 0 USB Stick
elif [ "$NUMBER_PCI_WIFI_DEVICES" = 1 ] && [ "$NUMBER_USB_WIFI_DEVICES" = 0 ];
then
create_wifi_ap_rule
break

# 1 PCI Card + 1 USB Stick
elif [ "$NUMBER_PCI_WIFI_DEVICES" = 1 ] && [ "$NUMBER_USB_WIFI_DEVICES" = 1 ];
then
create_wifi_ap_rule
create_wifi_st_rule
break

# 2 USB Sticks
elif [ "$NUMBER_USB_WIFI_DEVICES" = 2 ];
then
create_wifi_ap_rule
create_wifi_st_rule
break

# 1 USB Stick + 0 PCI Card
elif [ "$NUMBER_USB_WIFI_DEVICES" = 1 ] || [ "$NUMBER_PCI_WIFI_DEVICES" = 0 ];
then
create_wifi_ap_rule
break

fi
}

optical_disc_drive_configure () {
if [ -b "$ODD_DEV_NODE" ];
#
then
# Create symlinks to actual Optical disc drive node i.e. /dev/sr0
for NODE_NAME in cdrom dvd cdrw
do
[ -e /dev/$NODE_NAME ] || ln -s $ODD_DEV_NODE /dev/$NODE_NAME
done
#
# Create optical disc drive mount point
[ -d $ODD_MOUNT_POINT ] || mkdir -p $ODD_MOUNT_POINT
#
# Create fstab_entry for optical disk drive
cp -v $CONFDIR/fstab $CONFDIR/fstab.orig
cat >> $CONFDIR/fstab << EOF
#
# JambulaTV: Optical Disk Drive
#$ODD_DEV_NODE	$ODD_MOUNT_POINT	auto		rw,exec,noauto,managed	0 0
EOF
# Mount
mount -a
#
# Add jambula user to cdrom group
usermod -a -G cdrom $MULTIMEDIA_USER
#
fi
}

bash_configure () {
cat >> $CONFDIR/bashrc << EOF

# JambulaTV Bash Settings
# -----------------------
#
# Prompt (root)
PS1="[\u@\h]\nAt \@ in (\w) # "
#
# Aliases
alias ls='ls -lhrt --color=always'
alias df='df -h'
alias vi='vim'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
#
# Git
alias gc="git add -A . && git commit -a -m \$@"   
alias ga="git add -A . && git commit --amend"   
alias gs="clear && git status"   
alias gl="clear && git log"   
alias gb="clear && git branch"

# JambulaTV History
# Create user's logging directories and assign appropriate permissions
[[ -d $PROJECT_SYSTEM_LOG_DIR/bash/\$(whoami)  ]] || sudo mkdir -p $PROJECT_SYSTEM_LOG_DIR/bash/\$(whoami)
sudo chown -R \$(whoami) $PROJECT_SYSTEM_LOG_DIR/bash/\$(whoami)
#
# History file settings
export HISTTIMEFORMAT="%d-%m-%Y - %T \$(whoami) "
export HISTCONTROL=ignoreboth
export HISTSIZE=5000
shopt -s histappend
export PROMPT_COMMAND='echo "\$(history 1)" >> $PROJECT_SYSTEM_LOG_DIR/bash/\$(whoami)/history-\$(date "+%Y%m%d").log'
#
# CLI Calculator
calc(){ awk "BEGIN{ print \$* }" ;}
EOF
# Add .bashrc to autologin user's home directory
cat > $AUTOLOGIN_USER_HOME_DIR/.profile << EOF
# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Prompt (normal user)
PS1="[\u@\h]\nAt \@ in (\w) $ "
#
EOF
# Give autlogin user ownership
chown -R $AUTOLOGIN_USER:$AUTOLOGIN_USER $AUTOLOGIN_USER_HOME_DIR/.profile
}

release_info_configure () {
# Add release info
cat > $PROJECT_RELEASE_FILE <<EOF
Product:$PRODUCT_MODEL_NAME
Version:$PROJECT_VERSION

Model:$PRODUCT_MODEL_NUMBER
Serial:$PRODUCT_SERIAL_NUMBER
EOF
# Change issue/issue.net files
for ISSUEFILE in issue issue.net
do
cat > $CONFDIR/$ISSUEFILE <<EOF
$(figlet $PROJECT_NAME $PROJECT_VERSION)
EOF
done

# Add jambulatv whoami tool to bin directory if it does not exist
[ -e $BINARY_PREFIX/jambulatv-whoami ] || \
	cat $PROJECT_BIN_DIR/jambulatv-whoami | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_NAME:$JAMBULATV_SETUP_DB_NAME:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_TABLE:$JAMBULATV_SETUP_DB_TABLE:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_USER:$JAMBULATV_SETUP_DB_USER:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_PASS:$JAMBULATV_SETUP_DB_PASS:g" \
			> $BINARY_PREFIX/jambulatv-whoami 
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-whoami 
}

updates_server_info_configure () {
cat > $JAMBULATV_UPDATES_FTP_SERVER_INFO_FILE <<EOF
JAMBULATV_FTP_SERVER=$JAMBULATV_FTP_SERVER
JAMBULATV_FTP_SERVER_UPDATES_DIR=$JAMBULATV_FTP_SERVER_UPDATES_DIR
JAMBULATV_FTP_SERVER_VERSION_FILE=$JAMBULATV_FTP_SERVER_VERSION_FILE
JAMBULATV_FTP_USER=$JAMBULATV_FTP_USER
JAMBULATV_FTP_PASS=$JAMBULATV_FTP_PASS
EOF
}

motd_configure () {
cat > $CONFDIR/cron.d/motd << EOF
@daily root $BINARY_PREFIX/jambulatv-sysinfo > $CONFDIR/motd
EOF
# Copy jambulatv-sysinfo script, if it does not exist in bin directory and Add User-Agents too
[ -e $BINARY_PREFIX/jambulatv-sysinfo ] || \
	cat $PROJECT_BIN_DIR/jambulatv-sysinfo | \
		sed -e "s:MY_USER_AGENT:$DEFAULT_USER_AGENT:g" \
			> $BINARY_PREFIX/jambulatv-sysinfo 
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-sysinfo 
#
# Remove ssh lastlog
sed -i 's:#PrintLastLog yes:PrintLastLog no:' $CONFDIR/ssh/sshd_config
}

reverse_ssh_configure () {
# Create SSH server, username, password credentials that will be used for this box
cat > $REVERSE_SSH_CONFIG << EOF
REVERSE_SSH_ENABLED="YES" #YES

# Local SSH
LOCAL_SSH_USER=$LOCAL_SSH_USER
LOCAL_SSH_SERVER=$LOCAL_SSH_SERVER
LOCAL_SSH_SERVER_PORT=$LOCAL_SSH_SERVER_PORT

# Remote SSH server
MIDDLEMAN_SSH_SERVER_USER=$REMOTE_SSH_SERVER_USER
MIDDLEMAN_SSH_SERVER_PASS=$REMOTE_SSH_SERVER_PASS
MIDDLEMAN_SSH_SERVER=$REMOTE_SSH_SERVER
MIDDLEMAN_SSH_SERVER_PORT=$REMOTE_SSH_SERVER_PORT
MIDDLEMAN_SSH_SERVER_AND_USERNAME=\${MIDDLEMAN_SSH_SERVER_USER}@\${MIDDLEMAN_SSH_SERVER}
PORT_MIDDLEMAN_WILL_LISTEN_ON=$REMOTE_SSH_SERVER_RANDOM_PORT

# AutoSSH
AUTOSSH_CMD=$AUTOSSH_CMD
AUTOSSH_PORT=$AUTOSSH_PORT
AUTOSSH_GATETIME=$AUTOSSH_GATETIME

# Notification
EMAIL_VIA_GMAIL_TOOL=$EMAIL_VIA_GMAIL_TOOL
REVERSE_SSH_NOTIFICATION_METHOD=$REVERSE_SSH_NOTIFICATION_METHOD
REVERSE_SSH_NOTIFICATION_EMAIL=$REVERSE_SSH_NOTIFICATION_EMAIL
EOF

# Copy jambulatv-reverse-ssh-tunnel script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-reverse-ssh-tunnel ] || cp -v $PROJECT_BIN_DIR/jambulatv-reverse-ssh-tunnel $BINARY_PREFIX/

# Display Reverse SSH's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
SSH Reverse Tunnel
==================
% You will need to add the following SSH user at the server $REMOTE_SSH_SERVER:

  REMOTE_SSH_SERVER_USER=$REMOTE_SSH_SERVER_USER
  REMOTE_SSH_SERVER_PASS=$REMOTE_SSH_SERVER_PASS
 
% To connect to this box from the public Internet i.e. Reverse SSH:
  From any ssh capable machine you just type:

  ssh -p $REMOTE_SSH_SERVER_RANDOM_PORT $LOCAL_SSH_USER@$REMOTE_SSH_SERVER
#
EOF
}

sshuttle_install () {
get_python_version
rsync -avz --delete-after $PROJECT_GITHUB_DIR/sshuttle/ $INSTALL_SRC_DIR/sshuttle/
cd $INSTALL_SRC_DIR/sshuttle
python setup.py install --install-lib=$PYTHON_SITEDIR
# Create symbolic link in /usr/bin
[ -x $BINARY_PREFIX/sshuttle ] || ln -s $PREFIX/local/bin/sshuttle $BINARY_PREFIX/sshuttle
}

cutter_install () {
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/cutter-*.tgz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv cutter* cutter
# Compile
cd $INSTALL_SRC_DIR/cutter
# Log to build file
make_build_log
# Make
make 
# Copy to binary directory
cp -v $INSTALL_SRC_DIR/cutter/cutter $BINARY_PREFIX/
}

vcfconvert_install () {
# Copy vcfconvert php files, and link executable to php folder
rsync -avz $PROJECT_GITHUB_DIR/vcfconvert/ $DATAROOTDIR/php/vcfconvert/
ln -s $DATAROOTDIR/php/vcfconvert/vcfconvert.sh $BINARY_PREFIX/vcfconvert
}

dnsmasq_configure () {
# make backup copy
cp -pv $CONFDIR/dnsmasq.conf $CONFDIR/dnsmasq.conf.orig
# modify dnsmasq.conf file
cat $PROJECT_CONFIGS_DIR/dnsmasq.conf.sample | \
   sed -e "s:NETWORK_ETHERNET_DEVICE:$NETWORK_ETHERNET_DEVICE:g" | \
   sed -e "s:WIFI_AP_INTERFACE:$WIFI_AP_INTERFACE:g" | \
   sed -e "s:NETWORK_IP_ADDRESS:$NETWORK_IP_ADDRESS:g" | \
   sed -e "s:WIFI_IP_ADDRESS:$COOVA_SERVER_IP:g" | \
   sed -e "s:NETWORK_DOMAIN:$NETWORK_DOMAIN:g" | \
   sed -e "s:SRV_HOSTNAME:$PROJECT_NAME:g" | \
   sed -e "s:NETWORK_DHCP_RANGE:$NETWORK_DHCP_RANGE:g" \
	> $CONFDIR/dnsmasq.conf
# Make dnsmasq server as primary DNS server 
sed -i /DNS/d $SYSCONFIG_NETWORK_SCRIPTS_DIR/ifcfg-$NETWORK_ETHERNET_DEVICE
echo "DNS1=\"127.0.0.1\"" >> $SYSCONFIG_NETWORK_SCRIPTS_DIR/ifcfg-$NETWORK_ETHERNET_DEVICE
# Add resolvconf stuff if run after initial install
if [ -e /usr/sbin/resolvconf ];
then
# Add to dnsmasq file
echo "
# resolvconf stuff
conf-file=$CONFDIR/dnsmasq-conf.conf
resolv-file=$CONFDIR/dnsmasq-resolv.conf" >> $CONFDIR/dnsmasq.conf
fi
#
# Enable dnsmasq if needed
systemctl enable dnsmasq.service
# Reload dnsmasq
systemctl restart dnsmasq.service
# Reload network - DONT!!! Remote SSH connections are lost as a result
#systemctl restart network.service
}

openresolv_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/openresolv-$OPENRESOLV_VERSION.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v openresolv-* openresolv
# Configure
cd $INSTALL_SRC_DIR/openresolv && ./configure --prefix=$PREFIX  \
	--libexecdir=$LIBDIR/resolvconf --sysconfdir=$CONFDIR
# Compile
make_install_jambulatv
}

openresolv_configure () {
# Create resolvconf.conf file
echo "# JambulaTV: resolvconf file
resolv_conf=$CONFDIR/resolv.conf

name_servers=127.0.0.1
name_servers_append=\"$NETWORK_DNS_1 $NETWORK_DNS_2 $PUBLIC_DNS_SERVERS\"

resolv_conf_local_only=no

dnsmasq_conf=$CONFDIR/dnsmasq-conf.conf
dnsmasq_resolv=$CONFDIR/dnsmasq-resolv.conf" > $CONFDIR/resolvconf.conf
#
# Add to dnsmasq file
echo "
# resolvconf stuff
conf-file=$CONFDIR/dnsmasq-conf.conf
resolv-file=$CONFDIR/dnsmasq-resolv.conf" >> $CONFDIR/dnsmasq.conf
#
# Update resolvconf file
/usr/sbin/resolvconf -u

# Configure systemd service file
# ******************************
# Copy openresolv systemd file 
cp -v $PROJECT_INIT_SCRIPTS_DIR/openresolv.service $SYSTEMD_UNITS_DIR_USER/
# Enable openresolv if needed
systemctl enable openresolv.service
}

wol_configure () {
# Copy wol init script
cp -v $PROJECT_INIT_SCRIPTS_DIR/wol@.service $SYSTEMD_UNITS_DIR_USER/
# Enable wol if needed
systemctl enable wol@
# Reload systemctl
systemctl start wol@$NETWORK_ETHERNET_DEVICE
}

openvpn_configure () {
# Create openvpn config directory
[ -d $OPENVPN_CLIENT_CONFIG_DIR ] || mkdir -p $OPENVPN_CLIENT_CONFIG_DIR
# Setup client.conf file
cat > $OPENVPN_CLIENT_CONFIG_FILE << EOF
# OpenVPN client config file
client
dev tun
proto $OPENVPN_CLIENT_PROTOCOL
remote $OPENVPN_SERVER_IP $OPENVPN_SERVER_PORT 
;resolv-retry infinite
resolv-retry 0 
connect-timeout 30
nobind
persist-key
persist-tun
comp-lzo
verb 3
cipher BF-CBC
# certs/keys
ca ca.crt
cert client.crt
key client.key
EOF
# Copy sample OpenVPN certificates and keys
for KEY in ca.crt client.crt client.key
do
cp -v $OPENVPN_SAMPLE_KEYS_DIR/$KEY $OPENVPN_CLIENT_CONFIG_DIR/
done
# Display OpenVPN's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
OpenVPN
=======
% Copy OpenVPN certs and keys ca.crt client.crt client.key to:
  $OPENVPN_CLIENT_CONFIG_DIR/

% OpenVPN client start script is located at:
  $BINARY_PREFIX/jambulatv-openvpn-client
#
EOF
}

dns2tcp_install () {
tar zxvf $PROJECT_TARBALLS_DIR/dns2tcp-$DNS2TCP_VERSION*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR 
mv -v dns2tcp-$DNS2TCP_VERSION dns2tcp 
cd $INSTALL_SRC_DIR/dns2tcp 
./configure --prefix=/usr --mandir=$DATAROOTDIR/man
make_install_jambulatv
}

dns2tcpc_configure () {
# Create dns2tcp client start script
echo "#!/bin/sh
# This script will initiate client side DNS2TCP tunnel
TUNNEL_CLIENT_CMD=`which dns2tcpc`
TUNNEL_CLIENT_CFG=$CONFDIR/dns2tcpc.conf
TUNNEL_DOMAIN=$DNS2TCP_DOMAIN
DNS_SERVER=$DNS2TCP_DNS_SERVER
DNS_TYPE=TXT
DNS2TCP_RESOURCE=\$1
DNS2TCP_LOCAL_PORT=\$2
DNS2TCP_LOG_FILE=$PROJECT_SYSTEM_LOG_DIR/dns2tcpc.log
#
#
# 
# Check if resource has been specified
if [ \"x\$DNS2TCP_RESOURCE\" = \"x\" ];
then
echo \"Usage: \`basename \$0\` [RESOURCE e.g. vpn] [LOCAL PORT e.g. 11945}
\"
exit 1
elif [ \"x\$DNS2TCP_LOCAL_PORT\" = \"x\" ];
then
echo \"Usage: \`basename \$0\` [RESOURCE e.g. vpn] [LOCAL PORT e.g. 11945}
\"
exit 1
fi


# Script
\$TUNNEL_CLIENT_CMD -d 1 -r \$1 -c -z \$TUNNEL_DOMAIN -l \$DNS2TCP_LOCAL_PORT -T \$DNS_TYPE \$DNS_SERVER > \$DNS2TCP_LOG_FILE 2>&1 &

sleep 3
" > $BINARY_PREFIX/jambulatv-dns2tcp_client
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-dns2tcp_client
}

dns2tcpd_configure () {
# Create dns2tcpd config file
echo "# dns2tcpd.conf
listen = 0.0.0.0
port = 53
user = nobody
chroot = /var/empty
domain = $DNS2TCP_DOMAIN
resources = ssh:127.0.0.1:22, $DNS2TCP_RESOURCE_1:127.0.0.1:222, smtp:127.0.0.1:25, pop3:10.0.0.1:110" > $CONFDIR/dns2tcpd.conf

# Create Server start script
echo "# This script will initiate server side DNS2TCP tunnel

TUNNEL_CFG=$CONFDIR/dns2tcpd.conf
TUNNEL_CMD=`which dns2tcpd`

case \$1 in

start)
\$TUNNEL_CMD -d 1 -f \$TUNNEL_CFG
;;
stop)
killall dns2tcpd
;;
status)
ps auxw | grep dns2tcpd
;;
*)
echo \"Usage Command {start|stop|status}
\"
;;
esac " > $BINARY_PREFIX/jambulatv-dns2tcp_server
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-dns2tcp_server
}

proxychains_install () {
rsync -avz $PROJECT_GITHUB_DIR/proxychains/ $INSTALL_SRC_DIR/proxychains/
# Patch configure - fixes make error
patch -p1 $INSTALL_SRC_DIR/proxychains/configure < $PROJECT_PATCHES_DIR/proxychains_configure.patch
# configure
cd $INSTALL_SRC_DIR/proxychains
./configure --prefix=$PREFIX --libdir=$LIBDIR --sysconfdir=$PROJECT_SYSTEM_CONF_DIR/proxychains
# Fix sysconfig path
sed -i "s:sysconfdir:confdir:g" config.mak
# compile
make_install_jambulatv
make install-config
}

proxychains_configure () {
sed -i "s:socks4 	127.0.0.1 9050:socks5		127.0.0.1	1080:g" $PROJECT_SYSTEM_CONF_DIR/proxychains/proxychains.conf

echo "http		127.0.0.1	8089
https		127.0.0.1	8089
ftp		127.0.0.1	8089" >> $PROJECT_SYSTEM_CONF_DIR/proxychains/proxychains.conf
#
# Create symbolic link to proxychains4 binary
ln -s $BINARY_PREFIX/proxychains4 $BINARY_PREFIX/proxychains
}

iodine_install () {
rsync -avz $PROJECT_GITHUB_DIR/iodine/ $INSTALL_SRC_DIR/iodine/
cd $INSTALL_SRC_DIR/iodine
# Log to build file
make_build_log
# Make
make prefix=$PREFIX install
}

chrony_configure () {
# Copy chrony.conf file
cp -v $PROJECT_CONFIGS_DIR/chrony.conf.sample $CONFDIR/chrony.conf
# Add chronyc password to keys files
echo "1 $CHRONYC_PASSWD" > $CHRONY_KEYS_FILE
# Enable chronyd if needed
systemctl enable chronyd.service
systemctl restart chronyd.service
# Display chronyc's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
CHRONYC
=======
To access chronyc command line client use the following password:
$CHRONYC_PASSWD
#
EOF
}

system_sounds_configure () {
# Enable speaker beeps
echo "alias platform:pcspkr pcspkr" > $MODPROBE_DIR/beep.conf
# Set suid bit for beep in order to allow use by non-root users
chmod 4755 $BINARY_PREFIX/beep
# Copy jambulatv-sounds script, if it does not exist in bin directory
[ -e $SOUNDS_TOOL ] || cp -v $PROJECT_BIN_DIR/jambulatv-sounds $SOUNDS_TOOL
#
# Create sounds directory if no-existent
[ -d $PROJECT_SYSTEM_SHARE_DIR/sounds ] || mkdir -p $PROJECT_SYSTEM_SHARE_DIR/sounds
# Copy sound files
cp -rv $PROJECT_CONTRIB_DIR/sounds/system/* $PROJECT_SYSTEM_SHARE_DIR/sounds/
# Change ownership of sounds directory
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PROJECT_SYSTEM_SHARE_DIR/sounds
}

beep2_install () {
# Install beep2 - for on-board speaker notifications
tar zxvf $PROJECT_TARBALLS_DIR/beep2-$BEEP2_VERSION*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR
mv -v beep2-$BEEP2_VERSION beep2
cd $INSTALL_SRC_DIR/beep2
make_install_jambulatv
# Create sounds directory if no-existent
[ -d $PROJECT_SYSTEM_SHARE_DIR/sounds ] || mkdir -p $PROJECT_SYSTEM_SHARE_DIR/sounds
# Copy beep2 sound files
cp -rv $PROJECT_CONTRIB_DIR/sounds/beep2 $PROJECT_SYSTEM_SHARE_DIR/sounds/
}

ziproxy_install () {
tar xvf $PROJECT_TARBALLS_DIR/ziproxy-*.tar.xz -C $INSTALL_SRC_DIR
# Change to ziproxy directory
cd $INSTALL_SRC_DIR && mv ziproxy* ziproxy
cd $INSTALL_SRC_DIR/ziproxy
# configure ziproxy
./configure --prefix=$PREFIX \
  --with-cfgfile=$PROJECT_SYSTEM_CONF_DIR/ziproxy/ziproxy.conf
make_install_jambulatv
#
# Add Ziproxy user and group 
groupadd -r ziproxy
useradd -r -c "Ziproxy Proxy Server" -g ziproxy ziproxy
}

ziproxy_configure () {
# Create ziproxy config directory if it does not exist
[ -d $PROJECT_SYSTEM_CONF_DIR/ziproxy ] || mkdir -p $PROJECT_SYSTEM_CONF_DIR/ziproxy
# Copy ziproxy.conf sample file
cp -v $PROJECT_CONFIGS_DIR/ziproxy.conf.sample $PROJECT_SYSTEM_CONF_DIR/ziproxy/ziproxy.conf
# Copy ziproxy init script
cp -v $PROJECT_INIT_SCRIPTS_DIR/ziproxy /etc/init.d/
# Enable ziproxy if needed
systemctl enable ziproxy.service
# Reload systemctl
systemctl restart ziproxy.service
}

squid_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/squid-*.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v squid-* squid
# Compile
cd $INSTALL_SRC_DIR/squid && ./configure --prefix=$PREFIX \
   --libdir=$LIBDIR --sysconfdir=$CONFDIR/squid \
   --localstatedir=$STATEDIR --enable-ssl --enable-linux-netfilter \
   --enable-auth --with-logdir=$STATEDIR/log/squid \
   --with-pidfile=$RUNDIR/squid.pid --with-default-user=squid \
   --with-swapdir=$STATEDIR/cache/squid \
   --enable-build-info="$PROJECT_NAME"
make_install_jambulatv
#
# Add Squid user and group 
groupadd -r squid
useradd -r -c "Squid HTTP Web Cache Proxy Server" -g squid squid
}

squid_configure () {
# Copy config file before you proceed to other settings
cp -v $PROJECT_CONFIGS_DIR/squid.conf.sample $CONFDIR/squid/squid.conf
# Create cache swap script that is used in systemd init file
cat > $BINARY_PREFIX/jambulatv-squid-cache-swap << EOF
#!/bin/sh

SQUID_CONF="/etc/squid/squid.conf"

CACHE_SWAP=\$(sed -e 's/#.*//g' \$SQUID_CONF | \\
	grep cache_dir | awk '{ print \$3 }')

for adir in \$CACHE_SWAP; do
	if [ ! -d \$adir/00 ]; then
		echo -n "init_cache_dir \$adir... "
		squid -N -z -F -f \$SQUID_CONF >> /var/log/squid/squid.out 2>&1
	fi
done
EOF
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-squid-cache-swap
# Change ownership of cache and log files to squid
chown -R squid:squid $STATEDIR/cache/squid
chown -R squid:squid $STATEDIR/log/squid
# Initalise the cache
/usr/sbin/squid $CONFDIR/squid/squid.conf -z > /dev/null 2>&1
# Setup systemd service file
cp -v $PROJECT_INIT_SCRIPTS_DIR/squid.service $SYSTEMD_UNITS_DIR_USER
# Enable squid if needed
systemctl enable squid.service
}

ziproxy_wan_accel_configure () {
# Copy ziproxy-user conf file
cp -v $PROJECT_CONFIGS_DIR/ziproxy-user.conf.sample $PROJECT_SYSTEM_CONF_DIR/ziproxy/ziproxy-user.conf
# Copy ziproxy-link conf file
cp -v $PROJECT_CONFIGS_DIR/ziproxy-link.conf.sample $PROJECT_SYSTEM_CONF_DIR/ziproxy/ziproxy-link.conf
# Stop ziproxy
systemctl stop ziproxy.service
# Add/replace ziproxy init-startup file
cp -v $PROJECT_INIT_SCRIPTS_DIR/ziproxy-wan-accel /etc/init.d/ziproxy
systemctl --system daemon-reload
# Enable ziproxy if needed
systemctl enable ziproxy.service
# Reload systemctl
systemctl start ziproxy.service
}

flexget_deps_install () {
get_python_version
for PYTHON_MODULE in $FLEXGET_DEPENDENCIES
do
# Set module's package filename & strip version from it
MODULE_PKG=$(basename $(ls $PROJECT_TARBALLS_DIR/flexget_deps/$PYTHON_MODULE* | head -1))
MODULE_VERS=$(echo $MODULE_PKG|sed "s:$PYTHON_MODULE-::g"|sed "s:.tar.gz::g"|sed "s:.tar.bz2::g"|sed "s:.zip::g")
# Remove any existing modules
[ ! -d $INSTALL_SRC_DIR/$PYTHON_MODULE ] || rm -rf $INSTALL_SRC_DIR/$PYTHON_MODULE
rm -rf $PYTHON_SITEDIR/$PYTHON_MODULE*
# Install python module
echo "Installing $PYTHON_MODULE ..."
# Unpack using the appropriate tool for archive file format
# gzip
[ -e $PROJECT_TARBALLS_DIR/flexget_deps/$PYTHON_MODULE-$MODULE_VERS*gz ] && \
   tar zxvf $PROJECT_TARBALLS_DIR/flexget_deps/$PYTHON_MODULE-$MODULE_VERS*gz -C $INSTALL_SRC_DIR
# bz2
[ -e $PROJECT_TARBALLS_DIR/flexget_deps/$PYTHON_MODULE-$MODULE_VERS*bz2 ] && \
   tar jxvf $PROJECT_TARBALLS_DIR/flexget_deps/$PYTHON_MODULE-$MODULE_VERS*bz2 -C $INSTALL_SRC_DIR
# zip
[ -e $PROJECT_TARBALLS_DIR/flexget_deps/$PYTHON_MODULE-$MODULE_VERS*zip ] && \
   unzip -d $INSTALL_SRC_DIR $PROJECT_TARBALLS_DIR/flexget_deps/$PYTHON_MODULE-$MODULE_VERS*zip
# Install
cd $INSTALL_SRC_DIR
# Packages that don't match filename when untarred
if [ "$PYTHON_MODULE" = "python-tvrage" ];
then
mv -v *$PYTHON_MODULE* $PYTHON_MODULE
else
# All other packages
mv -v *$PYTHON_MODULE-$MODULE_VERS* $PYTHON_MODULE
fi
#
cd $INSTALL_SRC_DIR/$PYTHON_MODULE
python setup.py install --install-lib=$PYTHON_SITEDIR
#
#
echo
echo
echo 
echo "Did python module [$PYTHON_MODULE] install correctly?"
echo 
#_install_pause_check_4_errors_
#clear
#
#
done
}

flexget_python3_install () {
get_python_version
# Dependencies for Flexget - Install locally using wheels/pips specified in requirements
pip3 install --no-index --find-links $PROJECT_PIPS_DIR -r $PROJECT_PIPS_REQUIRES_DIR/flexget-requirements.txt
#
# Flexget (Python3)
# -----------------
# IMPORTANT: Don't use pip due to requirements set for common python 3 modules used by
#            other packages
#
# Install python modules
echo "Installing FlexGet ..."
rsync -avz --delete-after $PROJECT_GITHUB_DIR/Flexget-current/ $INSTALL_SRC_DIR/Flexget/
# Force our requirements
cp -v $PROJECT_PIPS_REQUIRES_DIR/flexget-requirements.txt \
	$INSTALL_SRC_DIR/Flexget/requirements.txt
# Apply Patches
# -------------
# include plugin
patch -p1 $INSTALL_SRC_DIR/Flexget/flexget/plugins/operate/include.py < $PROJECT_PATCHES_DIR/flexget.plugin.include.python3.patch
# notifiers plugin
patch -p1 $INSTALL_SRC_DIR/Flexget/flexget/plugins/notifiers/notify.py < $PROJECT_PATCHES_DIR/flexget.plugin.notifiers.python3.patch
# rss plugin - extract podcast poster image URLs
patch -p1 $INSTALL_SRC_DIR/Flexget/flexget/plugins/input/rss.py < $PROJECT_PATCHES_DIR/flexget.plugin.input.rss.python3.patch
# Install
cd $INSTALL_SRC_DIR/Flexget
python3 setup.py install
# Create symbolic link
[ -x $BINARY_PREFIX/flexget ] || ln -s $PREFIX/local/bin/flexget $BINARY_PREFIX/flexget
#
# Copy email templates in Python 3 installs
cp -v $PROJECT_CUSTOMIZATION_DIR/flexget/templates/email/jambula.html.template \
	$PYTHON_SITEDIR/FlexGet-*.egg/flexget/templates/task/
}

flexget_python2_install () {
get_python_version
# Remove any existing modules
[ ! -d $INSTALL_SRC_DIR/FlexGet* ] || rm -rf $INSTALL_SRC_DIR/FlexGet*
rm -rf $PYTHON_SITEDIR/FlexGet* 
# Install python modules
echo "Installing FlexGet ..."
rsync -avz --delete-after $PROJECT_GITHUB_DIR/Flexget/ $INSTALL_SRC_DIR/Flexget/
# Apply our patches - include plugin
patch -p1 $INSTALL_SRC_DIR/Flexget/flexget/plugins/operate/include.py < $PROJECT_PATCHES_DIR/flexget.plugin.include.patch
# Install
cd $INSTALL_SRC_DIR/Flexget
pip install -e .
#
# Copy email templates # only in Python 2 install
cp -v $PROJECT_CUSTOMIZATION_DIR/flexget/templates/email/jambula.template \
	$INSTALL_SRC_DIR/Flexget/flexget/templates/email/
}

flexget_configure () {
get_python_version
# create flexget config directory
[ -d $FLEXGET_CONFIG_DIR ] || mkdir -p $FLEXGET_CONFIG_DIR
# Create flexget logs directory
[ -d $PROJECT_SYSTEM_LOG_DIR/flexget ] || mkdir -p $PROJECT_SYSTEM_LOG_DIR/flexget
# Create flexget log file
touch $PROJECT_SYSTEM_LOG_DIR/flexget/flexget.log
# Change flexget config directory to multimedia user
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $FLEXGET_CONFIG_DIR
# Change flexget log directory to multimedia user
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PROJECT_SYSTEM_LOG_DIR/flexget
#
# Copy config .yml files depending on python version in use
# .........................................................
# Python 2
if [[ "$PYTHON_MAJOR_VERSION_NUMBER" = "2" ]];
then
# Copy flexget configs
cp -v $PROJECT_CONFIGS_DIR/flexget/*.yml $FLEXGET_CONFIG_DIR/
# Set variables template
FLEXGET_VARIABLES_TEMPLATE=$PROJECT_CONFIGS_DIR/flexget/variables.yml.template
export FLEXGET_VARIABLES_TEMPLATE

# Python 3
elif [[ "$PYTHON_MAJOR_VERSION_NUMBER" = "3" ]];
then
cp -v $PROJECT_CONFIGS_DIR/flexget_python3/*.yml $FLEXGET_CONFIG_DIR/
# Set variables template
FLEXGET_VARIABLES_TEMPLATE=$PROJECT_CONFIGS_DIR/flexget_python3/variables.yml.template
export FLEXGET_VARIABLES_TEMPLATE
fi

#DEBUGGING - Remove
cat <<EOT
$(date)

Script has so far run for $SCRIPT_RUNTIME seconds


PYTHON_VERSION=$PYTHON_VERSION
PYTHON_FULL_VERSION_NUMBER=$PYTHON_FULL_VERSION_NUMBER
PYTHON_MAJOR_VERSION_NUMBER=$PYTHON_MAJOR_VERSION_NUMBER
PYTHON_MINOR_VERSION_NUMBER=$PYTHON_MINOR_VERSION_NUMBER
PYTHON2_SITEDIR=$PYTHON2_SITEDIR
PYTHON3_SITEDIR=$PYTHON3_SITEDIR

EOT

# Add custom variables to Flexget
if [ ! -e $FLEXGET_CONFIG_DIR/variables.yml ];
then
cat $FLEXGET_VARIABLES_TEMPLATE  | \
   sed -e "s:MY_HTTP_BROWSER_USERAGENT_MAC:$HTTP_BROWSER_USERAGENT_MAC:g" | \
   sed -e "s:MY_HTTP_BROWSER_USERAGENT_LINUX:$HTTP_BROWSER_USERAGENT_LINUX:g" | \
   sed -e "s:MY_HTTP_BROWSER_USERAGENT_WINDOWS:$HTTP_BROWSER_USERAGENT_WINDOWS:g" | \
   sed -e "s:MY_HTTP_BROWSER_USERAGENT_YOUTUBE_DL:$HTTP_BROWSER_USERAGENT_YOUTUBE_DL:g" | \
   sed -e "s:FLEXGET_CONFIG_DIR:$FLEXGET_CONFIG_DIR:g" | \
   sed -e "s:PROJECT_PARTITION:$PROJECT_PARTITION:g" | \
   sed -e "s:PROJECT_SYSTEM_LOG_DIR:$PROJECT_SYSTEM_LOG_DIR:g" | \
   sed -e "s:TORRENTS_WATCH_DIRECTORY:$TORRENTS_WATCH_DIRECTORY:g" | \
   sed -e "s:TORRENTS_PENDING_DIRECTORY:$TORRENTS_PENDING_DIRECTORY:g" | \
   sed -e "s:TORRENTS_COMPLETED_DIRECTORY:$TORRENTS_COMPLETED_DIRECTORY:g" | \
   sed -e "s:TORRENTS_LABEL_TVSHOWS:$TORRENTS_LABEL_TVSHOWS:g" | \
   sed -e "s:TORRENTS_LABEL_MOVIES:$TORRENTS_LABEL_MOVIES:g" | \
   sed -e "s:TORRENTS_LABEL_MUSIC:$TORRENTS_LABEL_MUSIC:g" | \
   sed -e "s:TORRENTS_LABEL_SOFTWARE:$TORRENTS_LABEL_SOFTWARE:g" | \
   sed -e "s:PODCASTS_DIRECTORY:$PODCASTS_DIRECTORY:g" | \
   sed -e "s:TORRENTS_DOMAIN_NAME:$TORRENTS_DOMAIN_NAME:g" | \
   sed -e "s:KODI_HTTP_USER:$KODI_HTTP_USER:g" | \
   sed -e "s:KODI_HTTP_PASS:$KODI_HTTP_PASS:g" | \
   sed -e "s:KODI_HTTP_PORT:$KODI_HTTP_PORT:g" | \
   sed -e "s:JAMBULATV_FTP_SERVER:$JAMBULATV_FTP_SERVER:g" | \
   sed -e "s:JAMBULATV_FTP_USER:$JAMBULATV_FTP_USER:g" | \
   sed -e "s:JAMBULATV_FTP_PASS:$JAMBULATV_FTP_PASS:g" | \
   sed -e "s:PLAYLISTS_DIRECTORY:$PLAYLISTS_DIRECTORY:g" | \
   sed -e "s:TMPDIR:$TMPDIR:g" | \
   sed -e "s:FLEXGET_SCHEDULE_IPTV_LISTS_HR:$FLEXGET_SCHEDULE_IPTV_LISTS_HR:g" | \
   sed -e "s:FLEXGET_SCHEDULE_IPTV_LISTS_MIN:$FLEXGET_SCHEDULE_IPTV_LISTS_MIN:g" | \
   sed -e "s:FLEXGET_PORT:$FLEXGET_PORT:g" > $FLEXGET_CONFIG_DIR/variables.yml
fi
#
# Create non-existent directories
for DIR in \
$TORRENTS_WATCH_DIRECTORY/$TORRENTS_LABEL_TVSHOWS \
$TORRENTS_WATCH_DIRECTORY/$TORRENTS_LABEL_MOVIES \
$TORRENTS_WATCH_DIRECTORY/$TORRENTS_LABEL_MUSIC \
$TORRENTS_WATCH_DIRECTORY/$TORRENTS_LABEL_SOFTWARE \
$TORRENTS_PENDING_DIRECTORY \
$TORRENTS_COMPLETED_DIRECTORY/$TORRENTS_LABEL_TVSHOWS \
$TORRENTS_COMPLETED_DIRECTORY/$TORRENTS_LABEL_MOVIES \
$TORRENTS_COMPLETED_DIRECTORY/$TORRENTS_LABEL_MUSIC \
$TORRENTS_COMPLETED_DIRECTORY/$TORRENTS_LABEL_SOFTWARE \
$PODCASTS_DIRECTORY/spool
do
# Create directory
[ -d $DIR ] || mkdir -p $DIR
# Change  ownership
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $DIR
done
#
# Configure TV series
if [ ! -e $FLEXGET_CONFIG_DIR/tvseries.yml ];
then
# Add sample TV Series feeds
cp -v $PROJECT_CONFIGS_DIR/flexget/tvseries.yml.* $FLEXGET_CONFIG_DIR/
fi
#
# Podcasts
if [ ! -e $FLEXGET_CONFIG_DIR/podcasts.yml ];
then
# Add sample Podcasts feeds
cp -v $PROJECT_CONFIGS_DIR/flexget/podcasts.yml.* $FLEXGET_CONFIG_DIR/
fi
# Copy jambulatv-fetch-podcasts script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-fetch-podcasts ] || cp -v $PROJECT_BIN_DIR/jambulatv-fetch-podcasts $BINARY_PREFIX/
# Copy jambulatv-rename-tvshows used to rename TV Shows into SXXEYY series format, if none exists in bin directory
[ -e $BINARY_PREFIX/jambulatv-rename-tvshows ] || cp -v $PROJECT_BIN_DIR/jambulatv-rename-tvshows $BINARY_PREFIX/
#
# Directory permissions
# Change flexget config directory to multimedia user
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $FLEXGET_CONFIG_DIR
# Change flexget log directory to multimedia user
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PROJECT_SYSTEM_LOG_DIR/flexget
#
# Add Environment file for Systemd
cat > $SYSCONFIG_DIR/flexget <<EOF
FLEXGET_CMD="$(which flexget)"
CONFIG_FILE="$FLEXGET_CONFIG_DIR/config.yml"
LOG_FILE="$PROJECT_SYSTEM_LOG_DIR/flexget/flexget.log"
LOCK_FILE="$FLEXGET_CONFIG_DIR/.config-lock"
PYTHON_SITEDIR="$PYTHON_SITEDIR"
EOF
# Copy flexget systemd file 
cp -v $PROJECT_INIT_SCRIPTS_DIR/flexget.service $SYSTEMD_UNITS_DIR_USER/
# Run flexget in daemon mode: add timezone file
echo "$TIMEZONE" > $TIMEZONE_FILE
#
# Enable flexget systemd service
systemctl enable flexget.service
#
# Display FlexGet's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
FLEXGET
=======
Edit the flexget variables file located at:
$FLEXGET_CONFIG_DIR/variables.yml

Run the following command to authorize flexget at trakt.tv site::
flexget trakt auth [YOUR TRAKT ACCOUNT]
#
EOF
}

xmlrpc_install () {
tar zxvf $PROJECT_TARBALLS_DIR/xmlrpc-c-*gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v xmlrpc* xmlrpc-c
cd $INSTALL_SRC_DIR/xmlrpc-c
./configure --prefix=/usr --libdir=$LIBDIR --disable-wininet-client --disable-libwww-client
make_install_jambulatv
}

libtorrent_install () {
rsync -avz --delete-after $PROJECT_GITHUB_DIR/libtorrent/ $INSTALL_SRC_DIR/libtorrent/
cd $INSTALL_SRC_DIR/libtorrent
./autogen.sh
./configure --prefix=/usr --libdir=$LIBDIR
make_install_jambulatv
# Clean up - saves upto 150MB
make clean
}

rtorrent_install () {
rsync -avz --delete-after $PROJECT_GITHUB_DIR/rtorrent/ $INSTALL_SRC_DIR/rtorrent/
cd $INSTALL_SRC_DIR/rtorrent
# Patch for color
# patch -p1 < $PROJECT_PATCHES_DIR/rtorrent_color.patch
# Compile
./autogen.sh
./configure --prefix=/usr --libdir=$LIBDIR --with-xmlrpc-c \
	PKG_CONFIG_PATH=/usr/lib/pkgconfig
make_install_jambulatv
# Clean up - saves upto 260MB
make clean
#
# Add rtorrent user/group
useradd -r -M -c "Rtorrent Server User" rtorrent -s /sbin/nologin
}

rtorrent_configure () {
# Modify and copy .rtorrent.rc.template file
if [ ! -e $MULTIMEDIA_USER_HOME_DIR/.rtorrent.rc ];
then
cat $PROJECT_CONFIGS_DIR/rtorrent.rc.template | \
   sed -e "s:TORRENTS_WATCH_DIRECTORY:$TORRENTS_WATCH_DIRECTORY:g" | \
   sed -e "s:TORRENTS_LABEL_TVSHOWS:$TORRENTS_LABEL_TVSHOWS:g" | \
   sed -e "s:TORRENTS_LABEL_MOVIES:$TORRENTS_LABEL_MOVIES:g" | \
   sed -e "s:TORRENTS_LABEL_MUSIC:$TORRENTS_LABEL_MUSIC:g" | \
   sed -e "s:TORRENTS_LABEL_SOFTWARE:$TORRENTS_LABEL_SOFTWARE:g" | \
   sed -e "s:TORRENTS_PENDING_DIRECTORY:$TORRENTS_PENDING_DIRECTORY:g" | \
   sed -e "s:TORRENTS_COMPLETED_DIRECTORY:$TORRENTS_COMPLETED_DIRECTORY:g" | \
   sed -e "s:RTORRENT_SESSIONS_DIR:$RTORRENT_SESSIONS_DIR:g" | \
   sed -e "s:PROJECT_SYSTEM_CONF_DIR:$PROJECT_SYSTEM_CONF_DIR:g" | \
   sed -e "s:RTORRENT_LOG_DIR:$RTORRENT_LOG_DIR:g" \
> $MULTIMEDIA_USER_HOME_DIR/.rtorrent.rc
# Change permissions
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $MULTIMEDIA_USER_HOME_DIR/.rtorrent.rc
fi
#
# Add jambulatv rtorrent (post/pre) processor tool to bin directory if it does not exist
[ -e $BINARY_PREFIX/jambulatv-rtorrent-processor ] || \
	cat $PROJECT_BIN_DIR/jambulatv-rtorrent-processor | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_NAME:$JAMBULATV_SETUP_DB_NAME:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_TABLE:$JAMBULATV_SETUP_DB_TABLE:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_USER:$JAMBULATV_SETUP_DB_USER:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_PASS:$JAMBULATV_SETUP_DB_PASS:g" \
			> $BINARY_PREFIX/jambulatv-rtorrent-processor 
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-rtorrent-processor 
#
# Create torrents directories if they do not exist
for DIR in \
$TORRENTS_DIRECTORY \
$TORRENTS_WATCH_DIRECTORY/$TORRENTS_LABEL_TVSHOWS \
$TORRENTS_WATCH_DIRECTORY/$TORRENTS_LABEL_MOVIES \
$TORRENTS_WATCH_DIRECTORY/$TORRENTS_LABEL_MUSIC \
$TORRENTS_WATCH_DIRECTORY/$TORRENTS_LABEL_SOFTWARE \
$TORRENTS_PENDING_DIRECTORY \
$TORRENTS_COMPLETED_DIRECTORY/$TORRENTS_LABEL_TVSHOWS \
$TORRENTS_COMPLETED_DIRECTORY/$TORRENTS_LABEL_MOVIES \
$TORRENTS_COMPLETED_DIRECTORY/$TORRENTS_LABEL_MUSIC \
$TORRENTS_COMPLETED_DIRECTORY/$TORRENTS_LABEL_SOFTWARE \
$RTORRENT_SESSIONS_DIR \
$RTORRENT_LOG_DIR
do
# Create directory
[ -d $DIR ] || mkdir -p $DIR
# Change  ownership
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $DIR
# Make torrents directory accessible by samba 
#chmod -R 777 $DIR
done
#
# Systemctl script
cp -v $PROJECT_INIT_SCRIPTS_DIR/rtorrent.service $SYSTEMD_UNITS_DIR_USER/
# Enable rtorrent if needed
systemctl enable rtorrent.service
}

aria2_install () {
rsync -avz --delete-after $PROJECT_GITHUB_DIR/aria2/ $INSTALL_SRC_DIR/aria2/
cd $INSTALL_SRC_DIR/aria2
autoreconf -i
./configure --prefix=$PREFIX --libdir=$LIBDIR --enable-libaria2
make_install_jambulatv
# Cache recently shared libraries 
ldconfig
}

aria2_configure () {
# Modify and copy aria2.conf.template file
if [ ! -e $ARIA2_CONFIG_FILE ];
then
cat $PROJECT_CONFIGS_DIR/aria2.conf.template | \
   sed -e "s:ARIA2_DOWNLOADS_DIRECTORY:$ARIA2_DOWNLOADS_DIRECTORY:g" | \
   sed -e "s:ARIA2_LOG_FILE:$ARIA2_LOG_FILE:g" | \
   sed -e "s:ARIA2_SAVE_SESSION_FILE:$ARIA2_SAVE_SESSION_FILE:g" | \
   sed -e "s:ARIA2_DOWNLOAD_COMPLETE_BT_TOOL:$ARIA2_DOWNLOAD_COMPLETE_BT_TOOL:g" | \
   sed -e "s:ARIA2_DOWNLOAD_COMPLETE_TOOL:$ARIA2_DOWNLOAD_COMPLETE_TOOL:g" | \
   sed -e "s:ARIA2_DOWNLOAD_ERROR_TOOL:$ARIA2_DOWNLOAD_ERROR_TOOL:g" | \
   sed -e "s:ARIA2_DOWNLOAD_PAUSE_TOOL:$ARIA2_DOWNLOAD_PAUSE_TOOL:g" | \
   sed -e "s:ARIA2_DOWNLOAD_START_TOOL:$ARIA2_DOWNLOAD_START_TOOL:g" | \
   sed -e "s:ARIA2_DOWNLOAD_STOP_TOOL:$ARIA2_DOWNLOAD_STOP_TOOL:g" | \
   sed -e "s:NETWORK_IP_ADDRESS:$NETWORK_IP_ADDRESS:g" \
> $ARIA2_CONFIG_FILE
fi
# Create Aria2 downloads directory if it does not exist
[ -d $ARIA2_DOWNLOADS_DIRECTORY ] || mkdir -p $ARIA2_DOWNLOADS_DIRECTORY
# Session and log files
touch $ARIA2_SAVE_SESSION_FILE 
touch $ARIA2_LOG_FILE
#
# Change permissions
# conf file
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $ARIA2_CONFIG_FILE
# session file
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $ARIA2_SAVE_SESSION_FILE 
# log file
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $ARIA2_LOG_FILE
# Downloads Dir
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $ARIA2_DOWNLOADS_DIRECTORY
# Copy aria2 systemd file 
cp -v $PROJECT_INIT_SCRIPTS_DIR/aria2.service $SYSTEMD_UNITS_DIR_USER/
# Enable aria2 if needed # Don't enable since flexget start aria2 during fetch of podcasts
#systemctl enable aria2.service
}

python_telegram_bot_install () {
get_python_version
# future - dependency for python-telegram-bot
tar zxvf $PROJECT_TARBALLS_DIR/future-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v future-* future
# Compile
cd $INSTALL_SRC_DIR/future 
python setup.py install --install-lib=$PYTHON_SITEDIR
#
# python-telegram-bot
tar zxvf $PROJECT_TARBALLS_DIR/python-telegram-bot-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v python-telegram-bot-* python-telegram-bot
# Compile
cd $INSTALL_SRC_DIR/python-telegram-bot 
python setup.py install --install-lib=$PYTHON_SITEDIR
}

telegram_messaging_configure () {
cat > $TELEGRAM_CREDENTIALS_CONFIG << EOF
TELEGRAM_TOOL="$TELEGRAM_TOOL"
EOF
# Copy Telegram Script if it does not exists
[ -e $TELEGRAM_TOOL ] || \
	cp -v $PROJECT_BIN_DIR/jambulatv-telegram $TELEGRAM_TOOL
# Make script executable
[ -x $TELEGRAM_TOOL ] || chmod 755 $TELEGRAM_TOOL
}

yowsup2_deps_install () {
get_python_version
for PYTHON_MODULE in \
protobuf \
python-axolotl-curve25519 \
pycrypto \
python-axolotl
do
# Set module's package filename & strip version from it
MODULE_PKG=$(basename $(ls $PROJECT_TARBALLS_DIR/$PYTHON_MODULE* | head -1))
MODULE_VERS=$(echo $MODULE_PKG|sed "s:$PYTHON_MODULE-::g"|sed "s:.tar.gz::g"|sed "s:.tar.bz2::g"|sed "s:.zip::g")
# Remove any existing modules
[ ! -d $INSTALL_SRC_DIR/$PYTHON_MODULE ] || rm -rf $INSTALL_SRC_DIR/$PYTHON_MODULE
rm -rf $PYTHON_SITEDIR/$PYTHON_MODULE*
# Install python module
echo "Installing $PYTHON_MODULE ..."
# Unpack using the appropriate tool for archive file format
# gzip
[ -e $PROJECT_TARBALLS_DIR/$PYTHON_MODULE-$MODULE_VERS*gz ] && \
   tar zxvf $PROJECT_TARBALLS_DIR/$PYTHON_MODULE-$MODULE_VERS*gz -C $INSTALL_SRC_DIR
# bz2
[ -e $PROJECT_TARBALLS_DIR/$PYTHON_MODULE-$MODULE_VERS*bz2 ] && \
   tar jxvf $PROJECT_TARBALLS_DIR/$PYTHON_MODULE-$MODULE_VERS*bz2 -C $INSTALL_SRC_DIR
# zip
[ -e $PROJECT_TARBALLS_DIR/$PYTHON_MODULE-$MODULE_VERS*zip ] && \
   unzip -d $INSTALL_SRC_DIR $PROJECT_TARBALLS_DIR/$PYTHON_MODULE-$MODULE_VERS*zip
# Rename sources dir
cd $INSTALL_SRC_DIR && mv -v *$PYTHON_MODULE-$MODULE_VERS* $PYTHON_MODULE
# Install
cd $INSTALL_SRC_DIR/$PYTHON_MODULE
python setup.py install --install-lib=$PYTHON_SITEDIR
#
# BUG: Change permissions on protobuf namespace_packages.txt file
chmod 644 $PYTHON_SITEDIR/protobuf-*.egg/EGG-INFO/namespace_packages.txt
# 
#
echo
echo
echo 
echo "Did python module [$PYTHON_MODULE] install correctly?"
echo 
#_install_pause_check_4_errors_
echo
#
done
}

yowsup2_install () {
get_python_version
rsync -avz --delete-after $PROJECT_GITHUB_DIR/yowsup/ $INSTALL_SRC_DIR/yowsup/
# Patch env_android
patch -p1 $INSTALL_SRC_DIR/yowsup/yowsup/env/env_android.py < $PROJECT_PATCHES_DIR/yowsup.env.android.patch
# Compile
cd $INSTALL_SRC_DIR/yowsup
python setup.py install --install-lib=$PYTHON_SITEDIR
}

yowsup2_python3_install () {
get_python_version
# Dependencies for yowsup - Install locally using wheels specified in requirements
pip3 install --no-index --find-links $PROJECT_PIPS_DIR -r $PROJECT_PIPS_REQUIRES_DIR/yowsup-requirements.txt
#
# Using yowsup github branch by AragurDEV
rsync -avz --delete-after $PROJECT_GITHUB_DIR/yowsup-AragurDEV/ $INSTALL_SRC_DIR/yowsup/
# Install
cd $INSTALL_SRC_DIR/yowsup
python3 setup.py install
#
# Create symbolic link
[ -x $BINARY_PREFIX/yowsup-cli ] || ln -s $PREFIX/local/bin/yowsup-cli $BINARY_PREFIX/yowsup-cli
}

whatsapp_messaging_configure () {
# Copy WhatsApp tool, if it does not exist in bin directory
[ -e $WHATSAPP_TOOL ] || \
	cp -v $PROJECT_BIN_DIR/jambulatv-whatsapp $WHATSAPP_TOOL
# Make script executable
chmod 755 $WHATSAPP_TOOL
#
# Add empty whatsapp settings file
cat > $WHATSAPP_CREDENTIALS_CONFIG << EOF
# TIP: Run the script $WHATSAPP_TOOL to generate the rest of whatsapp settings
EOF
#
# Create directory of Mobile Providers 
[ -d $PROJECT_SYSTEM_SHARE_DIR/mobile_providers ] || mkdir -p $PROJECT_SYSTEM_SHARE_DIR/mobile_providers
# Add table of MCC and MNC codes for providers from allover the world
cp -v $PROJECT_CONTRIB_DIR/mobile_providers/mcc-mnc-table.csv \
	$PROJECT_SYSTEM_SHARE_DIR/mobile_providers
}

mosquitto_install () {
# Remove RPM based package if installed
rpm -q mosquitto > /dev/null 2>&1 && rpm -e --nodeps mosquitto
#
# sync mosquitto sources excluding wpa_supplicant
rsync -avz --delete-after $PROJECT_GITHUB_DIR/mosquitto/ $INSTALL_SRC_DIR/mosquitto/
# Patch config.mk: change bin,lib,include locations
cp -v $INSTALL_SRC_DIR/mosquitto/config.mk $INSTALL_SRC_DIR/mosquitto/config.mk.orig
cat $INSTALL_SRC_DIR/mosquitto/config.mk.orig | \
	sed -e "s:WITH_DOCS\:=yes:WITH_DOCS\:=no:g" | \
	sed -e "s:prefix=/usr/local:prefix=$PREFIX:g" \
		> $INSTALL_SRC_DIR/mosquitto/config.mk
# Compile latest mosquitto from sources
cd $INSTALL_SRC_DIR/mosquitto
#
make_install_jambulatv
# Cache recently shared libraries 
ldconfig
# Add mosquitto group and user
groupadd -r mosquitto
useradd -r -M -c "Mosquitto MQTT broker" -g $MOSQUITTO_USER $MOSQUITTO_GROUP -s /sbin/nologin
}

mosquitto_configure () {
# Setup mosquitto.conf file
cat $PROJECT_CONFIGS_DIR/mosquitto.conf.template | \
	sed "s:MOSQUITTO_CONFIG_DIR:$MOSQUITTO_CONFIG_DIR:g" | \
	sed "s:MOSQUITTO_CONFIG_CERTS_DIR:$MOSQUITTO_CONFIG_CERTS_DIR:g" | \
	sed "s:MOSQUITTO_USER:$MOSQUITTO_USER:g" | \
	sed "s:MOSQUITTO_PORT:$MOSQUITTO_PORT:g" | \
	sed "s:MOSQUITTO_SSL_PORT:$MOSQUITTO_SSL_PORT:g" \
		> $MOSQUITTO_CONFIG_DIR/mosquitto.conf
#
# Setup TLS/SSL for mosquitto
[ -d $MOSQUITTO_CONFIG_CERTS_DIR ] || mkdir $MOSQUITTO_CONFIG_CERTS_DIR
# Create TLS/SSL CA, Server Keys and Certs
tls_ca_server_cert_key_generate \
	$MOSQUITTO_CONFIG_CERTS_DIR \
	mosquitto-ca.key \
	mosquitto-ca.cert \
	mosquitto-server.key \
	mosquitto-server.csr \
	mosquitto-server.cert \
	7300
# Change permissons of TLS/SSL directory containing keys/certs
chmod -R 700 $MOSQUITTO_CONFIG_CERTS_DIR
chown -R $MOSQUITTO_USER:$MOSQUITTO_USER $MOSQUITTO_CONFIG_CERTS_DIR
#
# Configure Systemd service file
cat $PROJECT_INIT_SCRIPTS_DIR/mosquitto.service | \
	sed "s:MOSQUITTO_CONFIG_DIR:$MOSQUITTO_CONFIG_DIR:g" | \
	sed "s:MOSQUITTO_USER:$MOSQUITTO_USER:g" | \
	sed "s:MOSQUITTO_PORT:$MOSQUITTO_PORT:g" | \
	sed "s:MOSQUITTO_SSL_PORT:$MOSQUITTO_SSL_PORT:g" \
		> $SYSTEMD_UNITS_DIR_USER/mosquitto.service
# Enable mosquitto service if needed
systemctl enable mosquitto.service
# Start mosquitto service if needed
systemctl start mosquitto.service
#
# Display mosquitto debugging/testing information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#

Mosquitto (MQTT) debugging using TLS
====================================
% Run the following commands to test MQTT subscription and publishing:

mosquitto_sub -d -p $MOSQUITTO_SSL_PORT --insecure --cafile $MOSQUITTO_CONFIG_CERTS_DIR/mosquitto-server.cert -t "JambulaTV/presence/wifi"

mosquitto_pub -p $MOSQUITTO_SSL_PORT --insecure --cafile $MOSQUITTO_CONFIG_CERTS_DIR/mosquitto-server.cert -t "JambulaTV/presence/wifi" -m "User has arrived home" 

#
EOF
}

sleekxmpp_install () {
get_python_version
# dnspython - dependency for sleekxmpp
unzip -d $INSTALL_SRC_DIR $PROJECT_TARBALLS_DIR/dnspython-*.zip
cd $INSTALL_SRC_DIR && mv -v dnspython-* dnspython
# Compile
cd $INSTALL_SRC_DIR/dnspython 
python setup.py install --install-lib=$PYTHON_SITEDIR
# sleekxmpp 
tar zxvf $PROJECT_TARBALLS_DIR/sleekxmpp-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v sleekxmpp-* sleekxmpp
# Compile
cd $INSTALL_SRC_DIR/sleekxmpp 
python setup.py install --install-lib=$PYTHON_SITEDIR
}

samba_configure () {
# Create our samba smb.conf file
cat > $CONFDIR/samba/smb.conf << EOF
# Samba configuration file for $PROJECT_NAME

[global]
	workgroup = $COMPANY_WORKGROUP
	server string = My media at $PROJECT_NAME
	netbios name = $PROJECT_NAME
        name resolve order = bcast host 
	log file = $PROJECT_SYSTEM_LOG_DIR/samba/log.%m
	max log size = 50
	security = user
	passdb backend = tdbsam
	domain master = no
	local master = no 
	dns proxy = no
	load printers = no
	client lanman auth = yes
	lanman auth = yes
	socket options = TCP_NODELAY IPTOS_LOWDELAY SO_RCVBUF=65536 SO_SNDBUF=65536
	map to guest = bad user

[Media-Disk]
	comment = My Media at $PROJECT_NAME
	path = $PROJECT_PARTITION
	browseable = yes
	public = yes
	writable = yes
	printable = no
EOF
# Create samba log directory
[ -d $PROJECT_SYSTEM_LOG_DIR/samba ] || mkdir -p $PROJECT_SYSTEM_LOG_DIR/samba
# Enable smb, nmb services
systemctl enable smb.service
systemctl enable nmb.service
# Start smb, nmb services
systemctl restart smb.service
systemctl restart nmb.service
}

nginx_install () {
# Remove existing webserver packages if any
for WEBSERVER in nginx httpd
do
rpm -q $WEBSERVER > /dev/null 2>&1 && rpm -e --nodeps $WEBSERVER
done
# Unpack nginx
tar zxvf $PROJECT_TARBALLS_DIR/nginx-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR 
mv -v nginx-* nginx 
cd $INSTALL_SRC_DIR/nginx 
./configure --prefix=$PROJECT_SYSTEM_SHARE_DIR --sbin-path=$PREFIX/sbin/nginx \
	--conf-path=$NGINX_CONF_DIR/nginx.conf \
        --with-ld-opt="-Wl,-E" --with-perl_modules_path=$LIBDIR/perl5/auto/nginx \
	--error-log-path=$STATEDIR/log/nginx/error.log \
	--http-log-path=$STATEDIR/log/nginx/access.log --pid-path=$RUNDIR/nginx.pid \
	--lock-path=$RUNDIR/lock/subsys/nginx --user=nginx --group=nginx \
	--with-http_addition_module \
	--with-http_auth_request_module \
	--with-http_degradation_module \
	--with-http_perl_module \
	--with-http_flv_module \
	--with-http_geoip_module \
	--with-google_perftools_module \
	--with-http_gzip_static_module \
	--with-http_gunzip_module \
	--with-http_image_filter_module \
	--with-http_mp4_module \
	--with-http_random_index_module \
	--with-http_realip_module \
	--with-http_secure_link_module \
	--with-http_ssl_module \
	--with-http_stub_status_module \
	--with-http_sub_module \
	--with-http_dav_module \
	--with-http_xslt_module \
	--with-file-aio \
	--with-ipv6 \
	--with-mail \
	--with-mail_ssl_module \
	--with-debug
make_install_jambulatv
#
# Add nginx user and group
useradd -M -r -c "Nginx Web Server" -s /sbin/nologin -d $SPOOLDIR/nginx nginx
}

set_www_user_group () {
# Set user and group variables
WWW_USER=$(grep -i '^user' $NGINX_CONF_DIR/nginx.conf | head -1 | awk {'print $2'} | sed 's:;::')
WWW_GROUP=$(grep -i '^user' $NGINX_CONF_DIR/nginx.conf | head -1 | awk {'print $3'} | sed 's:;::')
[ "x$WWW_GROUP" = "x" ] && WWW_GROUP=$WWW_USER
export WWW_USER WWW_GROUP
#
}

nginx_configure () {
# Get WWW User and Group
set_www_user_group
# Change log directory permissions
chown -R $WWW_USER:$WWW_GROUP $STATEDIR/log/nginx
#
# Change permissions on html directory
chown -R $WWW_USER:$WWW_GROUP $WWW_HTML_DIR
#
# Copy nginx systemd file 
cp -v $PROJECT_INIT_SCRIPTS_DIR/nginx.service $SYSTEMD_UNITS_DIR_USER/
# Enable nginx if needed
systemctl enable nginx.service

# Create conf.d, includes, and sites-enabled directories
mkdir /etc/nginx/{conf.d,includes,sites-enabled}
# Make backup of default config file
cp -v $NGINX_CONF_DIR/nginx.conf $NGINX_CONF_DIR/nginx.conf.orig
# Copy nginx.conf
cp -v $PROJECT_CONFIGS_DIR/nginx/nginx.conf $NGINX_CONF_DIR/
# Add config, includes and site files
rsync -av $PROJECT_CONFIGS_DIR/nginx/includes/ $NGINX_CONF_DIR/includes/
rsync -av $PROJECT_CONFIGS_DIR/nginx/sites-enabled/ $NGINX_CONF_DIR/sites-enabled/
# Create SSL directory for certificates and keys
mkdir $NGINX_CONF_DIR/ssl
# Create SSL certificates and keys
ssl_cert_key_generate $NGINX_CONF_DIR/ssl/cert.pem $NGINX_CONF_DIR/ssl/cert.key 7300
}

nginx_customization () {
# Add HTML customized files
rsync -av $PROJECT_CUSTOMIZATION_DIR/nginx/html/ $WWW_HTML_DIR/
}

www_superuser_permissions_configure () {
# Get WWW User and Group
set_www_user_group

# Allow WWW user to use 'sudo' e.g. source functions file
cat > $SUDOERS_DIR/$WWW_USER << EOF
# Don't require TTY
Defaults:$WWW_USER    !requiretty
# Set Command Aliases
Cmnd_Alias WEBUSER = $WWW_USER_COMMANDS, $WHATSAPP_TOOL
# Set User actions
$WWW_USER             ALL = NOPASSWD: WEBUSER
EOF
# Change sudoer permissions
chmod 0440 $SUDOERS_DIR/$WWW_USER

# Add www to systemd-journal group so they can query using journalctl
usermod -a -G systemd-journal $WWW_USER
}

php_configure () {
# Get WWW User and Group
set_www_user_group
# Copy www.conf php-fpm config file
cp -v $PROJECT_CONFIGS_DIR/php-fpm/www.conf $CONFDIR/php-fpm.d/
# make php-fpm run under webserver user/group
sed -i "s:user = nginx:user = $WWW_USER:g" $CONFDIR/php-fpm.d/www.conf
sed -i "s:group = nginx:group = $WWW_GROUP:g" $CONFDIR/php-fpm.d/www.conf
#
# Patch php.ini
# Make backup of default php.ini file
cp -v $CONFDIR/php.ini $CONFDIR/php.ini.orig
patch -p1 $CONFDIR/php.ini < $PROJECT_PATCHES_DIR/php.ini.patch
# Change permissions of save session path (php.ini) to web user
chown -R $WWW_USER:$WWW_GROUP $STATEDIR/lib/php
#
# Disable and stop php-fpm service if it is running
systemctl -q is-active php-fpm.service && systemctl disable php-fpm.service
systemctl -q is-active php-fpm.service && systemctl stop php-fpm.service
# Remove default php-fpm.service file
[ ! -e $SYSTEMD_UNITS_DIR_SYSTEM/php-fpm.service ] || \
	rm -f $SYSTEMD_UNITS_DIR_SYSTEM/php-fpm.service
# Copy php-fpm systemd file 
cp -v $PROJECT_INIT_SCRIPTS_DIR/php-fpm.service $SYSTEMD_UNITS_DIR_USER/
#systemctl --system daemon-reload
# Enable php-fpm
systemctl enable php-fpm.service
systemctl start php-fpm.service
# Disable cherokee server
systemctl disable cherokee.service
systemctl stop cherokee.service
# Enable nginx service
systemctl enable nginx.service
systemctl start nginx.service
}

nginx_fcgiwrap_install () {
rsync -avz --delete-after $PROJECT_GITHUB_DIR/fcgiwrap/ $INSTALL_SRC_DIR/fcgiwrap/
cd $INSTALL_SRC_DIR/fcgiwrap
autoreconf -i
./configure --prefix=/usr --libdir=$LIBDIR 
make_install_jambulatv
}

nginx_spawn_fcgi_configure () {
# Get WWW User and Group
set_www_user_group
# Backup orig spawn-fcgi file
cp -v $SYSCONFIG_DIR/spawn-fcgi $SYSCONFIG_DIR/spawn-fcgi.orig
# Modify patch 
cat $PROJECT_PATCHES_DIR/spawn.fcgi.patch \
| sed -e "s:WWW_USER:$WWW_USER:g" \
| sed -e "s:WWW_GROUP:$WWW_GROUP:g" > $TMPDIR/spawn.fcgi.patch
# Apply patch to spawn-fcgi file
patch -p1 $SYSCONFIG_DIR/spawn-fcgi < $TMPDIR/spawn.fcgi.patch
# Enable systemd startup
systemctl enable spawn-fcgi.service
# Start fcgiwrap service now 
systemctl start spawn-fcgi.service
}

rtgui_configure () {
# Unpack rtgui - Graphical frontend for rtorrent
rsync -avz --delete-after $PROJECT_GITHUB_DIR/rtgui/ $WWW_HTML_DIR/rtgui
# Get WWW User and Group
set_www_user_group
# Create config.php file using template and copy to WWW location
if [ ! -e $WWW_HTML_DIR/rtgui/config.php ];
then
cat $PROJECT_CONFIGS_DIR/rtgui.config.php.template | \
   sed -e "s:TORRENTS_WATCH_DIRECTORY:$TORRENTS_WATCH_DIRECTORY:g" | \
   sed -e "s:TORRENTS_PENDING_DIRECTORY:$TORRENTS_PENDING_DIRECTORY:g" | \
   sed -e "s:NETWORK_IP_ADDRESS:$NETWORK_IP_ADDRESS:g" \
> $WWW_HTML_DIR/rtgui/config.php
fi
# Give permissions to web user to acces rtgui
chown -R $WWW_USER:$WWW_GROUP $WWW_HTML_DIR/rtgui
# Add nginx config file if it does not exist
if [ ! -e $NGINX_CONF_DIR/sites-enabled/rtgui ];
then
cp -v $PROJECT_CONFIGS_DIR/nginx/sites-enabled/rtgui $NGINX_CONF_DIR/sites-enabled/
systemctl restart nginx.service
fi
# Display rtgui usage information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
RTGUI (rTorrent) Access
=======================
% To access your torrents, use a client PC to open the URL below:
  http://$NETWORK_IP_ADDRESS:$(grep -i 'rtgui$' $PORTS_ASSIGNED_FILE | awk {'print $1'})
#
EOF
}

mysqld_configure () {
# Apply my.cnf patch 
patch -p1 $CONFDIR/my.cnf < $PROJECT_PATCHES_DIR/mysqld.my.cnf.patch
}

freeradius_install () {
# Install freeradius server
tar jxvf $PROJECT_TARBALLS_DIR/freeradius-server-*.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v freeradius-server-* freeradius-server
cd $INSTALL_SRC_DIR/freeradius-server
./configure --prefix=$PREFIX --libdir=$LIBDIR --sysconfdir=$CONFDIR \
--localstatedir=$STATEDIR --enable-fast-install=no
make_install_jambulatv
#
# Add radiusd group and user
# ***************************
groupadd -r radiusd
useradd -r -M -c "Radius Server User" -g radiusd radiusd -s /sbin/nologin
}

freeradius_configure () {
# Configure MySQL DB for Freeradius
#**********************************
# Enable and start mysql service if it is not running
systemctl -q is-active mysqld.service || systemctl enable mysqld.service
systemctl -q is-active mysqld.service || systemctl start mysqld.service
# Change MySQL password if default is empty
mysqladmin password $MYSQL_ROOT_PASSWORD > /dev/null 2>&1 || clear && echo "Default MySQL password was already changed! Proceeding ..." && sleep 5
# Create radius database
mysqladmin -p$MYSQL_ROOT_PASSWORD create $FREERADIUS_DB_NAME
# Generate database tables using MySQL schema
mysql -u root -p$MYSQL_ROOT_PASSWORD $FREERADIUS_DB_NAME < $FREERADIUS_DB_SCHEMA
# Create SQL to set privileges on database
echo "
GRANT ALL PRIVILEGES ON $FREERADIUS_DB_NAME.* 
          to $FREERADIUS_DB_USER@localhost IDENTIFIED by '$FREERADIUS_DB_PASS';
" > $MYSQL_PRIVILEGES_FILE
# Set Privileges
mysql -u root -p$MYSQL_ROOT_PASSWORD < $MYSQL_PRIVILEGES_FILE
#
# Configure SQL modules
#************************
# sql module
cp -v $FREERADIUS_SQL_MODULE_FILE  $FREERADIUS_SQL_MODULE_FILE.orig
# Modify patch 
cat $PROJECT_PATCHES_DIR/radius.sql.module.patch \
| sed -e "s:FREERADIUS_DB_USER:$FREERADIUS_DB_USER:g" \
| sed -e "s:FREERADIUS_DB_PASS:$FREERADIUS_DB_PASS:g" > $TMPDIR/radius.sql.module.patch
# Apply patch 
patch -p1 $FREERADIUS_SQL_MODULE_FILE < $TMPDIR/radius.sql.module.patch
#
# sqlcounter module
cp -v $FREERADIUS_SQLCOUNTER_MODULE_FILE  $FREERADIUS_SQLCOUNTER_MODULE_FILE.orig
# Apply patch 
patch -p1 $FREERADIUS_SQLCOUNTER_MODULE_FILE < $PROJECT_PATCHES_DIR/radius.sqlcounter.module.patch
#
# Copy INCLUDED files - chillispot.conf
cp -v $PROJECT_CONFIGS_DIR/radius/chillispot.conf $FREERADIUS_SQL_COUNTERS_DIR/
#
# Configure radius clients file
# ******************************
cp -pv $FREERADIUS_CLIENTS_CONF_FILE $FREERADIUS_CLIENTS_CONF_FILE.orig
# Modify patch 
cat $PROJECT_PATCHES_DIR/radius.clients.conf.patch \
| sed -e "s:FREERADIUS_DB_PASS:$FREERADIUS_DB_PASS:g" > $TMPDIR/radius.clients.conf.patch
# Apply patch 
patch -p1 $FREERADIUS_CLIENTS_CONF_FILE < $TMPDIR/radius.clients.conf.patch
#
# Configure radiusd.conf file
# ***************************
cp -pv $FREERADIUS_RADIUSD_FILE $FREERADIUS_RADIUSD_FILE.orig
# Apply patch 
patch -p1 $FREERADIUS_RADIUSD_FILE < $PROJECT_PATCHES_DIR/radiusd.conf.patch
#
# Configure sites-enabled default file
# ************************************
# Patch freeradius sites-enabled defaults file
cp -pv $FREERADIUS_SITES_AVAIL_DEFAULT_FILE $FREERADIUS_SITES_AVAIL_DEFAULT_FILE.orig
patch -p1 $FREERADIUS_SITES_AVAIL_DEFAULT_FILE < $PROJECT_PATCHES_DIR/radius.sites.available.default.patch
#
# Configure sites-enabled inner-tunnel file
# ******************************************
# Patch freeradius sites-enabled inner.tunnels file
cp -pv $FREERADIUS_SITES_AVAIL_INNER_TUNNEL_FILE $FREERADIUS_SITES_AVAIL_INNER_TUNNEL_FILE.orig
patch -p1 $FREERADIUS_SITES_AVAIL_INNER_TUNNEL_FILE < $PROJECT_PATCHES_DIR/radius.sites.available.inner.tunnel.patch
#
# Add symlink to needed modules (sql, sqlcounter,etc ) in enabled modules directory
# IMPORTANT: Order is very Important
# ********************************************************************************
# sql
[ -e $FREERADIUS_MODULES_ENABLED_DIR/1.sql ] || \
ln -s $FREERADIUS_MODULES_AVAIL_DIR/sql $FREERADIUS_MODULES_ENABLED_DIR/1.sql
# sqlcounter
[ -e $FREERADIUS_MODULES_ENABLED_DIR/2.sqlcounter ] || \
ln -s $FREERADIUS_MODULES_AVAIL_DIR/sqlcounter $FREERADIUS_MODULES_ENABLED_DIR/2.sqlcounter
#
# Change ownership of config and log directories
# *************************************************
touch $STATEDIR/log/radius/radutmp # NAS accounting -on file
chown -R radiusd:radiusd $FREERADIUS_DB_CONF_DIR
chown -R radiusd:radiusd $STATEDIR/log/radius
#
# Configure systemd service file
# ******************************
# Copy radius systemd file 
cp -v $PROJECT_INIT_SCRIPTS_DIR/radiusd.service $SYSTEMD_UNITS_DIR_USER/
# Enable radiusd if needed
systemctl enable radiusd.service
#
# Create Admin User in radius MySQL database
# ******************************************
echo "INSERT INTO radcheck (UserName, Attribute, Value, Op) VALUES ('$FREERADIUS_ADMIN_USER', 'Cleartext-Password', '$FREERADIUS_ADMIN_PASS', ':=');" | mysql -u $FREERADIUS_DB_USER -p$FREERADIUS_DB_PASS $FREERADIUS_DB_NAME
#
# Copy logrotate file to reduce size of radius logs
cp -v $PROJECT_CONFIGS_DIR/logrotate/radius $LOGROTATE_CONF_DIR/
#
# Start radius for initialization purposes
# *****************************************
/usr/sbin/radiusd -X >> /dev/null &
}

freeradius_test () {
echo "
Testing connection to radius database:
**************************************
"
radtest $FREERADIUS_ADMIN_USER $FREERADIUS_ADMIN_PASS 127.0.0.1 0 $FREERADIUS_DB_PASS ||
# Notify of Radius connect error in final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
Radius Access
=============
% Error: Failed to connect to radius.  Please run test as follows, and troubleshoot:

  radtest $FREERADIUS_ADMIN_USER $FREERADIUS_ADMIN_PASS 127.0.0.1 0 $FREERADIUS_DB_PASS
#
EOF
}

freeradius_attributes_configure () {
# Add Max-All-Session attribute to dictionary.  Used by daloradius
echo "
# Max-All-Session attribute for daloradius
ATTRIBUTE      Max-All-Session         3000    integer" >> $FREERADIUS_DB_CONF_DIR/dictionary
}

daloradius_configure () {
# Unpack daloradius - Web frontend for radius
tar zxvf $PROJECT_TARBALLS_DIR/daloradius-*.tar.gz -C $WWW_HTML_DIR
cd $WWW_HTML_DIR
mv -v daloradius-* daloradius
# Get WWW User and Group
set_www_user_group
# Change permissions to www
chown -R $WWW_USER:$WWW_GROUP $WWW_HTML_DIR/daloradius
# Populate freeradius database tables with daloradius schema
mysql -u root -p$MYSQL_ROOT_PASSWORD $FREERADIUS_DB_NAME < $WWW_HTML_DIR/daloradius/contrib/db/mysql-daloradius.sql
# Modify and copy daloradius config file 
cat $PROJECT_CONFIGS_DIR/daloradius.conf.php.template | \
sed -e "s/FREERADIUS_DB_USER/$FREERADIUS_DB_USER/" | \
sed -e "s/FREERADIUS_DB_PASS/$FREERADIUS_DB_PASS/" | \
sed -e "s/FREERADIUS_DB_NAME/$FREERADIUS_DB_NAME/" \
	> $WWW_HTML_DIR/daloradius/library/daloradius.conf.php
# Display daloradius usage information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
Daloradius Access
=================
% To finish setup, use a client PC to open the URL below:
  http://$NETWORK_IP_ADDRESS:$(grep -i 'daloradius$' $PORTS_ASSIGNED_FILE | awk {'print $1'})
  password = radius
#
EOF
}

coova_chilli_install () {
# Unpack coova
rsync -avz --delete-after $PROJECT_GITHUB_DIR/coova-chilli/ $INSTALL_SRC_DIR/coova-chilli/
#
# BUG?: Patch Makefile to not treat warnins as errors
patch -p1 $INSTALL_SRC_DIR/coova-chilli/src/Makefile.am < $PROJECT_PATCHES_DIR/coova_src_Makefile.am.patch
#
# Patch redir.c to allow general logging of User-Agent
patch -p1 $INSTALL_SRC_DIR/coova-chilli/src/redir.c < $PROJECT_PATCHES_DIR/coova_src_redir.c.patch
# Prepare install sources/directory
cd $INSTALL_SRC_DIR/coova-chilli
sh bootstrap
# Configure and Compile coova
./configure --prefix=/usr --libdir=$LIBDIR --localstatedir=$STATEDIR --sysconfdir=$CONFDIR --with-openssl --with-poll --disable-static --enable-shared --enable-libjson --enable-miniportal --enable-chilliredir --enable-useragent --enable-sessionstate --enable-sessionid --enable-binstatusfile --enable-statusfile --enable-largelimits --enable-proxyvsa --enable-chilliproxy --enable-chilliradsec --enable-ssdp --enable-mdns --enable-redirinject
make_install_jambulatv
# Cache recently shared libraries 
ldconfig
# Copy coovachilli systemd file 
cp -v $PROJECT_INIT_SCRIPTS_DIR/coova-chilli.service $SYSTEMD_UNITS_DIR_USER/
# Enable coova-chilli if needed
systemctl enable coova-chilli.service
}

haserl_install () {
# Install haserl - Need for coova chilli embedded miniportal
tar zxvf $PROJECT_TARBALLS_DIR/haserl-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v haserl-* haserl
cd $INSTALL_SRC_DIR/haserl
./configure --prefix=/usr --libdir=$LIBDIR 
make_install_jambulatv
}

coova_chilli_configure () {
# Copy jambulatv-chilli script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-chilli ] || cp -v $PROJECT_BIN_DIR/jambulatv-chilli $BINARY_PREFIX/

# Modify chilli config file: UAM, radius passwords, etc...
# *******************************************************
cat $PROJECT_CONFIGS_DIR/coova-config.template | \
sed -e "s/INTERNET_GATEWAY_DEV/$NETWORK_ETHERNET_DEVICE/" | \
sed -e "s/WIRELESS_DEV/$WIFI_AP_INTERFACE/" | \
sed -e "s/HSSECRET/$COOVA_UAM_SECRET/" | \
sed -e "s/RADIUSSECRET/$FREERADIUS_DB_PASS/" | \
sed -e "s/HOST_IP/$COOVA_SERVER_IP/" | \
sed -e "s/JAMBULATV/$COOVA_SERVER_IP/" | \
sed -e "s/NETWORKSSID/$NETWORK_WIRELESS_SSID/" | \
sed -e "s/jambulatv.com/$NETWORK_DOMAIN/" | \
sed -e "s/DNS_SERVER_1/$NETWORK_DNS_1/" | \
sed -e "s/DNS_SERVER_2/$NETWORK_DNS_2/" | \
sed -e "s/HOTSPOT_SSID/$NETWORK_WIRELESS_SSID/" | \
sed -e "s/HOTSPOT_LOCATION/$COMPANY_NAME/" | \
sed -e "s/HOTSPOT_NETWORK/$NETWORK_WIRELESS_SSID/" | \
sed -e "s/NAS_MAC_ADDRESS/$WIFI_AP_MACADDRESS/" | \
sed -e "s/NAS_IP_ADDRESS/$COOVA_SERVER_IP/" | \
sed -e "s/# HS_ADMUSR=chillispot/HS_ADMUSR=$FREERADIUS_ADMIN_USER/" | \
sed -e "s/# HS_ADMPWD=chillispot/HS_ADMPWD=$FREERADIUS_ADMIN_PASS/" | \
sed -e "s/# HS_TCP_PORTS=\"80 443\"/HS_TCP_PORTS=\"$COOVA_OPEN_TCP_PORTS\"/" | \
sed -e "s/ALLOWED_MAC_ADDRESSES/\"$COOVA_PRIVILEGED_MAC\"/" \
	> $COOVA_CONFIG_FILE

# Setup SSL for coova chilli
# **************************
[ -d $COOVA_CONFIG_DIR/ssl ] || mkdir $COOVA_CONFIG_DIR/ssl
# Create SSL cert/key
ssl_cert_key_generate $COOVA_CONFIG_DIR/ssl/JambulaTV.crt $COOVA_CONFIG_DIR/ssl/JambulaTV.key 7300

# Specify DHCP Range for WiFi clients 
# ************************************
echo "# DHCP Range for WiFi clients 
dhcpstart $CHILLI_DHCP_START
dhcpend $CHILLI_DHCP_END" >> $COOVA_CONFIG_DIR/local.conf

# Patch functions file
# *********************
patch -p1 $COOVA_CONFIG_DIR/functions < $PROJECT_PATCHES_DIR/coova_functions.patch

# Patch up.sh script to allow HS_UDP_PORTS & UPNP in config
# **********************************************************
patch -p1 $COOVA_CONFIG_DIR/up.sh < $PROJECT_PATCHES_DIR/coova_up_sh.patch

# Create local ipup.sh script for chilli 
# ***************************************
echo "#!/bin/sh
# Jambula Chilli IPUP Script
# ----------------------------
# 
SYSCONFIG_DIR=/etc/sysconfig
SYSCONFIG_NETWORK_SCRIPTS_DIR=\$SYSCONFIG_DIR/network-scripts
NETWORK_ETHERNET_DEVICE=\`ip link | grep '2: ' | cut -d : -f2 | head -1 | sed -e 's/ //g'\`
NETWORK_GATEWAY_ADDRESS=\`grep GATEWAY \$SYSCONFIG_NETWORK_SCRIPTS_DIR/ifcfg-\$NETWORK_ETHERNET_DEVICE | cut -d = -f2 | sed \"s/\\\"//g\"\`
INTERNET_GATEWAY_DEV=\$(/usr/sbin/ip route list | grep default | sed -n 's/^.*dev //p' | awk '{print \$1}')
# Gateway device
if [ \"x\$INTERNET_GATEWAY_DEV\" != \"x\" ];
then
INTERNET_GATEWAY_IP=\$(/usr/sbin/ip route list | grep default | sed -n 's/^.*via //p' | awk '{print \$1}')
fi
TUNTAP=\$(basename \$DEV)



#################
#  MAIN SCRIPT  #
#################
# Delete existing default route
ip route del default > /dev/null 2>&1
# Set new default route
[ \"x\$INTERNET_GATEWAY_IP\" = \"x\" ] || ip route add default via \$INTERNET_GATEWAY_IP
#
# Allow IP masquerading through this box
if [ \"x\$INTERNET_GATEWAY_DEV\" != \"x\" ];
then
/bin/echo 1 > /proc/sys/net/ipv4/ip_forward
/usr/sbin/iptables -t nat -A POSTROUTING -o \$INTERNET_GATEWAY_DEV -j MASQUERADE
fi" > $COOVA_CONFIG_DIR/ipup.sh
#
# Make script executable
chmod 755 $COOVA_CONFIG_DIR/ipup.sh

# Create Chilli User in radius MySql database
echo "INSERT INTO radcheck (UserName, Attribute, Value, Op) VALUES ('$COOVA_NORMAL_USER_LOGIN', 'Cleartext-Password', '$COOVA_NORMAL_USER_PASSWORD', ':=');" | mysql -u $FREERADIUS_DB_USER -p$FREERADIUS_DB_PASS $FREERADIUS_DB_NAME
# Add My-Wifi-Devices config file
cat > $PROJECT_SYSTEM_CONF_DIR/my-wifi-devices.cfg << EOF
#   MAC address   | User  | Monitor 
00-00-00-00-00-00 | Sarah | yes
EOF
}

coova_chilli_customization () {
# Get WWW User and Group
set_www_user_group
# Web files
# *********
# Create WWW directory if non-existent
[ -d $COOVA_HTML_DIR ] || mkdir -p $COOVA_HTML_DIR
#
# Copy www files
mv -v $COOVA_CONFIG_DIR/www $COOVA_HTML_DIR
#
# Change ownership of coova HTML directory
chown -R $WWW_USER:$WWW_GROUP $COOVA_HTML_DIR

# Run patches
# -----------
# Create uamroot patch points to uamroot to $COOVA_HTML_DIR
echo "--- uam.sh.orig	2014-03-12 12:23:46.875850707 +0300
+++ uam.sh	2014-03-12 12:24:38.193288853 +0300
@@ -21,7 +21,7 @@
     return 0
 }
 
-uamrootdir=/etc/chilli
+uamrootdir=$COOVA_HTML_DIR
 uamwwwdir=\"\$uamrootdir/www\"
 tmpdir=\"/tmp\"" > $TMPDIR/coova_uamroot.patch 
# Apply uam file patch
patch -p1 $COOVA_HTML_DIR/www/uam.sh < $TMPDIR/coova_uamroot.patch
#
# Modify patch file config-local.sh -> to reflect free radius DB details - add user devices to db
cat $PROJECT_PATCHES_DIR/coova_login_config_local.patch | \
	sed "s:COOVACHILLI_DB_NAME:$FREERADIUS_DB_NAME:g" | \
	sed "s:COOVACHILLI_DB_USER:$FREERADIUS_DB_USER:g" | \
	sed "s:COOVACHILLI_DB_PASS:$FREERADIUS_DB_PASS:g" | \
	sed "s:PROJECT_SYSTEM_CONF_DIR:$PROJECT_SYSTEM_CONF_DIR:g" \
		> /tmp/coova_config_local.patch
# Apply patch
patch -p1 $COOVA_HTML_DIR/www/config-local.sh < /tmp/coova_config_local.patch
#
# patch login.chi: Redirect to customized Jambula Splash Web Pages
patch -p1 $COOVA_HTML_DIR/www/login.chi < $PROJECT_PATCHES_DIR/coova_login_chi.patch
#
# Patch pre-login screen so it reads 'Redirecting' instead of 'Jambula Labs'
patch -p1 $COOVA_HTML_DIR/www/coova.html < $PROJECT_PATCHES_DIR/coova_prelogin_title.patch
#
# Change all title references from My HotSpot to '$HS_LOCATION'
patch -p1 $COOVA_HTML_DIR/www/title.tmpl < $PROJECT_PATCHES_DIR/coova_login_title.patch
#
# Footer
patch -p1 $COOVA_HTML_DIR/www/footer.tmpl < $PROJECT_PATCHES_DIR/coova_login_footer.patch
#
# Header # Not necessary since splash is used.  I leave it here to be thorough
patch -p1 $COOVA_HTML_DIR/www/login.tmpl < $PROJECT_PATCHES_DIR/coova_login_header.patch   #
#
# copy wwwsh binary to coova html directory
mv -v $COOVA_CONFIG_DIR/wwwsh $COOVA_HTML_DIR/
#
# Add landing pages & custom html files to WWW
cp -rv $PROJECT_CUSTOMIZATION_DIR/coova/html/* $COOVA_HTML_DIR/www/
#
# Copy coova.jpg small logo
cp -fv $PROJECT_IMAGES_DIR/coova.jpg $COOVA_HTML_DIR/www
#
# Patch default nginx virtual host to enable redirection to hotspot portal page
patch -p1 $NGINX_CONF_DIR/sites-enabled/default < $PROJECT_PATCHES_DIR/nginx.default.portal.patch
#
systemctl restart nginx.service
#
# Display Coova Chilli's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
Coova-Chilli
============
% Create SSL certificates for coova-chilli:
 jambulatv-ssl-certificate-signing-request $COOVA_CONFIG_DIR/ssl
#
EOF
}

internet_connectivity_monitoring () {
[ -e $BINARY_PREFIX/jambulatv-dns-status-triggers ] || \
	cat $PROJECT_BIN_DIR/jambulatv-dns-status-triggers | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_NAME:$JAMBULATV_SETUP_DB_NAME:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_TABLE:$JAMBULATV_SETUP_DB_TABLE:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_USER:$JAMBULATV_SETUP_DB_USER:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_PASS:$JAMBULATV_SETUP_DB_PASS:g" | \
		sed -e "s:MY_USER_AGENT:$DEFAULT_USER_AGENT:g" \
			> $BINARY_PREFIX/jambulatv-dns-status-triggers 
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-dns-status-triggers 
#
# Copy jambulatv-speed-test helper script
[ -e $BINARY_PREFIX/jambulatv-speed-test ] || \
	cp -v $PROJECT_BIN_DIR/jambulatv-speed-test $BINARY_PREFIX/
}

hostapd_install () {
# sync hostapd sources excluding wpa_supplicant
rsync -avz --exclude=wpa_supplicant --delete-after $PROJECT_GITHUB_DIR/hostap/ $INSTALL_SRC_DIR/hostap/
# Patch Makefile: change bin,lib,include locations
cp -v $INSTALL_SRC_DIR/hostap/hostapd/Makefile $INSTALL_SRC_DIR/hostap/hostapd/Makefile.orig
cat $INSTALL_SRC_DIR/hostap/hostapd/Makefile.orig | \
	sed -e "s:/usr/local/lib/:$LIBDIR/:g" | \
	sed -e "s:/usr/local/include/:$INCDIR/:g" | \
	sed -e "s:/usr/local/bin/:$SBINARY_PREFIX/:g" \
		> $INSTALL_SRC_DIR/hostap/hostapd/Makefile
# Patch config file
cp -v $INSTALL_SRC_DIR/hostap/hostapd/defconfig $INSTALL_SRC_DIR/hostap/hostapd/defconfig.orig 
patch -p1 $INSTALL_SRC_DIR/hostap/hostapd/defconfig < $PROJECT_PATCHES_DIR/hostapd.defconfig.patch
# Compile latest hostapd from sources
cd $INSTALL_SRC_DIR/hostap/hostapd
cp -v defconfig .config
make_install_jambulatv
# Copy hostapd systemd file 
if [ "$VIRT_WIFI_SUPPORT" = "0" ];
then
# If connectify is enabled, then add 'Requires=connectify.service' to hostapd.service file
cp -v $PROJECT_INIT_SCRIPTS_DIR/hostapd-connectify.service $SYSTEMD_UNITS_DIR_USER/hostapd.service
else
cp -v $PROJECT_INIT_SCRIPTS_DIR/hostapd.service $SYSTEMD_UNITS_DIR_USER/
fi
# Enable hostapd if needed
systemctl enable hostapd.service
}

hostapd_configure () {
# Create hostapd config directory
# *******************************
[ -d $HOSTAPD_DIR ] || mkdir $HOSTAPD_DIR
#
# Copy hostapd config files
# **************************
cp -v $INSTALL_SRC_DIR/hostap/hostapd/hostapd.conf $HOSTAPD_DIR/hostapd.conf.orig
# Make some changes to hostapd.conf; and then
cat $PROJECT_CONFIGS_DIR/hostapd-conf.template | sed -e "s/HOSTAPD_GROUP/$HOSTAPD_GROUP/" | sed -e "s/WIFIDEVICE0/$WIFI_AP_INTERFACE/" | sed -e "s/NETWORK_WIRELESS_CHANNEL_NO/$NETWORK_WIRELESS_CHANNEL_NO/" | sed -e "s/JAMBULATV/$NETWORK_WIRELESS_SSID/" | sed -e "s/thankgodtodayisfridaynovember5/$NETWORK_WIRELESS_PASSPHRASE/"  > $HOSTAPD_DIR/hostapd.conf
#
# Add hostapd access control group
groupadd -r $HOSTAPD_GROUP
# Add jambula to hostapd access control group
usermod -a -G $HOSTAPD_GROUP $MULTIMEDIA_USER
#
# Disable wpa_supplicant service, which is automatically started by NetworkManager
# ********************************************************************************
[ ! -f $DBUS_SYSTEM_SERVICES_DIR/fi.w1.wpa_supplicant1.service ] || \
      mv -v $DBUS_SYSTEM_SERVICES_DIR/fi.w1.wpa_supplicant1.service \
      $DBUS_SYSTEM_SERVICES_DIR/fi.w1.wpa_supplicant1.service.disabled

# Copy over auto wifi provisioning tool, if none exists in bin directory
[ -e $AUTO_WIFI_PROVISION_TOOL ] || cat $PROJECT_BIN_DIR/jambulatv-auto-wifi-provision | \
	sed -e "s:MY_TMPDIR:$TMPDIR:g" | \
	sed -e "s:MY_SOUNDS_TOOL:$SOUNDS_TOOL:g" | \
	sed -e "s:MY_OSD_TOOL:$OSD_TOOL:g" | \
	sed -e "s:MY_SYSTEM_SHARE_DIR:$PROJECT_SYSTEM_SHARE_DIR:g" | \
	sed -e "s:MY_HOSTAPD_DIR:$HOSTAPD_DIR:g" | \
	sed -e "s:MY_TMPDIR:$TMPDIR:g" \
		> $AUTO_WIFI_PROVISION_TOOL
# Make script executable
chmod 755 $AUTO_WIFI_PROVISION_TOOL
#
# Display WiFi SSID and Passphrase post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
WiFi HotSpot
============
% To access the Wireless Access Point, please use the following credentials

	SSID:  $NETWORK_WIRELESS_SSID

	Passphrase:  $NETWORK_WIRELESS_PASSPHRASE

NOTE:  There is also an auto WiFi provisioning tool - use it during initial setup!
#
EOF
}

wpa_supplicant_install () {
# Sync wpa_supplicant sources excluding hostapd
rsync -avz --exclude=hostapd --delete-after $PROJECT_GITHUB_DIR/hostap/ $INSTALL_SRC_DIR/hostap/
#
# Remove existing wpa_supplicant rpm package
rpm -q wpa_supplicant > /dev/null 2>&1 && rpm -e --nodeps wpa_supplicant
[ -d $WIFI_WPA_CONFIG_DIR ] && rm -rf $WIFI_WPA_CONFIG_DIR
#
# Patch Makefile: change bin,lib,include locations
cp -v $INSTALL_SRC_DIR/hostap/wpa_supplicant/Makefile $INSTALL_SRC_DIR/hostap/wpa_supplicant/Makefile.orig
cat $INSTALL_SRC_DIR/hostap/wpa_supplicant/Makefile.orig | \
	sed -e "s:/usr/local/lib/:$LIBDIR/:g" | \
	sed -e "s:/usr/local/include/:$INCDIR/:g" | \
	sed -e "s:/usr/local/sbin/:$SBINARY_PREFIX/:g" \
		> $INSTALL_SRC_DIR/hostap/wpa_supplicant/Makefile
# Patch config file
cp -v $INSTALL_SRC_DIR/hostap/wpa_supplicant/defconfig $INSTALL_SRC_DIR/hostap/wpa_supplicant/defconfig.orig 
patch -p1 $INSTALL_SRC_DIR/hostap/wpa_supplicant/defconfig < $PROJECT_PATCHES_DIR/wpa_supplicant.defconfig.patch
# Compile latest wpa_supplicant from sources
cd $INSTALL_SRC_DIR/hostap/wpa_supplicant
cp -v defconfig .config
make_install_jambulatv
}

wpa_supplicant_configure () {
# Create WPA supplicant directory if non-existent
[ -d $WIFI_WPA_CONFIG_DIR ] || mkdir -p $WIFI_WPA_CONFIG_DIR
}

youtube_dl_install () {
# Copy sources to install directory
rsync -avz --delete-after $PROJECT_GITHUB_DIR/youtube-dl/ $INSTALL_SRC_DIR/youtube-dl/
cd $INSTALL_SRC_DIR/youtube-dl
#python setup.py install
#
# Compile youtube-dl with lazy-extractors
make lazy-extractors
make youtube-dl
#
# Copy youtube-dl binary 
cp -v $INSTALL_SRC_DIR/youtube-dl/youtube-dl $PREFIX/local/bin
# Create symbolic link to youtube-dl binary in /usr/local/bin
ln -s $PREFIX/local/bin/youtube-dl $BINARY_PREFIX/youtube-dl
}

youtube_setup () {
# Copy jambulatv-youtube script, if it does not exist in bin directory and add User-Agent string
[ -e $BINARY_PREFIX/jambulatv-youtube ] || \
	cat $PROJECT_BIN_DIR/jambulatv-youtube | \
		sed -e "s:MY_USER_AGENT:$HTTP_BROWSER_USERAGENT_YOUTUBE:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_NAME:$JAMBULATV_SETUP_DB_NAME:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_TABLE:$JAMBULATV_SETUP_DB_TABLE:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_USER:$JAMBULATV_SETUP_DB_USER:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_PASS:$JAMBULATV_SETUP_DB_PASS:g" | \
		sed -e "s:MY_TVHEADEND_LOG_FILE:$TVHEADEND_LOG_FILE:g" | \
		sed -e "s:MY_KODI_LOG_FILE:$KODI_LOG_FILE:g" \
			> $BINARY_PREFIX/jambulatv-youtube 
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-youtube 
}

gstreamer_install () {
tar xvf $PROJECT_TARBALLS_DIR/gstreamer-$GSTREAMER_VERSION.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v gstreamer-* gstreamer
# Compile
cd $INSTALL_SRC_DIR/gstreamer && ./configure --prefix=$PREFIX --libdir=$LIBDIR \
   --localstatedir=$STATEDIR
make_install_jambulatv
}

gstreamer_plugins_install () {
for GST_PLUGIN in \
base \
good \
bad \
ugly 
do
# unpack
tar xvf $PROJECT_TARBALLS_DIR/gst-plugins-$GST_PLUGIN-$GSTREAMER_VERSION.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v gst-plugins-$GST_PLUGIN-* gst-plugins-$GST_PLUGIN
# configure
cd $INSTALL_SRC_DIR/gst-plugins-$GST_PLUGIN && ./configure --prefix=$PREFIX \
   --libdir=$LIBDIR --localstatedir=$STATEDIR
# compile
make_install_jambulatv
done
}

tumbler_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/tumbler-*.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v tumbler-* tumbler
# Compile
cd $INSTALL_SRC_DIR/tumbler && ./configure --prefix=$PREFIX \
--libdir=$LIBDIR
make_install_jambulatv
}

rygel_deps_install () {
# IMPORTANT: USE ONLY LISTED VERSIONS of libgee, tracker
for DEP_PKG in \
gssdp \
gupnp \
libgee \
gupnp-av \
gupnp-dlna \
tracker
do
# unpack
tar xvf $PROJECT_TARBALLS_DIR/$DEP_PKG-*.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v $DEP_PKG-* $DEP_PKG
cd $INSTALL_SRC_DIR/$DEP_PKG 
# configure
# Change configure command for gupnp
if [ "$DEP_PKG" = "gupnp" ];
then
./configure --prefix=$PREFIX --libdir=$LIBDIR --localstatedir=$STATEDIR \
    --with-context-manager=linux
else
./configure --prefix=$PREFIX --libdir=$LIBDIR --localstatedir=$STATEDIR
fi
# compile
make_install_jambulatv
done
}

rygel_install () {
tar xvf $PROJECT_TARBALLS_DIR/rygel-$RYGEL_VERSION.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v rygel-* rygel
# Compile
cd $INSTALL_SRC_DIR/rygel && ./configure --prefix=$PREFIX --libdir=$LIBDIR \
   --sysconfdir=$PROJECT_SYSTEM_CONF_DIR/rygel --localstatedir=$STATEDIR \
   --with-media-engine=gstreamer --without-ui
make_install_jambulatv
#
# Add rygel group and user
groupadd -r rygel
useradd -r -M -c "Rygel DNLA Server User" -g rygel rygel -s /sbin/nologin
}

rygel_configure () {
# Create rygel config directory
[ -d $PROJECT_SYSTEM_CONF_DIR/rygel ] || mkdir -p $PROJECT_SYSTEM_CONF_DIR/rygel
# Config file
cp -v $PROJECT_CONFIGS_DIR/rygel.conf.sample  $PROJECT_SYSTEM_CONF_DIR/rygel/rygel.conf
# Change permissions of config directory to owner
chown -R rygel:rygel $PROJECT_SYSTEM_CONF_DIR/rygel
# Enable rygel service
cp -v $PROJECT_INIT_SCRIPTS_DIR/rygel.service $SYSTEMD_UNITS_DIR_SYSTEM/
ln -s $SYSTEMD_UNITS_DIR_SYSTEM/rygel.service $SYSTEMD_UNITS_DIR_USER/rygel.service
systemctl --system daemon-reload
# Enable rygel if needed
systemctl enable rygel.service
}

minidlna_install () {
# Install minidlna
tar zxvf $PROJECT_TARBALLS_DIR/minidlna-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v minidlna* minidlna
# Patches
patch -p1 $INSTALL_SRC_DIR/minidlna/upnpglobalvars.h < $PROJECT_PATCHES_DIR/minidlna.upnpglobalvars.patch
patch -p1 $INSTALL_SRC_DIR/minidlna/upnpsoap.h < $PROJECT_PATCHES_DIR/minidlna.upnpsoap.patch
#
# copy icons.c file
cp -fv $PROJECT_IMAGES_DIR/minidlna.logo $INSTALL_SRC_DIR/minidlna/icons.c
#
# Customize configure script for our project
cp -v $INSTALL_SRC_DIR/minidlna/configure $INSTALL_SRC_DIR/minidlna/configure.orig
cat $INSTALL_SRC_DIR/minidlna/configure.orig | \
	sed -e "s:#define ROOTDEV_MANUFACTURER \"NETGEAR\":#define ROOTDEV_MANUFACTURER \"$COMPANY_NAME\":g" | \
	sed -e "s|#define ROOTDEV_MANUFACTURERURL \"http\://www.netgear.com/\"|#define ROOTDEV_MANUFACTURERURL \"$COMPANY_URL\"|g" | \
	sed -e "s:#define ROOTDEV_MODELNAME \"Windows Media Connect compatible (ReadyDLNA)\":#define ROOTDEV_MODELNAME \"$PRODUCT_MODEL_NAME (ReadyDLNA Compatible)\":g" | \
	sed -e "s:#define ROOTDEV_MODELDESCRIPTION \"ReadyDLNA\":#define ROOTDEV_MODELDESCRIPTION \"$PROJECT_NAME Multimedia and Home Automation Hub\":g" | \
	sed -e "s|#define ROOTDEV_MODELURL OS_URL|#define ROOTDEV_MODELURL \"$PROJECT_URL\"|g" \
		> $INSTALL_SRC_DIR/minidlna/configure
# Configure
cd $INSTALL_SRC_DIR/minidlna
./configure --prefix=$PREFIX --libdir=$LIBDIR --localstatedir=$STATEDIR \
	--sysconfdir=$PROJECT_SYSTEM_CONF_DIR --enable-tivo \
	--enable-netgear --enable-readynas --with-os-name=$PROJECT_NAME \
	--with-os-version=$PROJECT_VERSION --with-os-url=$PROJECT_URL
make_install_jambulatv
#
# Add minidlna group and user
groupadd -r minidlna
useradd -r -M -c "MiniDLNA Server User" -g minidlna minidlna -s /sbin/nologin
}

minidlna_configure () {
# Create minidlna config directory
if [ ! -e $PROJECT_SYSTEM_CONF_DIR/minidlna.conf ];
then
# Use template to generate minidlna.conf file
cat $PROJECT_CONFIGS_DIR/minidlna.conf.sample | \
	sed -e "s:USER_TV_SHOWS_DIR:$USER_TV_SHOWS_DIR:g" | \
	sed -e "s:USER_MOVIES_DIR:$USER_MOVIES_DIR:g" | \
	sed -e "s:USER_TV_RECORDINGS_DIR:$USER_TV_RECORDINGS_DIR:g" | \
	sed -e "s:USER_MUSIC_DIR:$USER_MUSIC_DIR:g" | \
	sed -e "s:PODCASTS_DIRECTORY:$PODCASTS_DIRECTORY:g" | \
	sed -e "s:USER_PICTURES_DIR:$USER_PICTURES_DIR:g" | \
	sed -e "s:MODEL_NUMBER:$PRODUCT_MODEL_NUMBER:g" | \
	sed -e "s:SERIAL_NUMBER:$PRODUCT_SERIAL_NUMBER:g" > $PROJECT_SYSTEM_CONF_DIR/minidlna.conf
fi
# Change permissions of config directory to owner
chown -R minidlna:minidlna $PROJECT_SYSTEM_CONF_DIR/minidlna.conf
# Create minidlna cache, logs directories
[ -d $PROJECT_SYSTEM_CACHE_DIR/minidlna ] || mkdir -p $PROJECT_SYSTEM_CACHE_DIR/minidlna
[ -d $PROJECT_SYSTEM_LOG_DIR/minidlna ] || mkdir -p $PROJECT_SYSTEM_LOG_DIR/minidlna
# Change permissions of cache, log directories to owner/group
chown -R minidlna:minidlna $PROJECT_SYSTEM_CACHE_DIR/minidlna
chown -R minidlna:minidlna $PROJECT_SYSTEM_LOG_DIR/minidlna
# minidlna service
cp -v $PROJECT_INIT_SCRIPTS_DIR/minidlna.service $SYSTEMD_UNITS_DIR_USER/
# Enable minidlna if needed
systemctl enable minidlna.service
#
# Display miniDLNA's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
MiniDLNA
========
% Do an initial scan of media directories  using the command:
  minidlnad -R -f $PROJECT_SYSTEM_CONF_DIR/minidlna.conf
#
EOF
}

xupnpd_install () {
# Install xupnpd server
rsync -avz --delete-after $PROJECT_GITHUB_DIR/xupnpd/ $INSTALL_SRC_DIR/xupnpd/
cd $INSTALL_SRC_DIR/xupnpd/src
# Log to build file
make_build_log
# Make
make
}

xupnpd_configure () {
# Copy all files from source
rsync -av $INSTALL_SRC_DIR/xupnpd/src/ $PROJECT_SYSTEM_CONF_DIR/xupnpd/
# Change xupnd directory permissions
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PROJECT_SYSTEM_CONF_DIR/xupnpd
#
# Use template to generate xupnpd.lua file
cat $PROJECT_CONFIGS_DIR/xupnpd.lua.sample | \
	sed -e "s/WIRELESS_DEV/$WIFI_AP_INTERFACE/" | \
	sed -e "s/MULTICAST_PROXY_IP/$COOVA_SERVER_IP/" | \
	sed -e "s:USER_TV_SHOWS_DIR:$USER_TV_SHOWS_DIR:g" | \
	sed -e "s:USER_MOVIES_DIR:$USER_MOVIES_DIR:g" | \
	sed -e "s:PODCASTS_DIRECTORY:$PODCASTS_DIRECTORY:g" | \
	sed -e "s:USER_MUSIC_DIR:$USER_MUSIC_DIR:g" | \
	sed -e "s:USER_PICTURES_DIR:$USER_PICTURES_DIR:g" | \
	sed -e "s:PLAYLISTS_DIRECTORY:$PLAYLISTS_DIRECTORY:g" | \
	sed -e "s:DEVICE_UUID:$SYSTEM_UUID:g" > $PROJECT_SYSTEM_CONF_DIR/xupnpd/xupnpd.lua
#
# Copy xupnpd systemd file 
cp -v $PROJECT_INIT_SCRIPTS_DIR/xupnpd.service $SYSTEMD_UNITS_DIR_USER/
# Enable xupnpd 
systemctl enable xupnpd.service
#
# Display xupnpd's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
XUPNPD
========
% Please setup a TV playlist for use by xupnpd.  For example:

  $CURL_CMD $CURL_OPTS -A 'Mozilla/5.0' http://$NETWORK_IP_ADDRESS:9981/playlist/channels

#
EOF
}

playlists_configure () {
# Add playlists directory
[ -d $PLAYLISTS_DIRECTORY ] || mkdir -p $PLAYLISTS_DIRECTORY
# Add DVB-T Live TV playlists if any
ls $PROJECT_CONTRIB_DIR/tv/digital/*.m3u* > /dev/null 2>&1 && \
	cp -v $PROJECT_CONTRIB_DIR/tv/digital/*.m3u* $PLAYLISTS_DIRECTORY
# Add World IP TV playlists if any
ls $PROJECT_CONTRIB_DIR/tv/iptv/*.m3u* > /dev/null 2>&1 && \
	cp -v $PROJECT_CONTRIB_DIR/tv/iptv/*.m3u* $PLAYLISTS_DIRECTORY

# Add Live Events Playlist Menu used by plugin.video.jambula.live.events
cp -v $PROJECT_CONFIGS_DIR/kodi/live-events.xml $PLAYLISTS_DIRECTORY
# Get WWW User and Group
set_www_user_group
# Change playlist directory permissions: IMPORTANT: User='Web User' Group='Multimedia User'
chown -R $WWW_USER:$MULTIMEDIA_USER $PLAYLISTS_DIRECTORY
chmod -R 775 $PLAYLISTS_DIRECTORY
}

video_on_demand_configure () {
# Create incron tab file for vlm vod
echo "
$VLM_VOD_DIRECTORY IN_CREATE $VLM_VOD_CREATE_TOOL \$#
#$VLM_VOD_DIRECTORY IN_DELETE $VLM_VOD_DELETE_TOOL \$# 
" > $INCRON_DIRECTORY/vlm_vod
# Create vlm vod directory
[ -d $VLM_VOD_DIRECTORY ] || mkdir -p $VLM_VOD_DIRECTORY
# Enable incrond.service at boot
systemctl enable incrond.service
# Start incrond.service at boot
systemctl start incrond.service
# Add vlm vod scripts if they don't exist in bin directory
for SCRIPT in \
	jambulatv-create-video-on-demand \
	jambulatv-create-tv-on-demand \
	jambulatv-vlc-vlm-server
do
[ -e $BINARY_PREFIX/$SCRIPT ] || cp -v $PROJECT_BIN_DIR/$SCRIPT $BINARY_PREFIX/
done
}

rtmpdump_install () {
rsync -avz --delete-after $PROJECT_GITHUB_DIR/rtmpdump/ $INSTALL_SRC_DIR/rtmpdump/
cd $INSTALL_SRC_DIR/rtmpdump
# Change prefix in Makefile
sed -i "s:prefix=/usr/local:prefix=/usr:g" Makefile
# Log to build file
make_build_log
# Make
make -s SYS=posix
make install
}

rtl_sdr_install () {
# Unpack
rsync -av --delete-after $PROJECT_GITHUB_DIR/rtl-sdr/ $INSTALL_SRC_DIR/rtl-sdr/
# configure
cd $INSTALL_SRC_DIR/rtl-sdr
# Create cmake build directory
mkdir build
cd build
# Log to build file
cmake_build_log
# cMake
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX \
	-DDETACH_KERNEL_DRIVER=ON -DINSTALL_UDEV_RULES=ON ..
make install
ldconfig
}

fmradio_streamer_setup () {
[ -e $BINARY_PREFIX/jambulatv-fmradio-streamer ] || \
	cat $PROJECT_BIN_DIR/jambulatv-fmradio-streamer | \
		sed -e "s:MY_FMRADIO_STREAMER_PORT:$FMRADIO_STREAMER_PORT:g" | \
		sed -e "s:MY_PROJECT_SYSTEM_LOG_DIR:$PROJECT_SYSTEM_LOG_DIR:g" | \
		sed "s:MY_TMPDIR:$TMPDIR:g" \
			> $BINARY_PREFIX/jambulatv-fmradio-streamer
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-fmradio-streamer
}

TermFeed_install () {
get_python_version
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/TermFeed-*.tgz -C $INSTALL_SRC_DIR
# Patch
patch -p1 $INSTALL_SRC_DIR/TermFeed/termfeed/feed.py < $PROJECT_PATCHES_DIR/termfeed.patch
#
cd $INSTALL_SRC_DIR/TermFeed 
# Compile
python setup.py install --install-lib=$PYTHON_SITEDIR
}

usbreset_install () {
# Unpack usbreset 
tar zxvf $PROJECT_TARBALLS_DIR/usbreset.tgz -C $INSTALL_SRC_DIR

# Compile usbreset program
cd $INSTALL_SRC_DIR/usbreset && \
	cc usbreset.c -o $BINARY_PREFIX/usbreset

# Copy jambulatv-usb-device-reset script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-usb-device ] || \
	cp -v $PROJECT_BIN_DIR/jambulatv-usb-device $BINARY_PREFIX/
}

screen_resolution_configure () {
# Copy jambulatv-screen-resolution script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-screen-resolution ] || \
	cp -v $PROJECT_BIN_DIR/jambulatv-screen-resolution $BINARY_PREFIX/
}

screen_display_configure () {
# Copy jambulatv-display script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-display ] || \
	cp -v $PROJECT_BIN_DIR/jambulatv-display $BINARY_PREFIX/
}

screenshots_configure () {
# Copy jambulatv-screenshots script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-screenshots ] || \
	cp -v $PROJECT_BIN_DIR/jambulatv-screenshots $BINARY_PREFIX/
}

vnstat_install () {
# unpack
rsync -avz $PROJECT_GITHUB_DIR/vnstat/ $INSTALL_SRC_DIR/vnstat/
cd $INSTALL_SRC_DIR/vnstat 
# configure
./configure --prefix=$PREFIX --libdir=$LIBDIR --sysconfdir=$PROJECT_SYSTEM_CONF_DIR/vnstat
# compile
make_install_jambulatv
}

vnstat_configure () {
# Add log directories
[ -d $PROJECT_SYSTEM_LOG_DIR/vnstat ] || mkdir -p $PROJECT_SYSTEM_LOG_DIR/vnstat
#touch $PROJECT_SYSTEM_LOG_DIR/vnstat/vnstat.log
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PROJECT_SYSTEM_LOG_DIR/vnstat

# Backup default config file
[[ -e ${VNSTAT_CONFIG_FILE}.default ]] || \
	mv -v ${VNSTAT_CONFIG_FILE} ${VNSTAT_CONFIG_FILE}.default
# Add custom vnstat config file
cat $PROJECT_CONFIGS_DIR/vnstat.conf.template | \
	sed -e "s:MY_WIFI_STATION_INTERFACE:$WIFI_STATION_INTERFACE:g" | \
	sed -e "s:MY_MULTIMEDIA_USER:$MULTIMEDIA_USER:g" | \
	sed -e "s:MY_PROJECT_SYSTEM_LOG_DIR:$PROJECT_SYSTEM_LOG_DIR:g" | \
	sed -e "s:MY_RUNDIR:$RUNDIR:g" \
		> $VNSTAT_CONFIG_FILE

# Configure Systemd service file
cat $PROJECT_INIT_SCRIPTS_DIR/vnstat.service | \
	sed "s:MY_VNSTAT_CONFIG_FILE:$VNSTAT_CONFIG_FILE:g" \
		> $SYSTEMD_UNITS_DIR_USER/vnstat.service
# Enable vnstat if needed
systemctl enable vnstat.service
# Start vnstat if needed
systemctl start vnstat.service
}

bwm_ng_install () {
# unpack
rsync -avz $PROJECT_GITHUB_DIR/bwm-ng/ $INSTALL_SRC_DIR/bwm-ng/
cd $INSTALL_SRC_DIR/bwm-ng 
# configure
./autogen.sh
./configure --prefix=$PREFIX --libdir=$LIBDIR
# compile
make_install_jambulatv
}

bandwidth_measurement_setup () {
# Copy data bandwidth tool, if it does not exist in bin directory
[[ -e $BANDWIDTH_TOOL ]] || cp -v $PROJECT_BIN_DIR/jambulatv-bandwidth $BANDWIDTH_TOOL
# Make tool executable
chmod 755 $BANDWIDTH_TOOL

# Create bandwidth usage logs directory if non-existent
[ -d $BANDWIDTH_USAGE_LOG_DIR ] || mkdir -p $BANDWIDTH_USAGE_LOG_DIR
# Give jambulatv user permissions to log directory
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $BANDWIDTH_USAGE_LOG_DIR

# Bandwidth Query systemd unit
# -----------------------------
# Configure and copy systemd unit (.service) file if not present
[[ -e $SYSTEMD_UNITS_DIR_USER/jambulatv-bandwidth-query@.service ]] || \
	cat $PROJECT_INIT_SCRIPTS_DIR/jambulatv-bandwidth-query@.service | \
		sed -e "s:MY_WIFI_STATION_INTERFACE:$WIFI_STATION_INTERFACE:g" | \
		sed -e "s:MY_BANDWIDTH_TOOL:$BANDWIDTH_TOOL:g" | \
		sed -e "s:MY_MULTIMEDIA_USER:$MULTIMEDIA_USER:g" \
			> $SYSTEMD_UNITS_DIR_USER/jambulatv-bandwidth-query@.service
#
# Bandwidth Query systemd timers
# ------------------------------
for PERIOD in yesterday week month
do
# Copy daily, weekly, and monthly systemd timers if not present
[[ -e $SYSTEMD_UNITS_DIR_USER/jambulatv-bandwidth-query-${PERIOD}.timer ]] || \
	cp -v $PROJECT_INIT_SCRIPTS_DIR/jambulatv-bandwidth-query-${PERIOD}.timer $SYSTEMD_UNITS_DIR_USER/
# Enable & start daily, weekly, and monthly systemd timers if not present
systemctl enable jambulatv-bandwidth-query-${PERIOD}.timer
systemctl start jambulatv-bandwidth-query-${PERIOD}.timer
done
#
# Bandwidth Monitor systemd unit
# ------------------------------
# Configure and copy systemd unit (.service) file if not present
[[ -e $SYSTEMD_UNITS_DIR_USER/jambulatv-bandwidth-monitor@.service ]] || \
	cat $PROJECT_INIT_SCRIPTS_DIR/jambulatv-bandwidth-monitor@.service | \
		sed -e "s:MY_WIFI_STATION_INTERFACE:$WIFI_STATION_INTERFACE:g" | \
		sed -e "s:MY_BANDWIDTH_TOOL:$BANDWIDTH_TOOL:g" | \
		sed -e "s:MY_MULTIMEDIA_USER:$MULTIMEDIA_USER:g" \
			> $SYSTEMD_UNITS_DIR_USER/jambulatv-bandwidth-monitor@.service
}

iptv_support () {
# Copy IPTV xml files to html directory
cp -rv $PROJECT_CONTRIB_DIR/iptv $WWW_HTML_DIR
# Change MPlayer and Xine binaries to use jambulatv wrappers
cp -v $FREEVO_USER_HOME_DIR/freevo.conf $FREEVO_USER_HOME_DIR/freevo.conf.orig
cat $FREEVO_USER_HOME_DIR/freevo.conf.orig | \
  sed -e "s:mplayer = /bin/mplayer:mplayer = $BINARY_PREFIX/jambulatv-mplayer:g" | \
  sed -e "s:xine = /bin/xine:xine = $BINARY_PREFIX/jambulatv-xine:g" \
    > $FREEVO_USER_HOME_DIR/freevo.conf
}

dvb_drivers_support () {
# Copy DVB Drivers into firmware directory
rsync -av $PROJECT_GITHUB_DIR/dvb-firmware/firmware/ $FIRMWARE_DIR/
# Do not powerdown on sleep for some DVB sticks like August 210
cp -v $PROJECT_CONFIGS_DIR/dvb.conf.sample $MODPROBE_DIR/dvb.conf
}

w_scan_install () {
# Remove existing w_scan rpm package if any
rpm -q w_scan > /dev/null 2>&1 && rpm -e --nodeps w_scan
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/w_scan-*.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v w_scan-* w_scan
# Compile
cd $INSTALL_SRC_DIR/w_scan && ./configure --prefix=$PREFIX \
--libdir=$LIBDIR
make_install_jambulatv
}

xmltv_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/xmltv-*.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v xmltv-* xmltv
# Compile
cd $INSTALL_SRC_DIR/xmltv
echo "yes" | perl Makefile.PL PREFIX=$PREFIX
make_install_jambulatv
}

email_smtp_install () {
# Install Email - A standalone SMTP-Like client (Required)
rsync -av --delete-after $PROJECT_GITHUB_DIR/eMail/ $INSTALL_SRC_DIR/eMail/
cd $INSTALL_SRC_DIR/eMail
./configure --prefix=$PREFIX --with-ssl --mandir $MANDIR1 --sysconfdir $CONFDIR
make_install_jambulatv
}

email_smtp_configure () {
# BUG: Fix email not running if VCARD is not properly defined 
cp -v $EMAIL_CONFIG_DIR/email.conf $EMAIL_CONFIG_DIR/email.conf.orig
# Change path of our email signature file
cat $EMAIL_CONFIG_DIR/email.conf.orig | \
	sed -e "s:SIGNATURE_FILE    = '&/email.sig':SIGNATURE_FILE    = '$EMAIL_SIGNATURE_FILE':" | \
	sed -e 's/VCARD =/#VCARD =/g' > $EMAIL_CONFIG_DIR/email.conf
# Add email signature file
cat > $EMAIL_SIGNATURE_FILE << EOF
---------
This message was sent using your $PROJECT_NAME, a product of
                            
	 ââ         â       ââ          â       â       
	  â  ââ âââ âââ â â  â   ââ     â    ââ âââ  ââ 
	  â â â âââ âââ â â  â  â â     â   â â âââ â â 
	  â âââ âââ â â â â  â  âââ     â   âââ â â  ââ 
	âââ âââ âââ âââ âââ  ââ âââ     âââââââ âââ âââ 

	   $COPYRIGHT_NOTICE
EOF
}

email_via_gmail_setup () {
# Copy Email via GMail tool, if it does not exist in bin directory
[ -e $EMAIL_VIA_GMAIL_TOOL ] || cp -v $PROJECT_BIN_DIR/jambulatv-email $BINARY_PREFIX/
# Add usernames, passwords credentials to Gmail config
cat > $EMAIL_GMAIL_CONFIG << EOF
EMAIL_CMD=$BINARY_PREFIX/email
EMAIL_OPTIONS="-V --tls"
MACHINE_HOST=$(hostname -d)
EMAIL_FROM_FULLNAME=$(hostname -d)
EMAIL_FROM_ADDRESS=$(hostname -s)@$(hostname -d)

EMAIL_SMTP_SERVER_NAME=smtp.gmail.com
EMAIL_SMTP_SERVER_PORT=587
EOF
}

freeswitch_install () {
rsync -avz --delete-after $PROJECT_GITHUB_DIR/freeswitch/ $INSTALL_SRC_DIR/freeswitch/
cd $INSTALL_SRC_DIR/freeswitch
./bootstrap.sh
./configure --prefix=$PREFIX --libdir=$LIBDIR/freeswitch \
  --sysconfdir=$CONFDIR/freeswitch --localstatedir=$STATEDIR \
  --with-modinstdir=$PREFIX/freeswitch/mod \
  --with-dbdir=$PREFIX/freeswitch/db \
  --with-soundsdir=$PREFIX/freeswitch/sounds \
  --with-recordingsdir==$PREFIX/freeswitch/recordings \
  --with-grammardir=$PREFIX/freeswitch/grammar \
  --with-scriptdir=$PREFIX/freeswitch/scripts \
  --with-htdocsdir=$WWW_HTML_DIR/freeswitch
# Log to build file
make_build_log
# Make
make all install 
#
# Make sounds directory
#[ -d $PREFIX/freeswitch/sounds ] || mkdir -p $PREFIX/freeswitch/sounds
# Copy sounds packages to source directory
cp -v $PROJECT_TARBALLS_DIR/freeswitch-sounds-*.tar.gz $INSTALL_SRC_DIR/freeswitch
cd $INSTALL_SRC_DIR/freeswitch
# Make
make cd-sounds-install           
make cd-moh-install  
}

gsmopen_install () {
# gsm_open pre-requisite - gsmlib
cd $INSTALL_SRC_DIR/freeswitch/src/mod/endpoints/mod_gsmopen/gsmlib/gsmlib-1.10-patched-13ubuntu
./configure prefix=/usr
make_install_jambulatv
ldconfig
# gsm_open pre-requisite - libctb
cd $INSTALL_SRC_DIR/freeswitch/src/mod/endpoints/mod_gsmopen/libctb-*/build
make prefix=/usr DEBUG=0 GPIB=0
make DEBUG=0 GPIB=0 install
#ln -s /usr/lib/libctb-0.16.so $LIBDIR/libctb-0.16.so
ldconfig
# Make and install gsm_open
cd $INSTALL_SRC_DIR/freeswitch/src/mod/endpoints/mod_gsmopen
make_install_jambulatv
}

gsmopen_configure () {
cd $INSTALL_SRC_DIR/freeswitch/src/mod/endpoints/mod_gsmopen/configs
cp -v gsmopen.conf.xml /etc/freeswitch/autoload_configs/
#/etc/freeswitch/autoload_configs/gsmopen.conf.xml
}

owncloud_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/owncloud-*tar.bz2 -C $WWW_HTML_DIR
# Change permissions to allow for install
chmod -R 777 $WWW_HTML_DIR/owncloud
# Copy owncloud nginx config file or run the command:
[ -e $NGINX_CONF_DIR/sites-enabled/owncloud ] || cp -v $PROJECT_CONFIGS_DIR/nginx/sites-enabled/owncloud $NGINX_CONF_DIR/sites-enabled/
# Restart nginx
systemctl restart nginx.service
#
# Generate owncloud instance ID
$CURL_CMD $CURL_OPTS -A 'Mozilla/5.0' -o /dev/null http://$NETWORK_IP_ADDRESS:$(grep -i 'owncloud$' $PORTS_ASSIGNED_FILE | awk {'print $1'})
# Get instance ID
OWNCLOUD_INSTANCE_ID=$(grep 'instanceid' $WWW_HTML_DIR/owncloud/config/config.php | awk {'print $3'} | sed "s:'::g" | cut -d , -f1)
# Generate initial owncloud config
cat > $OWNCLOUD_CONFIG_FILE << EOF
<?php
\$CONFIG = array (
  'instanceid' => '$OWNCLOUD_INSTANCE_ID',
  'trusted_domains' => 
  array (
    0 => '$NETWORK_IP_ADDRESS', '$COOVA_SERVER_IP', '$OWNCLOUD_WWW_SERVER_NAME'
  ),
  'datadirectory' => '$OWNCLOUD_DATA_DIRECTORY',
  'overwrite.cli.url' => 'http://$NETWORK_IP_ADDRESS:$(grep -i 'owncloud$' $PORTS_ASSIGNED_FILE | awk {'print $1'})',
  'dbtype' => 'sqlite3',
  'logfile' => '$PROJECT_SYSTEM_LOG_DIR/owncloud.log',
  'logtimezone' => '$TIMEZONE',
  'mail_domain' => '$NETWORK_DOMAIN',
  'mail_from_address' => '$PROJECT_NAME',
);
EOF
}

owncloud_configure () {
# Create data directory for owncloud
[ -d $OWNCLOUD_DATA_DIRECTORY ] || mkdir -p $OWNCLOUD_DATA_DIRECTORY
# Make custom cache directory if not existent
[ -d $OWNCLOUD_DATA_DIRECTORY/$OWNCLOUD_ADMIN_USER/cache ] || mkdir -p $OWNCLOUD_DATA_DIRECTORY/$OWNCLOUD_ADMIN_USER/cache
# Make custom files directory if not existent
[ -d $OWNCLOUD_DATA_DIRECTORY/$OWNCLOUD_ADMIN_USER/files ] || mkdir -p $OWNCLOUD_DATA_DIRECTORY/$OWNCLOUD_ADMIN_USER/files
# Add link to /JambulaTV folder - Find a better way to access these files
ln -s $PROJECT_PARTITION $OWNCLOUD_DATA_DIRECTORY/$OWNCLOUD_ADMIN_USER/files/$PROJECT_NAME
# Get WWW User and Group
set_www_user_group
# Change permissions on data directory
chown -R $WWW_USER:$WWW_GROUP $OWNCLOUD_DATA_DIRECTORY
#
# Display OwnCloud's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
OwnCloud
========
% To finish setup, and add an administrative user, open the URL below:
  http://$NETWORK_IP_ADDRESS:$(grep -i 'owncloud$' $PORTS_ASSIGNED_FILE | awk {'print $1'})

  Suggested Admin credentials:

  username = $OWNCLOUD_ADMIN_USER
  password = $OWNCLOUD_ADMIN_PASS

  IMPORTANT: 

  At the login page, make sure the Data Folder is set to:

 
  $OWNCLOUD_DATA_DIRECTORY
 
#
EOF
}

nextcloud_install () {
# Unpack core
tar jxvf $PROJECT_TARBALLS_DIR/nextcloud-*tar.bz2 -C $WWW_HTML_DIR
# Unpack apps
for APP in $(ls -x $PROJECT_TARBALLS_DIR/nextcloud_apps)
do
tar zxvf $PROJECT_TARBALLS_DIR/nextcloud_apps/$APP -C $WWW_HTML_DIR/nextcloud/apps
done
#
# Get WWW User and Group
set_www_user_group
# Change permissions on data directory
chown -R $WWW_USER:$WWW_GROUP $WWW_HTML_DIR/nextcloud
# Copy nextcloud nginx config file or run the command:
[ -e $NGINX_CONF_DIR/sites-enabled/nextcloud ] || cp -v $PROJECT_CONFIGS_DIR/nginx/sites-enabled/nextcloud $NGINX_CONF_DIR/sites-enabled/
# Restart nginx
systemctl restart nginx.service
#
# MySQL DB for Nextcloud
# -----------------------
# Enable and start mysql service if it is not running
systemctl -q is-active mysqld.service || systemctl enable mysqld.service
systemctl -q is-active mysqld.service || systemctl start mysqld.service
# Change MySQL password if default is empty
mysqladmin password $MYSQL_ROOT_PASSWORD > /dev/null 2>&1 || clear && echo "Default MySQL password was already changed! Proceeding ..." && sleep 5
# Create nextcloud database
mysqladmin -p$MYSQL_ROOT_PASSWORD create $NEXTCLOUD_DB_NAME

# Generate database tables using schema
# Set privileges on nextcloud database
echo "GRANT ALL PRIVILEGES ON $NEXTCLOUD_DB_NAME.* to '$NEXTCLOUD_DB_USER'@'localhost' IDENTIFIED by '$NEXTCLOUD_DB_PASS';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
#
# Switch to nextcloud directory and run occ
cd $WWW_HTML_DIR/nextcloud && sudo -u $WWW_USER php occ maintenance:install --database "mysql" --database-name "$NEXTCLOUD_DB_NAME" --database-user "$NEXTCLOUD_DB_USER" --database-pass "$NEXTCLOUD_DB_PASS" --admin-user "$NEXTCLOUD_ADMIN_USER" --admin-pass "$NEXTCLOUD_ADMIN_PASS"
#
# Enable Installed Apps
for APP in $(ls -x $PROJECT_TARBALLS_DIR/nextcloud_apps | sed 's:.tar.gz::g')
do
cd $WWW_HTML_DIR/nextcloud && sudo -u $WWW_USER php occ app:enable $APP
done
}

nextcloud_permissions () {
# Get WWW User and Group
set_www_user_group
printf "Creating possible missing Directories\n"
mkdir -p $WWW_HTML_DIR/nextcloud/data
mkdir -p $WWW_HTML_DIR/nextcloud/assets
mkdir -p $WWW_HTML_DIR/nextcloud/updater

printf "chmod Files and Directories\n"
find $WWW_HTML_DIR/nextcloud -type f -print0 | xargs -0 chmod 0640
find $WWW_HTML_DIR/nextcloud -type d -print0 | xargs -0 chmod 0750

printf "chown Directories\n"
chown -R root:$WWW_GROUP $WWW_HTML_DIR/nextcloud
chown -R $WWW_USER:$WWW_GROUP $WWW_HTML_DIR/nextcloud/apps/
chown -R $WWW_USER:$WWW_GROUP $WWW_HTML_DIR/nextcloud/assets/
chown -R $WWW_USER:$WWW_GROUP $WWW_HTML_DIR/nextcloud/config/
chown -R $WWW_USER:$WWW_GROUP $WWW_HTML_DIR/nextcloud/data/
chown -R $WWW_USER:$WWW_GROUP $WWW_HTML_DIR/nextcloud/themes/
chown -R $WWW_USER:$WWW_GROUP $WWW_HTML_DIR/nextcloud/updater/

chmod +x $WWW_HTML_DIR/nextcloud/occ

printf "chmod/chown .htaccess\n"
if [ -f $WWW_HTML_DIR/nextcloud/.htaccess ]
 then
  chmod 0644 $WWW_HTML_DIR/nextcloud/.htaccess
  chown root:$WWW_GROUP $WWW_HTML_DIR/nextcloud/.htaccess
fi
if [ -f $WWW_HTML_DIR/nextcloud/data/.htaccess ]
 then
  chmod 0644 $WWW_HTML_DIR/nextcloud/data/.htaccess
  chown root:$WWW_GROUP $WWW_HTML_DIR/nextcloud/data/.htaccess
fi
}

nextcloud_configure () {
# Get WWW User and Group
set_www_user_group
# Generate nextcloud instance ID
$CURL_CMD $CURL_OPTS -A 'Mozilla/5.0' -o /dev/null http://$NETWORK_IP_ADDRESS:$NEXTCLOUD_HTTP_PORT
# Get instance ID
NEXTCLOUD_INSTANCE_ID=$(grep 'instanceid' $WWW_HTML_DIR/nextcloud/config/config.php | awk {'print $3'} | sed "s:'::g" | cut -d , -f1)
# Generate initial nextcloud config
cat > $NEXTCLOUD_CONFIG_FILE << EOF
<?php
\$CONFIG = array (
  'instanceid' => '$NEXTCLOUD_INSTANCE_ID',
  'trusted_domains' => 
  array (
    0 => '$NETWORK_IP_ADDRESS', 
    1 => '$COOVA_SERVER_IP', 
    2 => '$NEXTCLOUD_WWW_SERVER_NAME'
  ),
  'datadirectory' => '$NEXTCLOUD_DATA_DIRECTORY',
  'overwrite.cli.url' => 'http://$NETWORK_IP_ADDRESS:$NEXTCLOUD_HTTP_PORT',
  'dbtype' => 'mysql',
  'dbname' => '$NEXTCLOUD_DB_NAME',
  'dbhost' => 'localhost',
  'dbtableprefix' => 'oc_',
  'dbuser' => '$NEXTCLOUD_DB_USER',
  'dbpassword' => '$NEXTCLOUD_DB_PASS',
  'logfile' => '$PROJECT_SYSTEM_LOG_DIR/nextcloud.log',
  'logtimezone' => '$TIMEZONE',
  'mail_domain' => '$NETWORK_DOMAIN',
  'mail_from_address' => '$PROJECT_NAME',
  'installed' => true,
  'version' => '$NEXTCLOUD_VERSION',
  'updatechecker' => false,
  'defaultapp' => '$NEXTCLOUD_DEFAULT_APP',
);
EOF

# Create data directory for nextcloud
[ -d $NEXTCLOUD_DATA_DIRECTORY ] || mkdir -p $NEXTCLOUD_DATA_DIRECTORY
# Make custom cache directory if not existent
[ -d $NEXTCLOUD_DATA_DIRECTORY/$NEXTCLOUD_ADMIN_USER/cache ] || mkdir -p $NEXTCLOUD_DATA_DIRECTORY/$NEXTCLOUD_ADMIN_USER/cache
# Make custom files directory if not existent
[ -d $NEXTCLOUD_DATA_DIRECTORY/$NEXTCLOUD_ADMIN_USER/files ] || mkdir -p $NEXTCLOUD_DATA_DIRECTORY/$NEXTCLOUD_ADMIN_USER/files
# Add link to /JambulaTV folder - Find a better way to access these files
[ -e $NEXTCLOUD_DATA_DIRECTORY/$NEXTCLOUD_ADMIN_USER/files/$PROJECT_NAME ] || \
	ln -s $PROJECT_PARTITION $NEXTCLOUD_DATA_DIRECTORY/$NEXTCLOUD_ADMIN_USER/files/$PROJECT_NAME
# Change permissions on data directory
chown -R $WWW_USER:$WWW_GROUP $NEXTCLOUD_DATA_DIRECTORY

# Patch nextcloud Calendar App to enable successful connections/subscriptions to external calendars like Google
patch -p1 $WWW_HTML_DIR/nextcloud/apps/calendar/controller/proxycontroller.php < $PROJECT_PATCHES_DIR/nextcloud.proxycontroller.patch

# Add jambulatv-calendar-events tool if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-calendar-events ] || \
	cat $PROJECT_BIN_DIR/jambulatv-calendar-events | \
		sed -e "s:MY_TMPDIR:$TMPDIR:g" | \
		sed -e "s:MY_NEXTCLOUD_ADMIN_USER:$NEXTCLOUD_ADMIN_USER:g" | \
		sed -e "s:MY_NEXTCLOUD_ADMIN_PASS:$NEXTCLOUD_ADMIN_PASS:g" | \
		sed -e "s:MY_NEXTCLOUD_HTTP_PORT:$NEXTCLOUD_HTTP_PORT:g" \
			> $BINARY_PREFIX/jambulatv-calendar-events
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-calendar-events

# Display NextCloud's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
NextCloud
==========
% To finish setup, and add an administrative user, open the URL below:
  http://$NETWORK_IP_ADDRESS:$NEXTCLOUD_HTTP_PORT

  Login credentials are as follows:

  username = $NEXTCLOUD_ADMIN_USER
  password = $NEXTCLOUD_ADMIN_PASS

* In case, you need to Finish setup manually, then:
  At the login page, make sure the Data Folder is set to:
 
  $NEXTCLOUD_DATA_DIRECTORY
 
* Choose "MySQL/MariaDB" Database

  Database Username: $NEXTCLOUD_DB_USER
  Database Password: $NEXTCLOUD_DB_PASS
  Database Name:     $NEXTCLOUD_DB_NAME

#
EOF
}

dahdi_install () {
# Install Dahdi
tar zxvf $PROJECT_TARBALLS_DIR/dahdi-linux-complete-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v dahdi-linux-complete-* dahdi-linux-complete
cd $INSTALL_SRC_DIR/dahdi-linux-complete 
# Copy dahdi firmware files
#cp -v ../dahdi/* linux/drivers/dahdi/firmware/
# Log to build file
make_build_log
# Make
make -s all
make install
make config 
}

libpri_install () {
# Install libpri
tar zxvf $PROJECT_TARBALLS_DIR/libpri-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v libpri-* libpri
cd $INSTALL_SRC_DIR/libpri
make_install_jambulatv
}

asterisk_install () {
# Unpack asterisk
tar zxvf $PROJECT_TARBALLS_DIR/asterisk-11*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v asterisk-11* asterisk
# Copy MP3 Decoder into addons directory
tar zxvf $PROJECT_TARBALLS_DIR/mp3-decoder.tgz -C $INSTALL_SRC_DIR/asterisk/addons/
# Change to asterisk directory
cd $INSTALL_SRC_DIR/asterisk
./configure --prefix=$PREFIX --libdir=$LIBDIR --with-ssl=$INCDIR/openssl --with-srtp=$INCDIR/srtp 
# Generate menuselect.makeopts file
cat > menuselect.makeopts <<EOF
MENUSELECT_ADDONS=chan_ooh323 app_mysql app_saycountpl cdr_mysql 
MENUSELECT_APPS=app_skel app_fax app_ivrdemo app_jack app_meetme app_osplookup app_saycounted app_dahdibarge app_readfile app_setcallerid 
MENUSELECT_BRIDGES=
MENUSELECT_CDR=cdr_pgsql cdr_radius cdr_tds cdr_sqlite 
MENUSELECT_CEL=cel_pgsql cel_radius cel_tds 
MENUSELECT_CHANNELS=chan_mgcp chan_misdn chan_nbs chan_vpb chan_gtalk chan_h323 chan_jingle 
MENUSELECT_CODECS=
MENUSELECT_FORMATS=
MENUSELECT_FUNCS=
MENUSELECT_PBX=
MENUSELECT_RES=res_calendar_ews res_calendar_exchange res_config_ldap res_config_pgsql res_config_sqlite res_corosync res_fax_spandsp res_pktccops res_snmp res_timing_kqueue res_jabber 
MENUSELECT_TESTS=test_abstract_jb test_acl test_amihooks test_aoc test_app test_ast_format_str_reduce test_astobj2 test_astobj2_thrash test_callerid test_config test_db test_devicestate test_dlinklists test_event test_expr test_format_api test_func_file test_gosub test_hashtab_thrash test_heap test_jitterbuf test_linkedlists test_locale test_logger test_netsock2 test_pbx test_poll test_sched test_security_events test_skel test_stringfields test_strings test_substitution test_time test_utils test_voicemail_api test_xml_escape 
MENUSELECT_CFLAGS=LOADABLE_MODULES BUILD_NATIVE 
MENUSELECT_OPTS_app_voicemail=FILE_STORAGE 
MENUSELECT_UTILS=astcanary astdb2sqlite3 astdb2bdb 
MENUSELECT_AGIS=
MENUSELECT_EMBED=
MENUSELECT_CORE_SOUNDS=CORE-SOUNDS-EN-WAV CORE-SOUNDS-EN-ULAW CORE-SOUNDS-EN-ALAW CORE-SOUNDS-EN-GSM 
MENUSELECT_MOH=MOH-OPSOUND-WAV MOH-OPSOUND-ULAW MOH-OPSOUND-ALAW MOH-OPSOUND-GSM 
MENUSELECT_EXTRA_SOUNDS=EXTRA-SOUNDS-EN-WAV EXTRA-SOUNDS-EN-ULAW EXTRA-SOUNDS-EN-ALAW EXTRA-SOUNDS-EN-GSM 
MENUSELECT_BUILD_DEPS=chan_local app_voicemail app_confbridge res_monitor res_agi res_adsi res_smdi res_odbc res_xmpp res_crypto res_http_websocket res_ael_share G711_NEW_ALGORITHM 
MENUSELECT_DEPSFAILED=MENUSELECT_APPS=app_jack
MENUSELECT_DEPSFAILED=MENUSELECT_APPS=app_osplookup
MENUSELECT_DEPSFAILED=MENUSELECT_CDR=cdr_pgsql
MENUSELECT_DEPSFAILED=MENUSELECT_CDR=cdr_radius
MENUSELECT_DEPSFAILED=MENUSELECT_CDR=cdr_tds
MENUSELECT_DEPSFAILED=MENUSELECT_CEL=cel_pgsql
MENUSELECT_DEPSFAILED=MENUSELECT_CEL=cel_radius
MENUSELECT_DEPSFAILED=MENUSELECT_CEL=cel_tds
MENUSELECT_DEPSFAILED=MENUSELECT_CHANNELS=chan_misdn
MENUSELECT_DEPSFAILED=MENUSELECT_CHANNELS=chan_nbs
MENUSELECT_DEPSFAILED=MENUSELECT_RES=res_config_ldap
MENUSELECT_DEPSFAILED=MENUSELECT_RES=res_config_pgsql
MENUSELECT_DEPSFAILED=MENUSELECT_RES=res_config_sqlite
MENUSELECT_DEPSFAILED=MENUSELECT_RES=res_corosync
MENUSELECT_DEPSFAILED=MENUSELECT_RES=res_fax_spandsp
MENUSELECT_DEPSFAILED=MENUSELECT_RES=res_snmp
MENUSELECT_DEPSFAILED=MENUSELECT_RES=res_timing_kqueue
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_abstract_jb
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_acl
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_amihooks
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_aoc
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_app
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_ast_format_str_reduce
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_astobj2
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_astobj2_thrash
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_callerid
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_config
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_db
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_devicestate
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_dlinklists
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_event
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_expr
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_format_api
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_func_file
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_gosub
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_hashtab_thrash
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_heap
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_jitterbuf
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_linkedlists
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_locale
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_logger
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_netsock2
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_pbx
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_poll
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_sched
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_security_events
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_skel
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_stringfields
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_strings
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_substitution
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_time
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_utils
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_voicemail_api
MENUSELECT_DEPSFAILED=MENUSELECT_TESTS=test_xml_escape
EOF
#
# Apply chan_mobile patches
patch -p1 $INSTALL_SRC_DIR/asterisk/addons/chan_mobile.c < $PROJECT_PATCHES_DIR/chan_mobile_SMS_polling.patch
patch -p1 $INSTALL_SRC_DIR/asterisk/addons/chan_mobile.c < $PROJECT_PATCHES_DIR/chan_mobile-port-autodetect.patch
#
# Sounds
#--------
# Extract core, moh, and extra sounds versions from Makefile
ASTERISK_CORE_SOUNDS_VERSION=$(grep 'CORE_SOUNDS_VERSION:=' $INSTALL_SRC_DIR/asterisk/sounds/Makefile | cut -d '=' -f2)
ASTERISK_MOH_SOUNDS_VERSION=$(grep 'MOH_VERSION:=' $INSTALL_SRC_DIR/asterisk/sounds/Makefile | cut -d '=' -f2)
ASTERISK_EXTRA_SOUNDS_VERSION=$(grep 'EXTRA_SOUNDS_VERSION:=' $INSTALL_SRC_DIR/asterisk/sounds/Makefile | cut -d '=' -f2)
# Change to asterisk sounds directory
cd $INSTALL_SRC_DIR/asterisk/sounds
# Cycle through codecs and fix versions to current
for CODEC in wav ulaw alaw gsm;
do
# copy current core, moh, and extra sounds packages
cp -v $PROJECT_TARBALLS_DIR/asterisk*$CODEC*gz $INSTALL_SRC_DIR/asterisk/sounds/
# Create links to current core, moh, and extra sounds package
[ -e asterisk-core-sounds-en-$CODEC-$ASTERISK_CORE_SOUNDS_VERSION.tar.gz ] || \
	ln -s asterisk-core-sounds-en-$CODEC-current.tar.gz \
		asterisk-core-sounds-en-$CODEC-$ASTERISK_CORE_SOUNDS_VERSION.tar.gz
[ -e asterisk-moh-opsound-$CODEC-$ASTERISK_MOH_SOUNDS_VERSION.tar.gz ] || \
	ln -s asterisk-moh-opsound-$CODEC-current.tar.gz \
		asterisk-moh-opsound-$CODEC-$ASTERISK_MOH_SOUNDS_VERSION.tar.gz

[ -e asterisk-extra-sounds-en-$CODEC-$ASTERISK_EXTRA_SOUNDS_VERSION.tar.gz ] || \
	ln -s asterisk-extra-sounds-en-$CODEC-current.tar.gz \
		asterisk-extra-sounds-en-$CODEC-$ASTERISK_EXTRA_SOUNDS_VERSION.tar.gz
done
#
cd $INSTALL_SRC_DIR/asterisk
# make
make_install_jambulatv
# Generate sample configs
make samples
# Generate documentation
#make progdocs
# Cache recently shared libraries 
ldconfig
#
# Add asterisk group and user 
groupadd -r asterisk
useradd -r -M -c "Asterisk PBX User" -d $SPOOLDIR/asterisk -g asterisk asterisk -s /sbin/nologin
# Give asterisk user access to audio devices and pulse access
usermod -a -G audio,pulse,pulse-access asterisk
}

asterisk_configure () {
# Get WWW User and Group
set_www_user_group
# Set ownership/permissions on asterisk directories
chown -R $ASTERISK_FILES_USER:$WWW_USER $CONFDIR/asterisk
chown -R $ASTERISK_FILES_USER:$WWW_USER $VARLIBDIR/asterisk
chown -R $ASTERISK_FILES_USER:$WWW_USER $STATEDIR/run/asterisk
chown -R $ASTERISK_FILES_USER:$WWW_USER $SPOOLDIR/asterisk/
chown -R $ASTERISK_FILES_USER:$WWW_USER $STATEDIR/log/asterisk
# Set permissions on asterisk directories
chmod -R 754 $CONFDIR/asterisk
chmod -R 754 $VARLIBDIR/asterisk
chmod -R 754 $STATEDIR/run/asterisk
chmod -R 754 $SPOOLDIR/asterisk/
chmod -R 754 $STATEDIR/log/asterisk
#
# Systemctl start script
cp -v $PROJECT_INIT_SCRIPTS_DIR/asterisk.service $SYSTEMD_UNITS_DIR_USER/
# Enable asterisk
systemctl enable asterisk.service
# Create asterisk directory in JambulaTV configs directory
[ -d $ASTERISK_CONF_DIR ] || mkdir -p $ASTERISK_CONF_DIR
# Copy Jambula customized asterisk config files
rsync -av $PROJECT_CONFIGS_DIR/asterisk/ $ASTERISK_CONF_DIR/

# Jambula custom dialplan in extensions files
sed -i "s:JAMBULA_DIALPLAN_NAME:$ASTERISK_DIALPLAN_NAME:g" \
	$ASTERISK_CONF_DIR/extensions.conf
#
# global variables 
cp -v $ASTERISK_CONF_DIR/globals.conf $ASTERISK_CONF_DIR/globals.conf.orig
cat $ASTERISK_CONF_DIR/globals.conf.orig | sed -e "s:JAMBULA_USER_001_XMPP_USERNAME:$USER_001_XMPP_USERNAME:g" | sed -e "s:JAMBULA_ASTERISK_XMPP_HOST:$ASTERISK_XMPP_HOST:g" | sed -e "s:JAMBULA_USER_001_XMPP_RESOURCE:$USER_001_XMPP_RESOURCE:g" | sed -e "s:JAMBULA_DIALPLAN_NAME:$ASTERISK_DIALPLAN_NAME:g"> $ASTERISK_CONF_DIR/globals.conf 
#
# XMPP variables
cp -v $ASTERISK_CONF_DIR/xmpp.conf $ASTERISK_CONF_DIR/xmpp.conf.orig
cat $ASTERISK_CONF_DIR/xmpp.conf.orig | sed -e "s:JAMBULA_ASTERISK_XMPP_USERNAME:$ASTERISK_XMPP_USERNAME:g" | sed -e "s:JAMBULA_ASTERISK_XMPP_PASSWORD:$ASTERISK_XMPP_PASSWORD:g" | sed -e "s:JAMBULA_USER_001_XMPP_USERNAME:$USER_001_XMPP_USERNAME:g" | sed -e "s:JAMBULA_ASTERISK_XMPP_HOST:$ASTERISK_XMPP_HOST:g" > $ASTERISK_CONF_DIR/xmpp.conf
#
# Jambula Asterisk files configuration
for CONFIG_FILE in extensions.conf sip.conf voicemail.conf musiconhold.conf xmpp.conf motif.conf confbridge.conf http.conf
do
# Backup config file
cp -v $CONFDIR/asterisk/$CONFIG_FILE $CONFDIR/asterisk/$CONFIG_FILE.orig
# Modify config file to include JambulaTV customized file
echo "#include $ASTERISK_CONF_DIR/$CONFIG_FILE" > $CONFDIR/asterisk/$CONFIG_FILE
done
#
# Backup asterisk.conf file
cp -v $CONFDIR/asterisk/asterisk.conf $CONFDIR/asterisk/asterisk.conf.orig
# Allow use of #exec statements
sed -i "s/;execincludes = yes/execincludes = yes/g"  $CONFDIR/asterisk/asterisk.conf
# Add customized sounds
rsync -av $PROJECT_CONTRIB_DIR/sounds/asterisk/ /var/lib/asterisk/sounds/en/
# Add music-on-hold files
rsync -av $PROJECT_CONTRIB_DIR/music/asterisk/ /var/lib/asterisk/
# Link to default moh
ln -s /var/lib/asterisk/moh /var/lib/asterisk/moh.default
#
# Add execincludes script to add site dialplan type
cat > $ASTERISK_AGI_BIN_DIR/include_config.sh <<EOF
#!/bin/sh

# Determine global DIALPLAN_NAME variable
DIALPLAN_TYPE=\$(cat $ASTERISK_CONF_DIR/globals.conf | sed /^\;/d | grep ^DIALPLAN_NAME | tail -n 1 | cut -d '=' -f2 | sed 's/^ //')

# Include DialPlan Type 
[ ! -e $ASTERISK_CONF_DIR/extensions_\$DIALPLAN_TYPE.conf ] || \\
echo "#include $ASTERISK_CONF_DIR/extensions_\$DIALPLAN_TYPE.conf"
EOF
# Make script executable
chmod 755 $ASTERISK_AGI_BIN_DIR/include_config.sh
#
# Add execincludes script to add sip providers config
cat > $ASTERISK_AGI_BIN_DIR/include_sip_providers.sh <<EOF
#!/bin/sh
REMOTE_SIP_HOST=$SIP_PROVIDER_HOSTNAME
#
# Ping Internet
ping -c 3 -W 3 \$REMOTE_SIP_HOST > /dev/null 2>&1
REMOTE_SIP_HOST_PING_STATUS=\$?
# 
# Include SIP Provider if there's connectivity
if [ "\$REMOTE_SIP_HOST_PING_STATUS" = "0" ] && [ -e $ASTERISK_CONF_DIR/sip_providers.config ];
then
# Include SIP Providers 
echo "#include $ASTERISK_CONF_DIR/sip_providers.config"
fi
EOF
# Make script executable
chmod 755 $ASTERISK_AGI_BIN_DIR/include_sip_providers.sh
#
# Setup SSL for Asterisk
# **********************
[ -d $ASTERISK_CONF_DIR/ssl ] || mkdir $ASTERISK_CONF_DIR/ssl
# Create SSL cert/key
ssl_cert_key_generate $ASTERISK_CONF_DIR/ssl/JambulaTV.crt $ASTERISK_CONF_DIR/ssl/JambulaTV.key 7300
#
# Caller ID
# ---------
# Add asterisk callerid update scripts if they don't exist in bin directory
for SCRIPT in \
jambulatv-callerid-update-batch \
jambulatv-callerid-update-single
do
[ -e $BINARY_PREFIX/$SCRIPT ] || cp -v $PROJECT_BIN_DIR/$SCRIPT $BINARY_PREFIX/
done
#
# WebRTC
# ------
# Copy jssip files for WebRTC
rsync -avz --delete-after $PROJECT_GITHUB_DIR/jssip/ $WWW_HTML_DIR/jssip/
# Change permissions of sipml5 to www owner
chown -R $WWW_USER:$WWW_GROUP $WWW_HTML_DIR/jssip
#
# Set ownership/permissions on asterisk custom directory
chown -R $ASTERISK_FILES_USER:$WWW_USER $ASTERISK_CONF_DIR
chmod -R 754 $ASTERISK_CONF_DIR
}

chan_dongle_install () {
# Unpack
unzip -d $INSTALL_SRC_DIR $PROJECT_ZIPS_DIR/asterisk-chan-dongle*.zip
cd $INSTALL_SRC_DIR/asterisk-chan-dongle-asterisk11
# Compile
aclocal && autoconf && automake -a
# configure 
DESTDIR="$LIBDIR/asterisk/modules" ./configure --prefix=$PREFIX
make_install_jambulatv
}

chan_mobile_configure () {
# Get bluetooth MAC Address
BLUEZ_ADAPTER_0_ADDR=$(hciconfig $BLUEZ_DEVICE_HCI | grep 'BD Address' | awk {'print $3'})
# Modify chan_mobile config file - Add custom bluez adapter and phone(s)
cat $PROJECT_CONFIGS_DIR/asterisk/chan_mobile.conf | \
	sed -e "s/BLUEZ_ADAPTER_0_ADDR/$BLUEZ_ADAPTER_0_ADDR/g" | \
	sed -e "s/BLUEZ_PHONE_0_ADDR/$BLUEZ_PHONE_0_ADDR/g" \
		> $ASTERISK_CONF_DIR/chan_mobile.conf
#
# First available mobile device in group
# ---------------------------------------
# Add agi script to query chan_mobile active device in realtime
cat > $ASTERISK_AGI_BIN_DIR/active_mobile_device.sh << EOF
#!/bin/sh
ASTERISK_CONNECT_CMD='/usr/sbin/asterisk -rx'
MOBILE_PHONE_GROUP=\$@
MOBILE_PHONE_STATUS=Free
#
# Usage
if [[ x\$MOBILE_PHONE_GROUP = x ]];
then
echo "Usage: ./\$(basename \$0) [GROUP NUMBER]"
exit 1
fi
#
# Find first available/free mobile phone to use as trunk
FIRST_AVAILABLE_PHONE=\$(\$ASTERISK_CONNECT_CMD 'mobile show devices' | awk '\$3 == '\$MOBILE_PHONE_GROUP'' | grep \$MOBILE_PHONE_STATUS | awk {'print \$1'} | head -1 | sed 's: ::g')
#
echo -n \$FIRST_AVAILABLE_PHONE
EOF
#
# Make script executable
chmod 755 $ASTERISK_AGI_BIN_DIR/active_mobile_device.sh
#
# First available mobile group
# ----------------------------
# Add agi script to query chan_mobile available mobile group in realtime
cat > $ASTERISK_AGI_BIN_DIR/available_mobile_group.sh << EOF
#!/bin/sh
ASTERISK_CONNECT_CMD='/usr/sbin/asterisk -rx'
MOBILE_PHONE_STATUS=Free
#
# Find first available/free mobile phone to use as trunk
FIRST_AVAILABLE_MOBILE_GROUP=\$(\$ASTERISK_CONNECT_CMD 'mobile show devices' | grep \$MOBILE_PHONE_STATUS | awk {'print \$3'} | head -1 | sed 's: ::g')
#
echo -n \$FIRST_AVAILABLE_MOBILE_GROUP
EOF
#
# Make script executable
chmod 755 $ASTERISK_AGI_BIN_DIR/available_mobile_group.sh
}

chan_dongle_configure () {
# If Asterisk installed
if [ -d $ASTERISK_CONF_DIR ];
then
# copy dongle.conf file to asterisk configs directory
cp -v $PROJECT_CONFIGS_DIR/asterisk/dongle.conf $ASTERISK_CONF_DIR/dongle.conf
# Include dongle.conf file
echo "#include $ASTERISK_CONF_DIR/dongle.conf" > $ASTERISK_CONF_DIR/dongle.conf
# Get WWW User and Group
set_www_user_group
# Set ownership/permissions on asterisk custom directory
chown -R $ASTERISK_FILES_USER:$WWW_USER $ASTERISK_CONF_DIR
chmod -R 754 $ASTERISK_CONF_DIR
#
# If FreePBX installed
elif [ -d $FREEPBX_CONF_DIR ];
then
# copy dongle.conf file to freepbx configs directory
cp -v $PROJECT_CONFIGS_DIR/freepbx/dongle.conf $FREEPBX_CONF_DIR/dongle.conf
# Include dongle.conf file
echo "#include $FREEPBX_CONF_DIR/dongle.conf" > $FREEPBX_CONF_DIR/dongle.conf
# Get WWW User and Group
set_www_user_group
# Set ownership/permissions on freepbx custom directory
chown -R $ASTERISK_FILES_USER:$WWW_USER $FREEPBX_CONF_DIR
chmod -R 754 $FREEPBX_CONF_DIR
fi
}

chan_motif_configure () {
# Enable ICE Support - Needed for Google Voice - Chan_Motif
echo "
icesupport=true" >> $CONFDIR/asterisk/rtp.conf
# Add execincludes script to add GoogleVoice and other XMPP providers
cat > $ASTERISK_AGI_BIN_DIR/include_xmpp_providers.sh <<EOF
#!/bin/sh
GV_SERVER=talk.google.com
GV_USERNAME=GOOGLE_SERVICES_USERNAME
GV_PASSWORD=GOOGLE_SERVICES_PASSWORD
#
REMOTE_XMPP_HOST=$DNS_SERVER_IP_ADDRESS_DEFAULT # Use IP Address NOT DOMAIN NAME!!!
#
# Ping Internet
ping -c 3 -W 3 \$REMOTE_XMPP_HOST > /dev/null 2>&1
REMOTE_XMPP_HOST_PING_STATUS=\$?
# 
# Include XMPP Provider if there's connectivity
if [ "\$REMOTE_XMPP_HOST_PING_STATUS" = "0" ] && [ -e /etc/JambulaTV/asterisk/xmpp.conf ];
then
# Include XMPP Providers 
echo "; Google
[google]
type=client
serverhost=\$GV_SERVER
username=\$GV_USERNAME
secret=\$GV_PASSWORD
priority=100
port=5222
usetls=yes
usesasl=yes
status=available
statusmessage=\"I am available\"
timeout=5
"
fi
EOF
# Make script executable
chmod 755 $ASTERISK_AGI_BIN_DIR/include_xmpp_providers.sh
}

freepbx_preinstall () {
# Remove/backup old asterisk config files
[ -d $CONFDIR/asterisk ] && mv -v $CONFDIR/asterisk $CONFDIR/asterisk.nofreepbx.$(date +%I%M)
[ -d $FREEPBX_CONF_DIR ] && mv -v $FREEPBX_CONF_DIR $FREEPBX_CONF_DIR.nofreepbx
[ -d $ASTERISK_CONF_DIR ] && mv -v $ASTERISK_CONF_DIR $ASTERISK_CONF_DIR.nofreepbx
#
# Regenerate asterisk sample files
cd $INSTALL_SRC_DIR/asterisk && make samples
# Get WWW User and Group
set_www_user_group
# Change permissions
chown -R $ASTERISK_FILES_USER:$WWW_USER $CONFDIR/asterisk
# Unpack freepbx
tar zxvf $PROJECT_TARBALLS_DIR/freepbx-*.tgz -C $INSTALL_SRC_DIR
#
# Enable and start mysql service if it is not running
systemctl -q is-active mysqld.service || systemctl enable mysqld.service
systemctl -q is-active mysqld.service || systemctl start mysqld.service
# Change MySQL password if default is empty
mysqladmin password $MYSQL_ROOT_PASSWORD > /dev/null 2>&1 || clear && echo "Default MySQL password was already changed! Proceeding ..." && sleep 5
#
# 1) Create Asterisk CDR database for FreePBX
# --------------------------------------------
mysqladmin -p$MYSQL_ROOT_PASSWORD create $ASTERISK_CDR_DB_NAME
# Set privileges on asterisk database
echo "GRANT ALL PRIVILEGES ON $ASTERISK_CDR_DB_NAME.* to '$ASTERISK_CDR_DB_USER'@'localhost' IDENTIFIED by '$ASTERISK_CDR_DB_PASS';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
# Populate Asterisk CDR database  for FreePBX
mysql -u $ASTERISK_CDR_DB_USER -p$ASTERISK_CDR_DB_PASS $ASTERISK_CDR_DB_NAME < $INSTALL_SRC_DIR/freepbx/installlib/SQL/cdr.sql
#
# 2) Create Asterisk database for FreePBX
# ----------------------------------------
mysqladmin -p$MYSQL_ROOT_PASSWORD create $ASTERISK_DB_NAME
# Set privileges on asterisk database
echo "GRANT ALL PRIVILEGES ON $ASTERISK_DB_NAME.* to '$ASTERISK_DB_USER'@'localhost' IDENTIFIED by '$ASTERISK_DB_PASS';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
# Populate Asterisk CDR database for FreePBX 
mysql -u $ASTERISK_DB_USER -p$ASTERISK_DB_PASS $ASTERISK_DB_NAME < $INSTALL_SRC_DIR/freepbx/installlib/SQL/asterisk.sql
#
# Start asterisk service if it is not running
systemctl -q is-active asterisk.service || systemctl start asterisk.service
}

freepbx_install () {
# Check/fix errors in asterisk.conf file
sed -i "s:\[directories\](!):\[directories\]:g" $CONFDIR/asterisk/asterisk.conf 
sed -i "s:;runuser:runuser:g" $CONFDIR/asterisk/asterisk.conf 
sed -i "s:;rungroup:rungroup:g" $CONFDIR/asterisk/asterisk.conf 
#
# Copy customized manager.conf for JambulaTV
cp -v -f $PROJECT_CONFIGS_DIR/asterisk/manager.conf $CONFDIR/asterisk
# Get WWW User and Group
set_www_user_group
# Make manager.conf accessible - retrieve_conf needs this
chown -R $ASTERISK_FILES_USER:$WWW_USER $CONFDIR/asterisk/manager.conf
#
# Set ownership/permissions on asterisk /var/lib directories - AST Start fails if not set
chown -R $ASTERISK_FILES_USER:$WWW_USER $VARLIBDIR/asterisk
chmod -R 754 $VARLIBDIR/asterisk
/usr/sbin/safe_asterisk -U asterisk -G asterisk
# Wait for Asterisk to start fully
echo
echo "Waiting for Asterisk to start fully ..."
sleep 15
#
# make nginx run under 'asterisk' group
sed -i "s:user  nginx;:user  $ASTERISK_FILES_USER $WWW_USER;:g" $NGINX_CONF_DIR/nginx.conf
# Restart nginx
systemctl restart nginx.service
#
# make php-fpm run under 'asterisk' group
sed -i "s:user = nginx:user = $ASTERISK_FILES_USER:g" $CONFDIR/php-fpm.d/www.conf
sed -i "s:group = nginx:group = $WWW_USER:g" $CONFDIR/php-fpm.d/www.conf
# Restart php-fpm
systemctl restart php-fpm.service
# make spawn-cgi run under 'asterisk' group
sed -i "s:FCGI_USER=nginx:FCGI_USER=$ASTERISK_FILES_USER:g" $SYSCONFIG_DIR/spawn-fcgi 
sed -i "s:FCGI_GROUP=nginx:FCGI_GROUP=$WWW_USER:g" $SYSCONFIG_DIR/spawn-fcgi 
# Restart fcgiwrap service now 
systemctl restart spawn-fcgi.service
#
# Change to base
cd $INSTALL_SRC_DIR/freepbx
# Install
./install -f --dbengine="mysql" --dbname="$ASTERISK_DB_NAME" --cdrdbname="$ASTERISK_CDR_DB_NAME" --dbuser="$ASTERISK_DB_USER" --dbpass="$ASTERISK_DB_PASS" --user="$ASTERISK_FILES_USER" --group="$WWW_USER" --webroot="$WWW_HTML_DIR/freepbx" --ampcgibin="$WWW_CGI_DIR" --astetcdir="$FREEPBX_CONF_DIR" --no-interaction
#
# Run retrieve_conf again
$VARLIBDIR/asterisk/bin/retrieve_conf
#
# Set ownership on FreePBX config directory
chown -R $ASTERISK_FILES_USER:$WWW_USER $FREEPBX_CONF_DIR
# Set ownership/permissions on nginx folders
chown -R $ASTERISK_FILES_USER:$WWW_USER $PROJECT_SYSTEM_SHARE_DIR/fastcgi_temp
chmod -R 754 $PROJECT_SYSTEM_SHARE_DIR/fastcgi_temp
#
# Set ownership/permissions on php session directories
chown -R $ASTERISK_FILES_USER:$WWW_USER $STATEDIR/lib/php/session
chmod -R 754 $STATEDIR/lib/php/session
#
# Add FreePBX Admin User
# User/Pass
echo "INSERT INTO ampusers (username, password_sha1, sections) VALUES ('$FREEPBX_ADMIN_USER', '$FREEPBX_ADMIN_PASS_HASH', '*');" | mysql -u $ASTERISK_DB_USER -p$ASTERISK_DB_PASS $ASTERISK_DB_NAME
}

freepbx_configure () {
# Get WWW User and Group
set_www_user_group
# -----------------
# SIP Configuration
# ------------------
# Main Extension
echo "INSERT INTO devices (id, tech, dial, devicetype, user, description ) VALUES ('$FREEPBX_EXTENSION_000', 'sip', 'SIP/$FREEPBX_EXTENSION_000', 'fixed', '$FREEPBX_EXTENSION_000', '$FREEPBX_EXTENSION_000_NAME');" | mysql -u $ASTERISK_DB_USER -p$ASTERISK_DB_PASS $ASTERISK_DB_NAME
# 
echo "INSERT INTO users (extension, password, name, voicemail, ringtimer, outboundcid ) VALUES ('$FREEPBX_EXTENSION_000', '$FREEPBX_EXTENSION_000_PASS', '$FREEPBX_EXTENSION_000_NAME', 'default', '0', '$FREEPBX_EXTENSION_000');" | mysql -u $ASTERISK_DB_USER -p$ASTERISK_DB_PASS $ASTERISK_DB_NAME
#
# WebRTC Extension
echo "INSERT INTO devices (id, tech, dial, devicetype, user, description ) VALUES ('$FREEPBX_EXTENSION_WEBRTC_001', 'sip', 'SIP/$FREEPBX_EXTENSION_WEBRTC_001', 'fixed', '$FREEPBX_EXTENSION_WEBRTC_001', '$FREEPBX_EXTENSION_WEBRTC_001_NAME');" | mysql -u $ASTERISK_DB_USER -p$ASTERISK_DB_PASS $ASTERISK_DB_NAME
# 
echo "INSERT INTO users (extension, password, name, voicemail, ringtimer, outboundcid ) VALUES ('$FREEPBX_EXTENSION_WEBRTC_001', '$FREEPBX_EXTENSION_WEBRTC_001_PASS', '$FREEPBX_EXTENSION_WEBRTC_001_NAME', 'default', '0', '$FREEPBX_EXTENSION_WEBRTC_001');" | mysql -u $ASTERISK_DB_USER -p$ASTERISK_DB_PASS $ASTERISK_DB_NAME

# Add extensions to voicemail config
# WebRTC
sed -i "/\[default\]/a $FREEPBX_EXTENSION_WEBRTC_001 => $FREEPBX_EXTENSION_WEBRTC_001_PASS,$FREEPBX_EXTENSION_WEBRTC_001_NAME,,,attach=no|saycid=no|envelope=no|delete=no" $FREEPBX_CONF_DIR/voicemail.conf
# Main Extension
sed -i "/\[default\]/a $FREEPBX_EXTENSION_000 => $FREEPBX_EXTENSION_000_PASS,$FREEPBX_EXTENSION_000_NAME,,,attach=no|saycid=no|envelope=no|delete=no" $FREEPBX_CONF_DIR/voicemail.conf

# Add jambula extensions to sip_custom config
cat > $FREEPBX_CONF_DIR/sip_custom.conf << EOF
; $COPYRIGHT_NOTICE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Jambula-PBX SIP Settings

;externip = 196.0.X.X
;localnet = 192.168.0.255/255.255.255.0

; SIP Templates
[Office1](!)
type=friend
context=stdexten
dtmfmode=rfc2833
qualify=yes
nat=force_rport
canreinvite=no


; Main extension i.e. SwitchBoard
[$FREEPBX_EXTENSION_000](Office1)
deny=0.0.0.0/0.0.0.0
host=dynamic
trustpid=yes
sendpid=no
port=5060
qualifyfreq=60
transport=udp,tcp,tls
avpf=no
force_avp=no
icesupport=no
encryption=no
namedcallgroup=
namedpickupgroup=
permit=0.0.0.0/0.0.0.0
dial=SIP/601
mailbox=$FREEPBX_EXTENSION_000@default
callerid=$FREEPBX_EXTENSION_000_NAME <$FREEPBX_EXTENSION_000>
callcounter=yes
faxdetect=no
secret=$FREEPBX_EXTENSION_000_PASS

; Web RTC Client
[$FREEPBX_EXTENSION_WEBRTC_001](Office1)
mailbox=$FREEPBX_EXTENSION_WEBRTC_001
host=dynamic
callerid="Jambula WebRTC" <$FREEPBX_EXTENSION_WEBRTC_001>
nat=force_rport
avpf=yes                       
force_avp=yes 
encryption=yes
transport=udp,ws,wss                   
icesupport=yes
directmedia=no
;DTLS
dtlsenable=yes 
dtlsverify=no 
dtlscertfile=$FREEPBX_CONF_DIR/ssl/JambulaTV.crt
dtlsprivatekey=$FREEPBX_CONF_DIR/ssl/JambulaTV.key
dtlssetup=actpass 
secret=$FREEPBX_EXTENSION_WEBRTC_001_PASS


; ExecInclude for Sip Providers
#exec $VARLIBDIR/asterisk/agi-bin/include_sip_providers.sh
EOF

# Allow use of #exec statements
sed -i '/\[options\]/a execincludes = yes' $CONFDIR/asterisk/asterisk.conf

# Add SIP providers files
[ -e $PROJECT_CONFIGS_DIR/asterisk/sip_providers.config ] && \
cp -v $PROJECT_CONFIGS_DIR/asterisk/sip_providers.config $FREEPBX_CONF_DIR/

# Setup SSL for Asterisk
[ -d $FREEPBX_CONF_DIR/ssl ] || mkdir $FREEPBX_CONF_DIR/ssl
# Create SSL cert/key
ssl_cert_key_generate $FREEPBX_CONF_DIR/ssl/JambulaTV.crt $FREEPBX_CONF_DIR/ssl/JambulaTV.key 7300

# ----------------------------
# Other FreePBX Configuration
# ----------------------------
# Copy FreePBX Jambula customized asterisk config files
rsync -av $PROJECT_CONFIGS_DIR/freepbx/ $FREEPBX_CONF_DIR/

# Jambula custom dialPlan in extensions files
sed -i "s:JAMBULA_DIALPLAN_NAME:$FREEPBX_DIALPLAN_NAME:g" \
	$FREEPBX_CONF_DIR/extensions_override_freepbx.conf
# Global variables 
cp -v $FREEPBX_CONF_DIR/globals_custom.conf $FREEPBX_CONF_DIR/globals_custom.conf.orig
cat $FREEPBX_CONF_DIR/globals_custom.conf.orig | sed -e "s:JAMBULA_USER_001_XMPP_USERNAME:$USER_001_XMPP_USERNAME:g" | sed -e "s:JAMBULA_ASTERISK_XMPP_HOST:$ASTERISK_XMPP_HOST:g" | sed -e "s:JAMBULA_USER_001_XMPP_RESOURCE:$USER_001_XMPP_RESOURCE:g" | sed -e "s:JAMBULA_DIALPLAN_NAME:$FREEPBX_DIALPLAN_NAME:g"> $FREEPBX_CONF_DIR/globals_custom.conf 
#
# XMPP variables
cp -v $FREEPBX_CONF_DIR/xmpp.conf $FREEPBX_CONF_DIR/xmpp.conf.orig
cat $FREEPBX_CONF_DIR/xmpp.conf.orig | sed -e "s:JAMBULA_ASTERISK_XMPP_USERNAME:$ASTERISK_XMPP_USERNAME:g" | sed -e "s:JAMBULA_ASTERISK_XMPP_PASSWORD:$ASTERISK_XMPP_PASSWORD:g" | sed -e "s:JAMBULA_USER_001_XMPP_USERNAME:$USER_001_XMPP_USERNAME:g" | sed -e "s:JAMBULA_ASTERISK_XMPP_HOST:$ASTERISK_XMPP_HOST:g" > $FREEPBX_CONF_DIR/xmpp.conf 
#
# Set ownership on FreePBX config directory
chown -R $ASTERISK_FILES_USER:$WWW_USER $FREEPBX_CONF_DIR
#
# Configure cron jobs for asterisk.  Do not Email output
# ------------------------------------------------------
# Create file if non-existent
[ -e $CRONTABS_DIR/asterisk ] || touch $CRONTABS_DIR/asterisk
# set permissions
chown -R $ASTERISK_FILES_USER $CRONTABS_DIR/asterisk
# Add NO MAILTO entry
sed -i '1s/^/MAILTO=""\n/' $CRONTABS_DIR/asterisk
}

freepbx_modules () {
# Asterisk PhoneBook Module
tar zxvf $PROJECT_TARBALLS_DIR/freepbx_modules/phonebook*tar.gz -C $WWW_HTML_DIR/freepbx/admin/modules
cd $WWW_HTML_DIR/freepbx/admin/modules 
mv -v phonebook* phonebook
# Get WWW User and Group
set_www_user_group
chown -R $ASTERISK_FILES_USER:$WWW_USER phonebook
$SBINARY_PREFIX/fwconsole ma installlocal phonebook
#
#
#
# Restart asterisk service
systemctl restart asterisk.service
#
# Display freepbx usage information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
FreePBX Access
==============
% To access FreePBX, use a client PC to open the URL below:
  http://$NETWORK_IP_ADDRESS:$(grep -i 'freepbx$' $PORTS_ASSIGNED_FILE | awk {'print $1'})

username            = "$FREEPBX_ADMIN_USER"
password            = "$FREEPBX_ADMIN_PASS"

#
EOF
}

# AGI scripts 4 JambulaTV
asterisk_agi_scripts_install () {
# Copy jambulatv agi sripsts to asterisk agi-bin directory
for AGI_SCRIPT in \
jambulatv-tts.agi \
jambulatv-recording.sh
do
cp -v $PROJECT_CONTRIB_DIR/scripts/asterisk_${AGI_SCRIPT} $ASTERISK_AGI_BIN_DIR/${AGI_SCRIPT}
# Change permissions to asterisk user
chown -R $ASTERISK_FILES_USER:$WWW_USER $ASTERISK_AGI_BIN_DIR/${AGI_SCRIPT}
chmod 700 $ASTERISK_AGI_BIN_DIR/${AGI_SCRIPT}
done
}

cepstral_install () {
# Unpack Cepstral tarball with correct architecture
case $PROJECT_SYSTEM_ARCH in
x86_64)
tar zxvf $PROJECT_TARBALLS_DIR/cepstral/Cepstral_${CEPSTRAL_VOICE}*_x86-64-linux_$CEPSTRAL_VERSION.tar.gz -C $INSTALL_SRC_DIR
;;
i686)
tar zxvf $PROJECT_TARBALLS_DIR/cepstral/Cepstral_${CEPSTRAL_VOICE}*_i386-linux_$CEPSTRAL_VERSION.tar.gz -C $INSTALL_SRC_DIR
;;
*)
echo "Unknown platform.  Not installing Cepstral"
break
;;
esac
#
cd $INSTALL_SRC_DIR
mv -v Cepstral_${CEPSTRAL_VOICE}* cepstral
# Change location of binaries
sed -i "s:/usr/local/bin:$BINARY_PREFIX:g" $INSTALL_SRC_DIR/cepstral/install.sh
# Install
cd $INSTALL_SRC_DIR/cepstral
./install.sh $CEPSTRAL_EULA $CEPSTRAL_PREFIX #<- Agree to EULA first!
# Add swift libs to /etc/ld.so.conf 
echo "$CEPSTRAL_PREFIX/lib" > /etc/ld.so.conf.d/swift.conf
ldconfig
#
# Remove swift symbolic link if it exists
[ -e $BINARY_PREFIX/swift ] && rm -f $BINARY_PREFIX/swift
# Add padsp wrapper around /usr/bin/swift link to prevent audio dev errors
cat > $BINARY_PREFIX/swift << EOF
#!/bin/sh
if [ -x $BINARY_PREFIX/padsp ]; 
then 
exec $BINARY_PREFIX/padsp $CEPSTRAL_PREFIX/bin/swift "\$@" 
else 
exec $CEPSTRAL_PREFIX/bin/swift "\$@" 
fi 
EOF
# Make it executable
chmod 755 $BINARY_PREFIX/swift
}

cepstral_register () {
# Register Swift Voice - Do not use linked binary!
$CEPSTRAL_PREFIX/bin/swift --reg-voice --customer-name "$CEPSTRAL_CUSTOMER_NAME" --company-name "$CEPSTRAL_COMPANY_NAME" --voice-name $CEPSTRAL_VOICE --license-key "$CEPSTRAL_LICENSE_KEY"
}

app_swift_install () {
# Unpack
rsync -avz --delete-after $PROJECT_GITHUB_DIR/app_swift/ $INSTALL_SRC_DIR/app_swift/
# Install 
cd $INSTALL_SRC_DIR/app_swift
./configure
make_install_jambulatv
}

app_swift_configure () {
# Change from default voice if not Allison
[ "$CEPSTRAL_VOICE" = "Allison-8kHz" ] || \
sed -i "s:voice=Allison-8kHz:voice=$CEPSTRAL_VOICE:" $CONFDIR/asterisk/swift.conf
cd $INSTALL_SRC_DIR/app_swift
# Reload app_swift if asterisk is running
ps acx | grep asterisk > /dev/null 2>&1 && \
make reload
}

unimrcp_deps_install () {
tar zxvf $PROJECT_TARBALLS_DIR/unimrcp-deps-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v unimrcp-deps-* unimrcp-deps
cd $INSTALL_SRC_DIR/unimrcp-deps
# Don't prompt in build-dep-libs.sh install script
sed -i "s:read yn:yn=y:" build-dep-libs.sh 
# Build apr, apr-util, sofia-sip
./build-dep-libs.sh
}

cepstral_plugin_add_2_unimrcp () {
# unpack cepstral plugin
tar zxvf $PROJECT_TARBALLS_DIR/Cepstral_Plugin_*.tar.gz -C /tmp
# Replace files acinclude.m4 and configure.ac 
cp -f $TMPDIR/Cepstral_Plugin*/acinclude.m4 $INSTALL_SRC_DIR/unimrcp/
cp -f $TMPDIR/Cepstral_Plugin*/configure.ac $INSTALL_SRC_DIR/unimrcp/
# Add file swift.m4 into the folder /build/acmacros
cp -v $TMPDIR/Cepstral_Plugin*/swift.m4 $INSTALL_SRC_DIR/unimrcp/build/acmacros/
# Add folder mrcp-cepstral into the folder /plugins
cp -rv $TMPDIR/Cepstral_Plugin*/mrcp-cepstral $INSTALL_SRC_DIR/unimrcp/plugins/
# Replace file Makefile.am in the folder /plugins
cp -rv $TMPDIR/Cepstral_Plugin*/Makefile.am $INSTALL_SRC_DIR/unimrcp/plugins/
}

unimrcp_install () {
# Unpack unimcrp
tar zxvf $PROJECT_TARBALLS_DIR/unimrcp-1*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v unimrcp-1* unimrcp 
# Add cepstral plugin
# cepstral_plugin_add_2_unimrcp # Fail's to compile
# Change to unimrcp root folder
cd $INSTALL_SRC_DIR/unimrcp
# Configure depending on machine architecture
case $PROJECT_SYSTEM_ARCH in
x86_64)
CFLAGS=-m64 CXXFLAGS=-m64 LDFLAGS=-m64 ./configure
;;
i686)
CFLAGS=-m32 CXXFLAGS=-m32 LDFLAGS=-m32 ./configure 
;;
esac
# Compile and install
make_install_jambulatv
# Install the default configuration
cd $INSTALL_SRC_DIR/unimrcp/conf
make def-conf
# Install the default data files
cd $INSTALL_SRC_DIR/unimrcp/data
make def-data
# Build Doxygen generated documentation
#make dox
}

asterisk_unimrcp_install () {
tar zxvf $PROJECT_TARBALLS_DIR/asterisk-unimrcp-*.tar.gz -C $INSTALL_SRC_DIR
# Change to asterisk-unimrcp directory
cd $INSTALL_SRC_DIR && mv asterisk-unimrcp* asterisk-unimrcp
cd $INSTALL_SRC_DIR/asterisk-unimrcp
# configure asterisk-unimrcp
./configure --prefix=$PREFIX --libdir=$LIBDIR
make_install_jambulatv
}

google_tts_configure () {
# Copy googletts* agi to asterisk agi-bin directory
cp -v $PROJECT_GITHUB_DIR/asterisk-googletts/googletts*.agi $ASTERISK_AGI_BIN_DIR/
# Change permissions to asterisk user
chown -R $ASTERISK_FILES_USER:$WWW_USER $ASTERISK_AGI_BIN_DIR/googletts*.agi
chmod 700 $ASTERISK_AGI_BIN_DIR/googletts*.agi
}

picotts_install () {
# Setup src directory
[ -d $INSTALL_SRC_DIR/libttspico ] || mkdir -p $INSTALL_SRC_DIR/libttspico
# Extract Pico TTS libraries
cd $TMPDIR
ar x $PROJECT_DEBS_DIR/libttspico0_1.*_amd64.deb data.tar.xz
tar -xvf data.tar.xz -C  $INSTALL_SRC_DIR/libttspico
rm -f data.tar.xz
# Extract Pico TTS voice data
cd $TMPDIR
ar x $PROJECT_DEBS_DIR/libttspico-data_1.*_all.deb data.tar.xz
tar -xvf data.tar.xz -C  $INSTALL_SRC_DIR/libttspico
rm -f data.tar.xz
# Extract Pico TTS utilities (pico2wave)
cd $TMPDIR
ar x $PROJECT_DEBS_DIR/libttspico-utils_1.*_amd64.deb data.tar.xz
tar -xvf data.tar.xz -C  $INSTALL_SRC_DIR/libttspico
rm -f data.tar.xz
# Move files into place
cd $INSTALL_SRC_DIR
mv -v "libttspico/usr/lib/"*-linux-gnu/* "libttspico/usr/lib"
rmdir "libttspico/usr/lib/"*-linux-gnu
mv -v libttspico/usr/bin/* $BINARY_PREFIX/
mv -v libttspico/usr/lib/* $LIBDIR
mv -v libttspico$DATAROOTDIR/pico $DATAROOTDIR/
mv -v libttspico$DATAROOTDIR/doc/* $DOCSDIR/
mv -v libttspico$DATAROOTDIR/man/man1/* $MANDIR1/
#
# Install picospeaker
rsync -avz $PROJECT_GITHUB_DIR/picospeaker/ $INSTALL_SRC_DIR/picospeaker/
cd $INSTALL_SRC_DIR
install -D -m755 picospeaker/picospeaker $BINARY_PREFIX/picospeaker
rm -rf picospeaker
}

picotts_asterisk_configure () {
# Copy picotts agi to asterisk agi-bin directory
cp -v $PROJECT_GITHUB_DIR/asterisk-picotts/picotts*.agi $ASTERISK_AGI_BIN_DIR/
# Change permissions to asterisk user
chown -R $ASTERISK_FILES_USER:$WWW_USER $ASTERISK_AGI_BIN_DIR/picotts.agi
chmod 700 $ASTERISK_AGI_BIN_DIR/picotts.agi
}

text2speech_setup () {
# Copy jambulatv-text2speech script, if it does not exist in bin directory and add custom User-Agent string
[ -e $BINARY_PREFIX/jambulatv-text2speech ] || \
	cat $PROJECT_BIN_DIR/jambulatv-text2speech | \
		sed -e "s:MY_USER_AGENT:$DEFAULT_USER_AGENT:g" | \
		sed "s:MY_MULTIMEDIA_USER:$MULTIMEDIA_USER:g" \
			> $BINARY_PREFIX/jambulatv-text2speech 
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-text2speech 
}

cmake_install () {
# Unpack 
tar zxvf $PROJECT_TARBALLS_DIR/cmake-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v cmake-* cmake 
cd $INSTALL_SRC_DIR/cmake
# Configure
./configure --prefix=$PREFIX
# make install
make_install_jambulatv
}

boost_install () {
# Remove existing boost rpm packages
rpm -e --nodeps boost-chrono boost-filesystem boost-regex boost-system boost-iostreams boost-signals boost-python boost-thread boost-program-options boost-date-time boost-locale
# Build from source
tar jxvf $PROJECT_TARBALLS_DIR/boost_*.tar.bz2 -C $INSTALL_SRC_DIR
# Change to boost directory
cd $INSTALL_SRC_DIR && mv -v boost* boost
cd $INSTALL_SRC_DIR/boost
# Bootstrap
./bootstrap.sh --prefix=$PREFIX --libdir=$LIBDIR
# Stage
./b2 -j$SYSTEM_CPU_CORES variant=release threading=multi toolset=gcc --prefix=$PREFIX --libdir=$LIBDIR --with-atomic --with-chrono --with-context --with-date_time --with-filesystem --with-graph --with-iostreams --with-locale --with-log --with-math --with-program_options --with-random --with-regex --with-serialization --with-signals --with-system --with-test --with-thread --with-timer --with-wave stage
# Install
./b2 -j$SYSTEM_CPU_CORES variant=release threading=multi toolset=gcc --prefix=$PREFIX --libdir=$LIBDIR --with-atomic --with-chrono --with-context --with-date_time --with-filesystem --with-graph --with-iostreams --with-locale --with-log --with-math --with-program_options --with-random --with-regex --with-serialization --with-signals --with-system --with-test --with-thread --with-timer --with-wave install
# Remove install sources
cd ../ && rm -rf boost
}

open_zwave_install () {
rsync -avz $PROJECT_GITHUB_DIR/open-zwave/ $INSTALL_SRC_DIR/open-zwave/
# Change to source dir
cd $INSTALL_SRC_DIR/open-zwave
# Change SYSCONFDIR to /etc before uilding
sed -i "s:\$(PREFIX)/etc:$CONFDIR:g" cpp/build/support.mk
# Build
BUILD=release PREFIX=$PREFIX LIB=$LIBDIR SYSCONFDIR=$CONFDIR/openzwave
make_install_jambulatv
# Link to openzwave library - FIX this - install should be in /usr not /usr/local? 
ln -s /usr/local/lib64/libopenzwave.so.1.4 $LIBDIR/libopenzwave.so.1.4
}

python_openzwave_install () {
# Unpack runtime
unzip -d $INSTALL_SRC_DIR/ $PROJECT_PIPS_DIR/python_openzwave-*.zip
cd $INSTALL_SRC_DIR/python_openzwave
# Remove external URL link to github for downloading embedded version of openzwave
# i.e. it is vailable locally
sed -i "s|def get_openzwave(self, url='https://raw.githubusercontent.com/OpenZWave/python-openzwave/master/archives/open-zwave-master-{0}.zip'|def get_openzwave(self, url='file:$PROJECT_PIPS_DIR/openzwave-embed/open-zwave.zip'|g" $INSTALL_SRC_DIR/python_openzwave/pyozw_setup.py
# compile
python setup.py install
}

domoticz_install () {
# Install open-zwave first
open_zwave_install
#
rsync -avz $PROJECT_GITHUB_DIR/domoticz/ $INSTALL_SRC_DIR/domoticz/
# Create link to openzwave - I think this needs some type of install time option
ln -s $INSTALL_SRC_DIR/open-zwave $INSTALL_SRC_DIR/open-zwave-read-only
# Change to source dir
cd $INSTALL_SRC_DIR/domoticz
# Log to build file
cmake_build_log
# cMake
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PREFIX -DUSE_PYTHON=NO
#-DUSE_PYTHON_PLUGINS=NO
make -j$SYSTEM_CPU_CORES
#
# Post-install actions - Not done by compile
# ------------------------------------------
# Move binary to bindir
mv -v $INSTALL_SRC_DIR/domoticz/domoticz $BINARY_PREFIX
# Move web files to JambulaTV location
mv -v $INSTALL_SRC_DIR/domoticz/www $DOMOTICZ_HTML_DIR
# Get WWW User and Group
set_www_user_group
# Give access and permisions to WWW owner
chown -R $WWW_USER:$DOMOTICZ_GROUP $DOMOTICZ_HTML_DIR
# Create home directory if it does not exist
[ -d $DOMOTICZ_HOME_DIR ] || mkdir -p $DOMOTICZ_HOME_DIR
# Move scripts to home directory
mv -v $INSTALL_SRC_DIR/domoticz/scripts $DOMOTICZ_HOME_DIR/
# Give access and permisions to domoticz
chown -R $DOMOTICZ_USER:$DOMOTICZ_GROUP $DOMOTICZ_HOME_DIR
}

domoticz_configure () {
# Copy udev rules 4 home automation controllers - ttyUSB*
cp -v $PROJECT_CONFIGS_DIR/udev/96-jambulatv.usb-ha-controllers.rules $UDEV_RULES_DIR
# Reload udev
/usr/sbin/udevadm control --reload && udevadm trigger --action=add
# Allow domoticz user to access USB ports
usermod -a -G dialout $DOMOTICZ_USER
# Configure Systemd service file
cat $PROJECT_INIT_SCRIPTS_DIR/domoticz.service | \
	sed "s:DOMOTICZ_USER:$DOMOTICZ_USER:g" | \
	sed "s:DOMOTICZ_WWW_PORT:$DOMOTICZ_WWW_PORT:g" | \
	sed "s:DOMOTICZ_HTML_DIR:$DOMOTICZ_HTML_DIR:g" | \
	sed "s:DOMOTICZ_HOME_DIR:$DOMOTICZ_HOME_DIR:g" | \
	sed "s:DOMOTICZ_LOG_FILE:$DOMOTICZ_LOG_FILE:g" | \
	sed "s:DOMOTICZ_PID_FILE:$DOMOTICZ_PID_FILE:g" \
		> $SYSTEMD_UNITS_DIR_USER/domoticz.service
# Enable domoticz if needed
systemctl enable domoticz.service
# Start domoticz if needed
systemctl start domoticz.service
}

homeassistant_install () {
# open-zwave
python_openzwave_install

# Unpack Home-Assistant using github sources
rsync -avz --delete-after $PROJECT_GITHUB_DIR/home-assistant/ $INSTALL_SRC_DIR/home-assistant/
#
# Force our requirements
cat $PROJECT_PIPS_REQUIRES_DIR/homeassistant-requirements.txt | \
	sed "s:MY_PROJECT_PIPS_DIR:$PROJECT_PIPS_DIR:g" \
		> $INSTALL_SRC_DIR/home-assistant/requirements_all.txt
# Force SQLAlchemy 1.1.15 in recorder
sed -i "s:sqlalchemy==1.2.2:sqlalchemy==1.1.15:g" $INSTALL_SRC_DIR/home-assistant/homeassistant/components/recorder/__init__.py

# Dependencies for Homeassistant - Install locally using pips specified in requirements
pip3 install --no-index --find-links $PROJECT_PIPS_DIR -r $INSTALL_SRC_DIR/home-assistant/requirements_all.txt
#
# Install
cd $INSTALL_SRC_DIR/home-assistant
python3 setup.py install
#
# Create symbolic link
[ -x $BINARY_PREFIX/hass ] || ln -s $PREFIX/local/bin/hass $BINARY_PREFIX/hass

# Add Home assistant user to dialout so they can access ZWave stick
usermod -a -G dialout $HOMEASSISTANT_USER
}

homeassistant_configure () {
# Copy hass configuration files
rsync -av $PROJECT_CONFIGS_DIR/homeassistant/ $PROJECT_SYSTEM_CONF_DIR/homeassistant/
# Change hass config directory permissions
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PROJECT_SYSTEM_CONF_DIR/homeassistant

# Customize secrets i.e. port etc.....

# Copy home-assistant systemd file 
cp -v $PROJECT_INIT_SCRIPTS_DIR/home-assistant.service $SYSTEMD_UNITS_DIR_USER/
# Enable and start home-assistant if needed
systemctl enable home-assistant.service
}

home_automation_scripts () {
for SCRIPT in \
jambulatv-lights \
jambulatv-presence-detection-via-hostapd
do
# Copy script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/$SCRIPT ] || cp -v $PROJECT_BIN_DIR/$SCRIPT $BINARY_PREFIX/
done

# Add systemd service for presence detection which uses hostapd
cp -v $PROJECT_INIT_SCRIPTS_DIR/presence-detection.service $SYSTEMD_UNITS_DIR_USER/
# Enable and start presence-detection if needed
systemctl enable presence-detection.service
} 

openhab_install () {
# Create install directory
mkdir -p $INSTALL_SRC_DIR/openhab
# Unpack runtime
unzip -d $INSTALL_SRC_DIR/openhab $PROJECT_ZIPS_DIR/distribution-*-runtime.zip
# Unpack addons
unzip -d $INSTALL_SRC_DIR/openhab/addons $PROJECT_ZIPS_DIR/distribution-*-addons.zip
}

openhab_configure () {
# Change default server parameters
cp -v $INSTALL_SRC_DIR/openhab/server/eclipse.ini $INSTALL_SRC_DIR/openhab/server/eclipse.ini.orig
cat $INSTALL_SRC_DIR/openhab/server/eclipse.ini.orig | \
	sed -e "s:-Dopenhab.configfile=../configurations/openhab.cfg:-Dopenhab.configfile=$PROJECT_SYSTEM_CONF_DIR/openhab.cfg:" | \
	sed -e "s:-Dorg.osgi.service.http.port=8080:-Dorg.osgi.service.http.port=$OPENHAB_HTTP_PORT:" > $INSTALL_SRC_DIR/openhab/server/eclipse.ini
# Change config parameters and copy file to project configs location
cat $INSTALL_SRC_DIR/openhab/configurations/openhab_default.cfg | \
	sed -e "s:#zwave\:port=:#zwave\:port=/dev/ttyUSB0:" > $PROJECT_SYSTEM_CONF_DIR/openhab.cfg
# Create Link file
ln -s $PROJECT_SYSTEM_CONF_DIR/openhab.cfg $INSTALL_SRC_DIR/openhab/configurations/openhab.cfg
# Change parameters in start file
cp -v $INSTALL_SRC_DIR/openhab/start.sh $INSTALL_SRC_DIR/openhab/start.sh.orig
cat $INSTALL_SRC_DIR/openhab/start.sh.orig | \
	sed -e "s:HTTP_PORT=8080:HTTP_PORT=$OPENHAB_HTTP_PORT:" | \
	sed -e "s:HTTPS_PORT=8443:HTTPS_PORT=$OPENHAB_HTTPS_PORT:" > $INSTALL_SRC_DIR/openhab/start.sh
# Make start up file executable
chmod 755 $INSTALL_SRC_DIR/openhab/start.sh
# Give permissions to multimedia user for openhab directories and config file
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $INSTALL_SRC_DIR/openhab
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PROJECT_SYSTEM_CONF_DIR/openhab.cfg
#
# Copy openhab systemd file 
cp -v $PROJECT_INIT_SCRIPTS_DIR/openhab.service $SYSTEMD_UNITS_DIR_USER/
# Enable and start openhab if needed
systemctl enable openhab.service
#
#
# Display openhab usage information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
OpenHAB Access
==============
% To access openHAB, use a client PC to open the URL below:
  http://$NETWORK_IP_ADDRESS:$OPENHAB_HTTP_PORT
#
EOF
}

heyu_install () {
tar zxvf $PROJECT_TARBALLS_DIR/heyu-$HEYU_VERSION.tar.gz -C $INSTALL_SRC_DIR
# Change to heyu directory
cd $INSTALL_SRC_DIR && mv heyu* heyu
cd $INSTALL_SRC_DIR/heyu
# configure heyu
./configure --prefix=$PREFIX --libdir=$LIBDIR \
	--sysconfdir=$PROJECT_SYSTEM_CONF_DIR --localstatedir=$STATEDIR
make_install_jambulatv
}

heyu_configure () {
# Create heyu directory in JambulaTV configs directory
[ -d $PROJECT_SYSTEM_CONF_DIR/heyu ] || mkdir -p $PROJECT_SYSTEM_CONF_DIR/heyu
# Copy Jambula customized config files
cp -v $PROJECT_CONFIGS_DIR/heyu/ $PROJECT_SYSTEM_CONF_DIR/heyu/
# Link to heyu directory from $HOME
[ -d $HOME/.heyu ] || mkdir -p $HOME/.heyu
ln -s $PROJECT_CONFIGS_DIR/heyu/x10.conf $HOME/.heyu/x10config
ln -s $PROJECT_CONFIGS_DIR/heyu/x10.sched $HOME/.heyu/x10.sched
# Create spool directory
[ -d $STATEDIR/tmp/heyu ] || mkdir -p $STATEDIR/tmp/heyu
# Create log directory
[ -d $PROJECT_SYSTEM_LOG_DIR/heyu ] || mkdir $PROJECT_SYSTEM_LOG_DIR/heyu
# Systemctl start script
cp -v $PROJECT_INIT_SCRIPTS_DIR/heyu.service $SYSTEMD_UNITS_DIR_SYSTEM/
ln -s $SYSTEMD_UNITS_DIR_SYSTEM/heyu.service $SYSTEMD_UNITS_DIR_USER/heyu.service
systemctl --system daemon-reload
# Enable heyu if needed
systemctl enable heyu.service
}

jabberd_configure () {
# Add customized config files: sm.xml, c2s.xml, s2s.xml, router.xml
for JABBERD_CONFIG in sm.xml c2s.xml s2s.xml router.xml;
do
# Make a copy of config
cp -v $JABBERD_CONF_DIR/${JABBERD_CONFIG} $JABBERD_CONF_DIR/${JABBERD_CONFIG}.orig
# Change password while copying to /etc/jabberd directory
cat $JABBERD_CONF_DIR/${JABBERD_CONFIG}.orig | sed -e "s:JABBERD_PASSWORD_CHANGE_ME:$JABBERD_PASSWORD:g" | sed -e "s:LIBDIR:$LIBDIR:g" > $JABBERD_CONF_DIR/$JABBERD_CONFIG
done
# Create jabberd logs directory
[ -d $PROJECT_SYSTEM_LOG_DIR/jabberd ] || mkdir -p $PROJECT_SYSTEM_LOG_DIR/jabberd
# Allow jabber user to access logs
chown -R jabber:jabber $PROJECT_SYSTEM_LOG_DIR/jabberd 
# Enable and start mysql service if it is not running
systemctl -q is-active mysqld.service || systemctl enable mysqld.service
systemctl -q is-active mysqld.service || systemctl start mysqld.service
# Change MySQL password if default is empty
mysqladmin password $MYSQL_ROOT_PASSWORD > /dev/null 2>&1 || clear && echo "Default MySQL password was already changed! Proceeding" && sleep 5
# Create jabberd database
mysql -u root -p$MYSQL_ROOT_PASSWORD < $JABBERD_DB_CREATE
# Create SQL to set privileges on database
echo "GRANT select,insert,delete,update ON jabberd2.* to jabberd2@localhost IDENTIFIED by '$JABBERD_PASSWORD';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
# Copy modified jabberd2 systemd file - i.e. Start after MySQL, otherwise,services fail
cp -v $PROJECT_INIT_SCRIPTS_DIR/jabberd*.service $SYSTEMD_UNITS_DIR_SYSTEM/
# Symlink jabberd/authreg_mysql.so, storage_mysql.so if on x86-64 plaform
if [ $LIBDIR = $PREFIX/lib64 ];
then
[ -d $PREFIX/lib/jabberd ] && rm -rf $PREFIX/lib/jabberd
ln -s $LIBDIR/jabberd $PREFIX/lib/jabberd
fi
# Enable jabberd.service
systemctl enable jabberd.service
systemctl start jabberd.service
}

jabberd_add_users () {
# Asterisk xmpp user
echo "INSERT INTO authreg (username, realm, password) values ('$ASTERISK_XMPP_USERNAME', '$ASTERISK_XMPP_RESOURCE', '$ASTERISK_XMPP_PASSWORD');" | mysql -u jabberd2 -p$JABBERD_PASSWORD jabberd2
# Normal xmpp user
echo "INSERT INTO authreg (username, realm, password) values ('$USER_001_XMPP_USERNAME', '$USER_001_XMPP_RESOURCE', '$USER_001_XMPP_PASSWORD');" | mysql -u jabberd2 -p$JABBERD_PASSWORD jabberd2
# Add normal xmpp user to roster
sed -i "/<\/query>/d" $JABBERD_TEMPLATES_DIR/roster.xml
sleep 1
cat >> $JABBERD_TEMPLATES_DIR/roster.xml <<EOF
<item name='$USER_001_XMPP_USERNAME' jid='$USER_001_XMPP_USERNAME@$USER_001_XMPP_RESOURCE' subscription='none'><group>Asterisk</group></item> 
</query>
EOF
}

zoneminder_pre_install () {
# Install pre-requisite Perl modules that are not packaged
# --------------------------------------------------------
# X10 module
tar zxvf $PROJECT_TARBALLS_DIR/X10-*.tar.gz -C $INSTALL_SRC_DIR
# Change to perl_X10 directory
cd $INSTALL_SRC_DIR && mv X10* perl_X10
cd $INSTALL_SRC_DIR/perl_X10
perl Makefile.PL
make_install_jambulatv

# Net-SFTP-Foreign module
tar zxvf $PROJECT_TARBALLS_DIR/Net-SFTP-Foreign-*.tar.gz -C $INSTALL_SRC_DIR
# Change to Net-SFTP-Foreign directory
cd $INSTALL_SRC_DIR && mv Net-SFTP-Foreign* perl_Net-SFTP-Foreign
cd $INSTALL_SRC_DIR/perl_Net-SFTP-Foreign
perl Makefile.PL PREFIX="$PREFIX" LIBS="-L$LIBDIR"
make_install_jambulatv

# Net-WebSocket-Server module
tar zxvf $PROJECT_TARBALLS_DIR/Net-WebSocket-Server-*.tar.gz -C $INSTALL_SRC_DIR
# Change to perl_Net-WebSocket-Server directory
cd $INSTALL_SRC_DIR && mv Net-WebSocket-Server* perl_Net-WebSocket-Server
cd $INSTALL_SRC_DIR/perl_Net-WebSocket-Server
perl Makefile.PL
make_install_jambulatv

# Crypt-MySQL module
tar zxvf $PROJECT_TARBALLS_DIR/Crypt-MySQL-*.tar.gz -C $INSTALL_SRC_DIR
# Change to perl_Crypt-MySQL directory
cd $INSTALL_SRC_DIR && mv Crypt-MySQL* perl_Crypt-MySQL
cd $INSTALL_SRC_DIR/perl_Crypt-MySQL
perl Makefile.PL
make_install_jambulatv
}

zoneminder_128_install () {
rsync -av --delete-after $PROJECT_GITHUB_DIR/ZoneMinder/ $INSTALL_SRC_DIR/ZoneMinder/
# Patches
# Logitech Quickam USB webcams not displaying image: Replace LIBDIR variable in patch
sed "s:LIBDIR:$LIBDIR:g" $PROJECT_PATCHES_DIR/zoneminder.zmdc.pl.patch > $TMPDIR/zmdc.pl.patch
# Patch
patch -p1 $INSTALL_SRC_DIR/ZoneMinder/scripts/zmdc.pl.in < $TMPDIR/zmdc.pl.patch
# Get WWW User and Group
set_www_user_group
#
cd $INSTALL_SRC_DIR/ZoneMinder
# bootstrap
./bootstrap.sh
# configure zoneminder
./configure --prefix=$PREFIX --libdir=$LIBDIR --sysconfdir=$PROJECT_SYSTEM_CONF_DIR \
--with-extralibs="-L$LIBDIR -L$LIBDIR/mysql" --localstatedir=$STATEDIR \
--enable-mmap=yes --with-libarch=lib --with-ffmpeg=$PREFIX --with-webuser=$WWW_USER \
--with-webgroup=$WWW_GROUP --with-webhost=$HOSTNAME --with-webdir=$ZONEMINDER_WWW_ROOT_DIR \
--with-cgidir=$ZONEMINDER_WWW_ROOT_DIR \
ZM_DB_HOST=$ZONEMINDER_DB_HOST ZM_DB_NAME=$ZONEMINDER_DB_NAME \
ZM_DB_USER=$ZONEMINDER_DB_USER ZM_DB_PASS=$ZONEMINDER_DB_PASS \
ZM_RUNDIR=$RUNDIR/zm ZM_TMPDIR=$TMPDIR/zm \
ZM_LOGDIR=$PROJECT_SYSTEM_LOG_DIR/zoneminder \
ZM_SSL_LIB=openssl CPPFLAGS="-D__STDC_CONSTANT_MACROS ${CPPFLAGS}"
make_install_jambulatv
}

zoneminder_130_install () {
rsync -av --delete-after $PROJECT_GITHUB_DIR/ZoneMinder/ $INSTALL_SRC_DIR/ZoneMinder/
# Patches
# Logitech Quickam USB webcams not displaying image: Replace LIBDIR variable in patch
sed "s:LIBDIR:$LIBDIR:g" $PROJECT_PATCHES_DIR/zoneminder.zmdc.pl.patch > $TMPDIR/zmdc.pl.patch
# Fixes to zmdc.pl
patch -p1 $INSTALL_SRC_DIR/ZoneMinder/scripts/zmdc.pl.in < $TMPDIR/zmdc.pl.patch


# API Bugs - Remove these patches when fixed
# ------------------------------------------
# Set require_once - includes to full path
patch -p1 $INSTALL_SRC_DIR/ZoneMinder/web/api/app/Config/bootstrap.php.in < $PROJECT_PATCHES_DIR/zoneminder.api.bootstrap.patch
# Also set to full path in '../api/app/Controller/HostController.php'
#
# Add/Edit/Delete of Monitors produces 'Insufficient privileges' errors 
patch -p1 $INSTALL_SRC_DIR/ZoneMinder/web/api/app/Controller/MonitorsController.php < $PROJECT_PATCHES_DIR/zoneminder.api.MonitorsController.patch


# Get WWW User and Group
set_www_user_group
#
cd $INSTALL_SRC_DIR/ZoneMinder
# Log to build file
cmake_build_log
# Compile using cmake
cmake \
	-DCMAKE_BUILD_TYPE=Release \
	-DCMAKE_VERBOSE_MAKEFILE=OFF \
	-DCMAKE_INSTALL_PREFIX=$PREFIX \
	-DCMAKE_INSTALL_LIBDIR=$LIBDIR \
	-DZM_RUNDIR=$RUNDIR/zm \
	-DZM_SOCKDIR=$RUNDIR/zm \
	-DZM_TMPDIR=$TMPDIR/zm \
	-DZM_LOGDIR=$PROJECT_SYSTEM_LOG_DIR/zoneminder \
	-DZM_WEBDIR=$ZONEMINDER_WWW_ROOT_DIR \
	-DZM_CGIDIR=$ZONEMINDER_WWW_ROOT_DIR \
	-DZM_CACHEDIR=$CACHEDIR/zoneminder \
	-DZM_CONTENTDIR=$ZONEMINDER_CONTENT_DIR \
	-DZM_DB_HOST=$ZONEMINDER_DB_HOST \
	-DZM_DB_NAME=$ZONEMINDER_DB_NAME \
	-DZM_DB_USER=$ZONEMINDER_DB_USER \
	-DZM_DB_PASS=$ZONEMINDER_DB_PASS \
	-DZM_WEB_USER=$WWW_USER \
	-DZM_WEB_GROUP=$WWW_GROUP \
	-DZM_DIR_EVENTS=$ZONEMINDER_CONTENT_DIR/events \
	-DZM_DIR_IMAGES=$ZONEMINDER_CONTENT_DIR/images \
	-DZM_DIR_SOUNDS=$ZONEMINDER_SOUNDS_DIR \
	-DZM_PATH_ZMS=/zms-inetd \
	-DZM_PATH_MAP=/dev/shm \
	-DZM_PATH_ARP= \
	-DZM_CONFIG_DIR=$ZONEMINDER_CONFIG_DIR \
	-DZM_CONFIG_SUBDIR=$ZONEMINDER_CONFIG_DIR/conf.d \
	-DZM_EXTRA_LIBS=ssl \
	-DZM_MYSQL_ENGINE=InnoDB \
	-DZM_NO_MMAP=OFF \
	-DZM_NO_FFMPEG=OFF \
	-DZM_NO_LIBVLC=OFF \
	-DZM_NO_CURL=OFF \
	-DZM_NO_X10=OFF \
	-DZM_ONVIF=ON \
	-DZM_SYSTEMD=ON \
	.
# Make and install
make_install_jambulatv
}

zoneminder_configure () {
# Get WWW User and Group
set_www_user_group

# Set permissions on ZM related directories
# -----------------------------------------
# Create content directory for ZoneMinder under user's home directory
[[ -d $ZONEMINDER_CONTENT_DIR ]] || mkdir -p $ZONEMINDER_CONTENT_DIR
# Give web user ownership of content directory for ZoneMinder 
chown -R $WWW_USER:$WWW_GROUP $ZONEMINDER_CONTENT_DIR

# Create events and images directory for ZoneMinder 
for ZM_DIR in events images
do
[ -d $ZONEMINDER_CONTENT_DIR/$ZM_DIR ] || mkdir -p $ZONEMINDER_CONTENT_DIR/$ZM_DIR
# Give web user ownership of events and images directory for ZoneMinder 
chown -R $WWW_USER:$WWW_GROUP $ZONEMINDER_CONTENT_DIR/$ZM_DIR
done

# Create logging directory for Zoneminder
[[ -d $PROJECT_SYSTEM_LOG_DIR/zoneminder ]] || mkdir -p $PROJECT_SYSTEM_LOG_DIR/zoneminder
# Change permissions on logging directory
chown -R $WWW_USER:$WWW_GROUP $PROJECT_SYSTEM_LOG_DIR/zoneminder

# Create cache directory for Zoneminder
[[ -d $CACHEDIR/zoneminder ]] || mkdir -p $CACHEDIR/zoneminder
# Change permissions on cache directory
chown -R $WWW_USER:$WWW_GROUP $CACHEDIR/zoneminder
# Add link to cache directory under webroot directory for ZoneMinder 
ln -s $CACHEDIR/zoneminder $ZONEMINDER_WWW_ROOT_DIR/cache

# Create run directory for Zoneminder
[[ -d $RUNDIR/zm ]] || mkdir -p $RUNDIR/zm
# Change permissions on run directory
chown -R $WWW_USER:$WWW_GROUP $RUNDIR/zm

# Create sounds directory for Zoneminder
[[ -d $PROJECT_SYSTEM_SHARE_DIR/sounds/zoneminder ]] || mkdir -p $PROJECT_SYSTEM_SHARE_DIR/sounds/zoneminder
# Change ownership of ZM sounds directory
chown -R $WWW_USER:$WWW_GROUP $PROJECT_SYSTEM_SHARE_DIR/sounds/zoneminder

# Setup Web Server
# ----------------
# Add nginx web server config file for ZoneMinder if not present
[ -f $NGINX_CONF_DIR/sites-enabled/zoneminder ] || \
cp -v $PROJECT_CONFIGS_DIR/nginx/sites-enabled/zoneminder $NGINX_CONF_DIR/sites-enabled/
# Add nginx user to video group
usermod -a -G video $WWW_USER
#
# Copy test index.html, *.php and *.cgi files to zm
cp -rv $PROJECT_CUSTOMIZATION_DIR/nginx/html/test* $ZONEMINDER_WWW_ROOT_DIR/
# Make nph-zms behave like cgi script since we are on nginx i.e. We want jpeg image
ln -s $ZONEMINDER_WWW_ROOT_DIR/nph-zms $ZONEMINDER_WWW_ROOT_DIR/jpeg.cgi
# Make .php and .cgi files executable
cd $ZONEMINDER_WWW_ROOT_DIR && chmod 755 *.php *.cgi

# Give web user ownership of webroot directory for ZoneMinder 
chown -R $WWW_USER:$WWW_GROUP $ZONEMINDER_WWW_ROOT_DIR

# MySQL DB for ZoneMinder
# ------------------------
# Enable and start mysql service if it is not running
systemctl -q is-active mysqld.service || systemctl enable mysqld.service
systemctl -q is-active mysqld.service || systemctl start mysqld.service
#
# Change MySQL password if default is empty
mysqladmin password $MYSQL_ROOT_PASSWORD > /dev/null 2>&1 || clear && echo "Default MySQL password was already changed! Proceeding ..." && sleep 5
# Create zoneminder database
mysqladmin -p$MYSQL_ROOT_PASSWORD create $ZONEMINDER_DB_NAME
# Generate database tables using schema
mysql -u root -p$MYSQL_ROOT_PASSWORD $ZONEMINDER_DB_NAME < $ZONEMINDER_DB_SCHEMA
# Set privileges on zoneminder database
echo "GRANT ALL PRIVILEGES ON $ZONEMINDER_DB_NAME.* to $ZONEMINDER_DB_USER@localhost IDENTIFIED by '$ZONEMINDER_DB_PASS';" | mysql -u root -p$MYSQL_ROOT_PASSWORD

# ZM Options
# ----------
# Add customized data to Config table
mysql -u $ZONEMINDER_DB_USER -p$ZONEMINDER_DB_PASS $ZONEMINDER_DB_NAME < $PROJECT_CONFIGS_DIR/zoneminder/Config.13x.sql

# ZM Users
# --------
# Rename zoneminder admin user and set password in MySQL database
echo $(cat <<EOT
UPDATE Users SET Username="$ZONEMINDER_ADMIN_USER", Password=password("$ZONEMINDER_ADMIN_PASS") WHERE Username='admin';
EOT
) | mysql -u $ZONEMINDER_DB_USER -p$ZONEMINDER_DB_PASS $ZONEMINDER_DB_NAME

# Upgrade ZM database tables to current version
# ---------------------------------------------
/usr/bin/zmupdate.pl -nointeractive

# Give entire ownership of ZM config directory to web user 
# --------------------------------------------------------
# IMPORTANT: Run after zmupdate.pl
chown -R $WWW_USER:$WWW_GROUP $ZONEMINDER_CONFIG_DIR
# Change permissions on ZM config files (if existent) - or web interface wont display
[[ -e $ZONEMINDER_CONFIG_DIR/zm.conf ]] && \
	chmod 644 $ZONEMINDER_CONFIG_DIR/zm.conf
[[ -e $ZONEMINDER_CONFIG_DIR/conf.d/zmcustom.conf ]] && \
	chmod 644 $ZONEMINDER_CONFIG_DIR/conf.d/zmcustom.conf

# Setup utilities for Alarms
# --------------------------
# Modify perl-based daemon script that watches for ZoneMinder alarms and copy to bin/
cat $PROJECT_CONTRIB_DIR/scripts/zoneminder_alarm_daemon.pl | \
	sed "s:ZONEMINDER_DB_HOST:$ZONEMINDER_DB_HOST:g" | \
	sed "s:ZONEMINDER_DB_NAME:$ZONEMINDER_DB_NAME:g"| \
	sed "s:ZONEMINDER_DB_USER:$ZONEMINDER_DB_USER:g" | \
	sed "s:ZONEMINDER_DB_PASS:$ZONEMINDER_DB_PASS:g" | \
	sed "s:MY_RUNDIR:$RUNDIR:g" | \
	sed "s:MY_ZONEMINDER_ALARM_NOTIFICATIONS_TOOL:$ZONEMINDER_ALARM_NOTIFICATIONS_TOOL:g" > $ZONEMINDER_ALARM_DAEMON
# Make script executable
chmod 755 $ZONEMINDER_ALARM_DAEMON
#
# Copy ZoneMinder script to send out all types of notifications/alerts upon ZM alarms
[ -e $ZONEMINDER_ALARM_NOTIFICATIONS_TOOL ] || \
	cat $PROJECT_BIN_DIR/jambulatv-zm-alarm-all-notifications | \
		sed -e "s:ZONEMINDER_DB_HOST:$ZONEMINDER_DB_HOST:g" | \
		sed -e "s:ZONEMINDER_WWW_PORT:$ZONEMINDER_WWW_PORT:g" | \
		sed -e "s:MY_SMARTHOME_HUB_WWW_PORT:$SMARTHOME_HUB_WWW_PORT:g" | \
		sed -e "s:MY_TELEGRAM_CREDENTIALS_CONFIG:$TELEGRAM_CREDENTIALS_CONFIG:g" | \
		sed -e "s:MY_WHATSAPP_CREDENTIALS_CONFIG:$WHATSAPP_CREDENTIALS_CONFIG:g" | \
		sed -e "s:MY_WHATSAPP_TOOL:$WHATSAPP_TOOL:g" | \
		sed -e "s:MY_EMAIL_CREDENTIALS_CONFIG:$EMAIL_CREDENTIALS_CONFIG:g" | \
		sed -e "s:MY_EMAIL_VIA_GMAIL_TOOL:$EMAIL_VIA_GMAIL_TOOL:g" | \
		sed -e "s:MY_OSD_TOOL:$OSD_TOOL:g" | \
		sed -e "s:MY_KODI_HTTP_USER:$KODI_HTTP_USER:g" | \
		sed -e "s:MY_KODI_HTTP_PASS:$KODI_HTTP_PASS:g" | \
		sed -e "s:MY_KODI_HTTP_PORT:$KODI_HTTP_PORT:g" | \
		sed -e "s:MY_ASTERISK_USER:$ASTERISK_FILES_USER:g" | \
		sed -e "s:MY_ASTERISK_GROUP:$WWW_USER:g" \
			> $ZONEMINDER_ALARM_NOTIFICATIONS_TOOL
# Make script executable
chmod 755 $ZONEMINDER_ALARM_NOTIFICATIONS_TOOL
#
# Add sample cctv-settings.cfg file
cat > $PROJECT_SYSTEM_CONF_DIR/cctv-settings.cfg << EOF
# Settings for CCTV camera alarms
CCTV_ALL=1 # Must be set to 1 if you want any alert below to work

CCTV_LIGHTS=0
CCTV_TELEGRAM=0
CCTV_WHATSAPP=0
CCTV_KODI=0
CCTV_CALL=0
CCTV_OSD=0
CCTV_EMAIL=0
EOF

# USB Webcams
#------------
# Copy udev rules file for USB webcams - Naming scheme instead of /dev/videoX
cp -v $PROJECT_CONFIGS_DIR/udev/96-jambulatv.usb-webcams.rules $UDEV_RULES_DIR
# Reload udev
/usr/sbin/udevadm control --reload && udevadm trigger --action=add

# ZM Monitors
# -----------
zoneminder_add_monitors_using_api

# Setup Systemd
# -------------
# Copy systemd script- this defers from source file to kill errors during start
cat $PROJECT_INIT_SCRIPTS_DIR/zoneminder.service | \
	sed "s:MY_WWW_USER:$WWW_USER:g" | \
	sed "s:MY_WWW_GROUP:$WWW_GROUP:g" | \
	sed -e "s:MY_RUNDIR:$RUNDIR:g" | \
	sed -e "s:MY_ZONEMINDER_ALARM_DAEMON:$ZONEMINDER_ALARM_DAEMON:g" | \
	sed -e "s:MY_BINARY_PREFIX:$BINARY_PREFIX:g" \
		> $SYSTEMD_UNITS_DIR_USER/zoneminder.service
# Enable zoneminder
systemctl enable zoneminder.service
# Start zoneminder
systemctl start zoneminder.service
}

zoneminder_login_using_api () {
# Remove old cookies-jar file
[[ -e $CURL_COOKIE_JAR_FILE ]] && sudo rm -f $CURL_COOKIE_JAR_FILE
# Login for ZoneMinder < v1.32.0
$CURL_CMD $CURL_OPTS -c $CURL_COOKIE_JAR_FILE \
	-d view=console \
	-d action=login \
	-d username=$ZONEMINDER_ADMIN_USER \
	-d password=$ZONEMINDER_ADMIN_PASS \
		$ZONEMINDER_WEB_URL/index.php
}

zoneminder_logout_using_api () {
# Logout for ZoneMinder < v1.32.0
$CURL_CMD -XPOST $CURL_OPTS -b $CURL_COOKIE_JAR_FILE \
	-d username=$ZONEMINDER_ADMIN_USER \
	-d password=$ZONEMINDER_ADMIN_PASS \
	-d action=logout \
	-d view=console \
		$ZONEMINDER_WEB_URL/index.php > /dev/null 2>&1
}

zoneminder_add_monitors_using_api () {
# Log into Zoneminder using API
zoneminder_login_using_api

# Add ZoneMinder Monitor(s)
# -------------------------
for MONITOR in $ZONEMINDER_CCTV_MONITORS;
do

if [[ -e $ZONEMINDER_CCTV_MONITORS_CONFIGS_DIR/$MONITOR ]];
then
# Source variables for this monitor
. $ZONEMINDER_CCTV_MONITORS_CONFIGS_DIR/$MONITOR

# Add selected monitor if its config file is found
$CURL_CMD $CURL_OPTS -b $CURL_COOKIE_JAR_FILE \
	-d "Monitor[Id]=$Id" \
	-d "Monitor[Name]=$Name" \
	-d "Monitor[ServerId]=null" \
	-d "Monitor[StorageId]=1" \
	-d "Monitor[Type]=$Type" \
	-d "Monitor[Function]=$Function" \
	-d "Monitor[Enabled]=$Enabled" \
	-d "Monitor[LinkedMonitors]=null" \
	-d "Monitor[Triggers]=" \
	-d "Monitor[Device]=$Device" \
	-d "Monitor[Channel]=0" \
	-d "Monitor[Format]=255" \
	-d "Monitor[V4LMultiBuffer]=false" \
	-d "Monitor[V4LCapturesPerFrame]=1" \
	-d "Monitor[Protocol]=$Protocol" \
	-d "Monitor[Method]=$Method" \
	-d "Monitor[Host]=$Host" \
	-d "Monitor[Port]=$Port" \
	-d "Monitor[SubPath]=" \
	-d "Monitor[Path]=$Path" \
	-d "Monitor[Options]=$Options" \
	-d "Monitor[User]=$User" \
	-d "Monitor[Pass]=$Path" \
	-d "Monitor[Width]=$Width" \
	-d "Monitor[Height]=$Height" \
	-d "Monitor[Colours]=$Colours" \
	-d "Monitor[Palette]=0" \
	-d "Monitor[Orientation]=0" \
	-d "Monitor[Deinterlacing]=0" \
	-d "Monitor[SaveJPEGs]=0" \
	-d "Monitor[VideoWriter]=1" \
	-d "Monitor[EncoderParameters]=null" \
	-d "Monitor[RecordAudio]=0" \
	-d "Monitor[RTSPDescribe]=false" \
	-d "Monitor[Brightness]=-1" \
	-d "Monitor[Contrast]=-1" \
	-d "Monitor[Hue]=-1" \
	-d "Monitor[Colour]=-1" \
	-d "Monitor[EventPrefix]=$Name -" \
	-d "Monitor[LabelFormat]=  %A    %d %B, %Y        %I:%M:%S %p" \
	-d "Monitor[LabelX]=0" \
	-d "Monitor[LabelY]=0" \
	-d "Monitor[LabelSize]=1" \
	-d "Monitor[ImageBufferCount]=20" \
	-d "Monitor[WarmupCount]=0" \
	-d "Monitor[PreEventCount]=0" \
	-d "Monitor[PostEventCount]=5" \
	-d "Monitor[StreamReplayBuffer]=0" \
	-d "Monitor[AlarmFrameCount]=1" \
	-d "Monitor[SectionLength]=600" \
	-d "Monitor[FrameSkip]=0" \
	-d "Monitor[MotionFrameSkip]=0" \
	-d "Monitor[AnalysisFPSLimit]=null" \
	-d "Monitor[AnalysisUpdateDelay]=0" \
	-d "Monitor[MaxFPS]=$MaxFPS" \
	-d "Monitor[AlarmMaxFPS]=$AlarmMaxFPS" \
	-d "Monitor[FPSReportInterval]=100" \
	-d "Monitor[RefBlendPerc]=6" \
	-d "Monitor[AlarmRefBlendPerc]=6" \
	-d "Monitor[Controllable]=0" \
	-d "Monitor[ControlId]=null" \
	-d "Monitor[ControlDevice]=null" \
	-d "Monitor[ControlAddress]=null" \
	-d "Monitor[AutoStopTimeout]=null" \
	-d "Monitor[TrackMotion]=0" \
	-d "Monitor[TrackDelay]=null" \
	-d "Monitor[ReturnLocation]=-1" \
	-d "Monitor[ReturnDelay]=null" \
	-d "Monitor[DefaultView]=Events" \
	-d "Monitor[DefaultRate]=100" \
	-d "Monitor[DefaultScale]=100" \
	-d "Monitor[SignalCheckPoints]=10" \
	-d "Monitor[SignalCheckColour]=#0000c0" \
	-d "Monitor[WebColour]=red" \
	-d "Monitor[Exif]=false" \
	-d "Monitor[Sequence]=1" \
		$ZONEMINDER_API_URL/monitors.json | grep -i "\"success\": false," > /dev/null 2>&1
MONITOR_ADDED_STATUS=$?
# Notify of added monitor
[[ "$MONITOR_ADDED_STATUS" = "0" ]] || \
	logger -s -t $(basename $0) "Info: CCTV monitor [$MONITOR] has been added"
# Notify of error adding monitor
[[ "$MONITOR_ADDED_STATUS" = "0" ]] && \
	logger -s -t $(basename $0) "Error: CCTV monitor [$MONITOR] could not be added"

# Add corresponding Zones(s)
# --------------------------
# Add Zone for Monitor Id 1
$CURL_CMD $CURL_OPTS -b $CURL_COOKIE_JAR_FILE \
	-d "Zone[MonitorId]=$Id" \
	-d "Zone[Name]=$Name" \
	-d "Zone[Id]=" \
	-d "Zone[Type]=Active" \
	-d "Zone[Units]=Percent" \
	-d "Zone[NumCoords]=4" \
	-d "Zone[Coords]=0,0 319,0 319,239 0,239" \
	-d "Zone[Area]=76800" \
	-d "Zone[AlarmRGB]=16711680" \
	-d "Zone[CheckMethod]=Blobs" \
	-d "Zone[MinPixelThreshold]=25" \
	-d "Zone[MaxPixelThreshold]=null" \
	-d "Zone[MinAlarmPixels]=2304" \
	-d "Zone[MaxAlarmPixels]=57600" \
	-d "Zone[FilterX]=3" \
	-d "Zone[FilterY]=3" \
	-d "Zone[MinFilterPixels]=2304" \
	-d "Zone[MaxFilterPixels]=57600" \
	-d "Zone[MinBlobPixels]=1536" \
	-d "Zone[MaxBlobPixels]=null" \
	-d "Zone[MinBlobs]=1" \
	-d "Zone[MaxBlobs]=null" \
	-d "Zone[OverloadFrames]=0" \
	-d "Zone[ExtendAlarmFrames]=0" \
		$ZONEMINDER_API_URL/zones.json | grep -i "\"success\": false," > /dev/null 2>&1
ZONE_ADDED_STATUS=$?
# Notify of added monitor
[[ "$ZONE_ADDED_STATUS" = "0" ]] || \
	logger -s -t $(basename $0) "Info: Zone for [$MONITOR] has been added"
# Notify of error adding monitor
[[ "$ZONE_ADDED_STATUS" = "0" ]] && \
	logger -s -t $(basename $0) "Error: Zone for [$MONITOR] could not be added"

else
# Notify of missing config file for monitor
logger -s -t $(basename $0) "Warning: The config file for CCTV monitor [$MONITOR] was not found"
fi

done

# Log Out Zoneminder using API
zoneminder_logout_using_api
}

zoneminder_zms_inetd () {
# Get WWW User and Group
set_www_user_group
#
# Add port to services
echo "
zms-inetd	$ZONEMINDER_ZMS_INETD_PORT/tcp		# Zoneminder ZMS inetd-wrapper" >> $CONFDIR/services
#
# Add xinetd file
cat > $CONFDIR/xinetd.d/zms <<EOF
# description: zms
#
service zms-inetd
{
        disable         = no
        id              = zms-inetd
        socket_type     = stream
        protocol        = tcp
        wait            = no
        user            = $WWW_USER
        port            = $ZONEMINDER_ZMS_INETD_PORT
        server          = $ZONEMINDER_ZMS_INETD_TOOL 
}
EOF
#
# Copy jambulatv-zms-inetd script, if it does not exist in bin directory
[ -e $ZONEMINDER_ZMS_INETD_TOOL ] || \
	cat $PROJECT_BIN_DIR/jambulatv-zms-inetd | \
		sed -e "s:MY_ZONEMINDER_CONFIG_DIR:$ZONEMINDER_CONFIG_DIR:g" \
			> $ZONEMINDER_ZMS_INETD_TOOL
# Make tool executable
chmod 755 $ZONEMINDER_ZMS_INETD_TOOL
# Give web user permission to use this tool
chown $WWW_USER:$WWW_GROUP $ZONEMINDER_ZMS_INETD_TOOL
#
# Restart xinetd service
systemctl restart xinetd.service
#
# Display ZoneMinder usage information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
ZONEMINDER (CCTV) Access
=========================
% To access your Webcams & IP Cameras, use a client PC to open the URL below:
  http://$NETWORK_IP_ADDRESS:$ZONEMINDER_WWW_PORT


IMPORTANT:  You may need to update the database by running the following command:

zmupdate.pl

#
EOF
}

zmeventserver_configure () {
# Modify zmeventnotification.pl, a perl-based script that watches for ZoneMinder alarms
# --------------------------------------------------------------------------------------
if [[ ! -x $ZMEVENTSERVER_NOTIFICATION_DAEMON ]];
then

# Create temp patch to change path for config file, port number, and disable SSL for now
cat $PROJECT_PATCHES_DIR/zmeventnotification.pl.patch | \
	sed "s:MY_ZONEMINDER_CONFIG_DIR:$ZONEMINDER_CONFIG_DIR:g" | \
	sed "s:MY_ZMEVENTSERVER_PORT:$ZMEVENTSERVER_PORT:g"| \
	sed "s:MY_ZONEMINDER_ALARM_NOTIFICATIONS_TOOL:$ZONEMINDER_ALARM_NOTIFICATIONS_TOOL:g" > $TMPDIR/zmeventnotification.pl.patch

# Copy original zmeventnotification.pl script to /usr/bin directory
cp -v $PROJECT_CONTRIB_DIR/scripts/zmeventnotification.pl \
	$ZMEVENTSERVER_NOTIFICATION_DAEMON
# Make script executable
chmod 755 $ZMEVENTSERVER_NOTIFICATION_DAEMON

# Apply above patch to zmeventnotification.pl script
patch -p1 $ZMEVENTSERVER_NOTIFICATION_DAEMON < $TMPDIR/zmeventnotification.pl.patch
fi

# Copy and modify zmeventnotification.ini, a sample config file for zmeventserver
if [[ ! -e $ZONEMINDER_CONFIG_DIR/zmeventnotification.ini ]];
then
cat $PROJECT_CONFIGS_DIR/zoneminder/zmeventnotification.ini | \
	sed "s:MY_ZMEVENTSERVER_PORT:$ZMEVENTSERVER_PORT:g" | \
	sed "s:MY_NGINX_CONF_DIR:$NGINX_CONF_DIR:g" \
		> $ZONEMINDER_CONFIG_DIR/zmeventnotification.ini
# Give web user permission to access zmevenserver config file
set_www_user_group
chown $WWW_USER:$WWW_GROUP $ZONEMINDER_CONFIG_DIR/zmeventnotification.ini
fi

# Create SSL certificates and keys
ssl_cert_key_generate $NGINX_CONF_DIR/ssl/zoneminder.crt $NGINX_CONF_DIR/ssl/zoneminder.key 7300
}

motion_install () {
rsync -avz $PROJECT_GITHUB_DIR/motion/ $INSTALL_SRC_DIR/motion/
# configure
cd $INSTALL_SRC_DIR/motion
./configure --prefix=$PREFIX --libdir=$LIBDIR --sysconfdir=$PROJECT_SYSTEM_CONF_DIR/motion
make_install_jambulatv
}

motion_configure () {
# Create motion's html directory
[ -d $WWW_HTML_DIR/motion ] || mkdir $WWW_HTML_DIR/motion
# Copy sample motion.conf
cat $PROJECT_CONFIGS_DIR/motion.conf.sample | \
	sed -e "s:MOTION_DB_USER:$MOTION_DB_USER:g" | \
	sed -e "s:MOTION_DB_PASS:$MOTION_DB_PASS:g" \
	> $PROJECT_SYSTEM_CONF_DIR/motion/motion.conf
#
# Systemctl script - > Not yet ready
#cp -v $PROJECT_INIT_SCRIPTS_DIR/motion.service $SYSTEMD_UNITS_DIR_SYSTEM/
#ln -s $SYSTEMD_UNITS_DIR_SYSTEM/motion.service $SYSTEMD_UNITS_DIR_USER/motion.service
#systemctl --system daemon-reload
# Enable motion if needed
#systemctl enable motion.service
#
# Use chkconfig instead
cp -v $PROJECT_INIT_SCRIPTS_DIR/motion.init $CONFDIR/init.d/motion
chkconfig --add motion
chkconfig motion on
#
# Enable and start mysql service if it is not running
systemctl -q is-active mysqld.service || systemctl enable mysqld.service
systemctl -q is-active mysqld.service || systemctl start mysqld.service
# Change MySQL password if default is empty
mysqladmin password $MYSQL_ROOT_PASSWORD > /dev/null 2>&1 || clear && echo "Default MySQL password was already changed! Proceeding ..." && sleep 5
# Create motion database
mysqladmin -p$MYSQL_ROOT_PASSWORD create $MOTION_DB_NAME
# Set privileges on motion database
echo "GRANT ALL PRIVILEGES ON $MOTION_DB_NAME.* to $MOTION_DB_USER@localhost IDENTIFIED by '$MOTION_DB_PASS';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
# Generate motion database tables using schema
#echo "CREATE TABLE security (camera int, filename char(80) not null, frame int, file_type int, time_stamp timestamp(14), event_time_stamp timestamp(14));" | mysql -u $MOTION_DB_USER -p$MOTION_DB_PASS $MOTION_DB_NAME
echo "CREATE TABLE security (camera int, filename char(80) not null, frame int, file_type int, time_stamp timestamp, event_time_stamp timestamp);" | mysql -u $MOTION_DB_USER -p$MOTION_DB_PASS $MOTION_DB_NAME
}

libdbi_install () {
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/libdbi-$LIBDBI_VERSION.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v libdbi-* libdbi
# Configure
cd $INSTALL_SRC_DIR/libdbi && ./configure --prefix=$PREFIX --libdir=$LIBDIR
# Compile
make_install_jambulatv
}

icinga1_install () {
# Get WWW User and Group
set_www_user_group
#
# Create icinga user account
useradd -m $ICINGA_USER
# Give password to icinga user
echo "$ICINGA_PASS" | passwd --stdin $ICINGA_USER
# Create icinga group
groupadd $ICINGA_CMD_GROUP
# Add members to icinga group
usermod -a -G $ICINGA_CMD_GROUP $ICINGA_USER
usermod -a -G $ICINGA_CMD_GROUP $WWW_USER
# Create icinga directories
[ -d $STATEDIR/log/icinga ] || mkdir -p $STATEDIR/log/icinga
[ -d $STATEDIR/rw ] || mkdir -p $STATEDIR/rw 
[ -d $STATEDIR/cache/icinga ] || mkdir -p $STATEDIR/cache/icinga
[ -d $SPOOLDIR/icinga ] || mkdir -p $SPOOLDIR/icinga
# Set permissions on icinga directories to icinga user
chown -R $ICINGA_USER:$ICINGA_GROUP $STATEDIR/log/icinga
chown -R $ICINGA_USER:$ICINGA_GROUP $STATEDIR/rw
chown -R $ICINGA_USER:$ICINGA_GROUP $STATEDIR/cache/icinga
chown -R $ICINGA_USER:$ICINGA_GROUP $SPOOLDIR/icinga
#
# Unpack
tar zxvf $PROJECT_TARBALLS_DIR/icinga-$ICINGA1_VERSION.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v icinga-* icinga
# Configure
cd $INSTALL_SRC_DIR/icinga && ./configure --prefix=$PREFIX \
--libdir=$LIBDIR --sysconfdir=$CONFDIR/icinga \
--sbindir=$WWW_CGI_DIR/icinga --localstatedir=$STATEDIR \
--datarootdir=$WWW_HTML_DIR/icinga --with-httpd-conf=$NGINX_CONFD_DIR \
--with-icinga-user=$ICINGA_USER --with-icinga-group=$ICINGA_GROUP \
--with-web-user=$WWW_USER --with-web-group=$WWW_GROUP \
--with-command-group=$ICINGA_CMD_GROUP --with-log-dir=$STATEDIR/log \
--with-lockfile=$STATEDIR/rw/icinga.lock \
--with-icinga-chkfile=$STATEDIR/rw/icinga.check \
--with-ext-cmd-file-dir=$STATEDIR/rw
# Compile
# Log to build file
make_build_log
# Make
make -s all
make install
make install-init
make install-config
make install-eventhandlers
make install-commandmode
}

nagios_plugins_install () {
# Unpack 
tar zxvf $PROJECT_TARBALLS_DIR/nagios-plugins-$NAGIOS_PLUGINS_VERSION.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v nagios-plugins-$NAGIOS_PLUGINS_VERSION nagios-plugins 
cd $INSTALL_SRC_DIR/nagios-plugins
# Compile
./configure --prefix=$PREFIX --with-cgiurl=$WWW_CGI_DIR/icinga \
--with-nagios-user=$ICINGA_USER --with-nagios-group=$ICINGA_CMD_GROUP
make_install_jambulatv
}

icinga1_configure () {
# Copy icinga main config file - icinga.cfg 
cp -v $PROJECT_CONFIGS_DIR/icinga/icinga.cfg $CONFDIR/icinga/
# Copy icinga objects for monitoring
cp -v $PROJECT_CONFIGS_DIR/icinga/objects/* $CONFDIR/icinga/conf.d/
#
# Allow icinga user to use 'sudo' ie: events_handler commands
echo "Defaults:$ICINGA_USER    !requiretty
$ICINGA_USER             ALL = (ALL) NOPASSWD: ALL" > $SUDOERS_DIR/$ICINGA_USER
# Change sudoer permissions
chmod 0440 $SUDOERS_DIR/$ICINGA_USER
#
# Add nginx web server config file
cp -v $PROJECT_CONFIGS_DIR/webserver/icinga.conf $NGINX_CONFD_DIR/
# Restart nginx
systemctl restart nginx.service
# Enable icinga to start at boot time
systemctl enable icinga.service
# Start icinga
systemctl start icinga.service
# Create account for logging into classic web interface
htpasswd -b -c $CONFDIR/icinga/htpasswd.users icingaadmin $ICINGA_ADMIN_PASS
}

icinga2_install () {
# Get WWW User and Group
set_www_user_group
#
# Archive and Unpack specified icinga2 Tag
# ----------------------------------------
# Change to Github sources
cd $PROJECT_GITHUB_DIR/icinga2
# Get latest icinga2 tag
ICINGA2_TAG=$(git tag -l | sort -u | tail -1)
# Unpack desired git branch/tag
case $ICINGA2_TAG in
master)
# master branch i.e. HEAD
git archive --format tar.gz --prefix=icinga2/ HEAD | (cd $INSTALL_SRC_DIR/ && tar zxvf -)
;;
*)
# Check to see if desired branch/tag exists
git tag -l | grep -x $ICINGA2_TAG > /dev/null 2>&1
TAG_EXISTS=$?
if [ "$TAG_EXISTS" = "0" ];
then
git archive --format tar.gz --prefix=icinga2/ $ICINGA2_TAG | (cd $INSTALL_SRC_DIR/ && tar zxvf -)
else
git archive --format tar.gz --prefix=icinga2/ HEAD | (cd $INSTALL_SRC_DIR/ && tar zxvf -)
# Display Kodi's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
ICINGA2 Version
============
% The Kodi branch you specified, does not exist, so I used master/ HEAD instead

#
EOF
fi
;;
esac
#
cd $INSTALL_SRC_DIR/icinga2
# Build
mkdir $INSTALL_SRC_DIR/icinga2/build
cd $INSTALL_SRC_DIR/icinga2/build
# Log to build file
cmake_build_log
# cMake
cmake ../ -DCMAKE_INSTALL_PREFIX=$PREFIX -DCMAKE_INSTALL_SYSCONFDIR=$CONFDIR -DCMAKE_INSTALL_LOCALSTATEDIR=$STATEDIR -DICINGA2_USER=$ICINGA_USER -DICINGA2_GROUP=$ICINGA_GROUP -DICINGA2_GIT_VERSION_INFO=OFF -DICINGA2_COMMAND_GROUP=$ICINGA_CMD_GROUP -DICINGA2_PLUGINDIR=$MONITORING_PLUGINS_DIR -DICINGA2_RUNDIR=$RUNDIR -DICINGA2_SYSCONFIGFILE=$SYSCONFIG_DIR/icinga2 -DICINGA2_WITH_MYSQL=ON -DICINGA2_WITH_PGSQL=OFF -DICINGA2_WITH_TESTS=OFF -DUSE_SYSTEMD=ON -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_VERBOSE_MAKEFILE=ON -DBUILD_TESTING=FALSE
make_install_jambulatv
#
# BUG?
# Move /usr/etc/icinga2 /etc/icinga2
rsync -avz $PREFIX/etc/icinga2/ $ICINGA2_CONFIG_DIR/
rm -rf $PREFIX/etc/icinga2
# Move logrotate
rsync -avz $PREFIX/etc/logrotate.d/ $LOGROTATE_CONF_DIR/
rm -rf $PREFIX/etc/logrotate.d
#
# Create icinga group
groupadd $ICINGA_CMD_GROUP
# Create icinga user 
useradd -c "Icinga User" -d $SPOOLDIR/$ICINGA_USER -s /sbin/nologin -G $ICINGA_CMD_GROUP $ICINGA_USER
# Add www user to icinga_cmd group
usermod -a -G $ICINGA_CMD_GROUP $WWW_USER
# Add icinga to systemd-journal group so they can query using journalctl
usermod -a -G systemd-journal $ICINGA_USER
# Add icinga to hostapd access control group
usermod -a -G $HOSTAPD_GROUP $ICINGA_USER
}

monitoring_plugins_install () {
# Unpack 
tar zxvf $PROJECT_TARBALLS_DIR/monitoring-plugins-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v monitoring-plugins-* monitoring-plugins 
cd $INSTALL_SRC_DIR/monitoring-plugins
# Compile
./configure --prefix=$PREFIX --libdir=$LIBDIR --libexecdir=$MONITORING_PLUGINS_DIR \
	--with-cgiurl=$WWW_CGI_DIR/icinga --with-fping-command=$FPING_CMD \
	--with-nagios-user=$ICINGA_USER --with-nagios-group=$ICINGA_CMD_GROUP
make_install_jambulatv
}

check_logfiles_install () {
# unpack
rsync -avz $PROJECT_GITHUB_DIR/check_logfiles/ $INSTALL_SRC_DIR/check_logfiles/
cd $INSTALL_SRC_DIR/check_logfiles 
# autoconf
aclocal && autoconf && automake -a
# configure
./configure --prefix=$MONITORING_PLUGINS_DIR --libexecdir=$MONITORING_PLUGINS_DIR --with-nagios-user=$ICINGA_USER --with-nagios-group=$ICINGA_CMD_GROUP --with-seekfiles-dir=$TMPDIR/icinga2
make_install_jambulatv
}

icinga2_ido_mysql () {
# Enable and start mysql service if it is not running
systemctl -q is-active mysqld.service || systemctl enable mysqld.service
systemctl -q is-active mysqld.service || systemctl start mysqld.service
# Change MySQL password if default is empty
mysqladmin password $MYSQL_ROOT_PASSWORD > /dev/null 2>&1 || clear && echo "Default MySQL password was already changed! Proceeding ..." && sleep 5
# Create icinga database
mysqladmin -p$MYSQL_ROOT_PASSWORD create $ICINGA_DB_NAME
# Set privileges on icinga database
echo "GRANT ALL PRIVILEGES ON $ICINGA_DB_NAME.* to '$ICINGA_DB_USER'@'localhost' IDENTIFIED by '$ICINGA_DB_PASS';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
# Populate icinga database tables using ido MySQL schema
mysql -u $ICINGA_DB_USER -p$ICINGA_DB_PASS $ICINGA_DB_NAME < $DATAROOTDIR/icinga2-ido-mysql/schema/mysql.sql
#
# Add MySQL DB login credentials to ido-mysql.conf
cat > $ICINGA2_FEATURES_AVAIL_DIR/ido-mysql.conf << EOF
/**
 * Jambula - db_ido_mysql 
 * Library which implements IDO functionality for MySQL
 */

library "db_ido_mysql"

object IdoMysqlConnection "ido-mysql" {
  user = "$ICINGA_DB_USER"
  password = "$ICINGA_DB_PASS"
  host = "localhost"
  database = "$ICINGA_DB_NAME"
}
EOF
#
# Enable icinga2 ido-mysql
icinga2 feature enable ido-mysql
}

icinga2_configure () {
# Enable command ido-mysql livestatus compatlog
icinga2 feature enable command livestatus compatlog
# Create custom config dirctory
[ -d $ICINGA2_CUSTOM_CONFIG_DIR ] || mkdir $ICINGA2_CUSTOM_CONFIG_DIR
# Copy Icinga objects files
cp -v $PROJECT_CONFIGS_DIR/icinga2/conf.d/*.conf $ICINGA2_CUSTOM_CONFIG_DIR/
# Copy Icinga scripts files
cp -v $PROJECT_CONFIGS_DIR/icinga2/scripts/* $ICINGA2_SCRIPTS_DIR/
# Copy contributed plugins - See https://github.com/zikusooka/icinga-nagios-plugins 
rsync -av $PROJECT_CONTRIB_DIR/icinga2/plugins/ $MONITORING_PLUGINS_DIR/
#
# Change Wirfeless Interface(s) in check_wifi_ap plugin
sed -i "s:MY_WIFI_STATION_INTERFACE:$WIFI_STATION_INTERFACE:g" \
	$MONITORING_PLUGINS_DIR/check_wifi_ap
#
# Remove generic icinga2 conf files
for ICINGA_FILE in hosts.conf;
do
rm -f $ICINGA2_CONFIG_DIR/conf.d/$ICINGA_FILE
done
# Give icinga user permission to access icinga2 directories
# /etc/icinga2
chown -R $ICINGA_USER:$ICINGA_GROUP $ICINGA2_CONFIG_DIR
# /var/lib/icinga2
chown -R $ICINGA_USER:$ICINGA_GROUP $STATEDIR/lib/icinga2
# /usr/lib/icinga2
chown -R $ICINGA_USER:$ICINGA_GROUP $LIBDIR/icinga2
# $DATAROOTDIR/icinga2
chown -R $ICINGA_USER:$ICINGA_GROUP $DATAROOTDIR/icinga2
# /var/log/icinga2
chown -R $ICINGA_USER:$ICINGA_GROUP $STATEDIR/log/icinga2
# /var/cache/icinga2
chown -R $ICINGA_USER:$ICINGA_GROUP $STATEDIR/cache/icinga2
# Copy icinga2 systemd file 
cp -v $PROJECT_INIT_SCRIPTS_DIR/icinga2.service $SYSTEMD_UNITS_DIR_USER/
systemctl enable icinga2.service
systemctl start icinga2.service
# Allow icinga user to use 'sudo' ie: events_handler commands
# IMPORTANT: Refine what icinga can execute !!!
echo "Defaults:$ICINGA_USER    !requiretty
$ICINGA_USER             ALL = (ALL) NOPASSWD: ALL" > $SUDOERS_DIR/$ICINGA_USER
# Change sudoer permissions
chmod 0440 $SUDOERS_DIR/$ICINGA_USER
# Check config
icinga2 daemon -C || \
# Notify of icinga2 check error in final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
Icinga2
=======
% Error: There is a problem with your icinga2 configuration.  Please check files at:

  $ICINGA2_CONFIG_DIR
#
EOF
}

icingaweb2_install () {
# Get WWW User and Group
set_www_user_group
#
# Archive and unpack specified icingaweb2 Tag
# -------------------------------------------
# Change to Github sources
cd $PROJECT_GITHUB_DIR/icingaweb2
# Get latest icinga2 tag
ICINGAWEB2_TAG=$(git tag -l | sort -u | tail -1)
#
# Unpack desired git branch/tag
case $ICINGAWEB2_TAG in
master)
# master branch i.e. HEAD
git archive --format tar.gz --prefix=icingaweb2/ HEAD | (cd $WWW_HTML_DIR/ && tar zxvf -)
;;
*)
# Check to see if desired branch/tag exists
git tag -l | grep -x $ICINGAWEB2_TAG > /dev/null 2>&1
TAG_EXISTS=$?
if [ "$TAG_EXISTS" = "0" ];
then
git archive --format tar.gz --prefix=icingaweb2/ $ICINGAWEB2_TAG | (cd $WWW_HTML_DIR/ && tar zxvf -)
else
git archive --format tar.gz --prefix=icingaweb2/ HEAD | (cd $WWW_HTML_DIR/ && tar zxvf -)
# Display icinga2's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
Icingaweb2 Version
===================
% The icingaweb2 branch you specified, does not exist, so I used master/ HEAD instead

#
EOF
fi
;;
esac
#
# Add icingaweb2 group
groupadd -r $ICINGA2_WEB_GROUP
# Make web user a member of the system group "icingaweb2" group
usermod -a -G $ICINGA2_WEB_GROUP $WWW_USER
# Add icinga wwww user to icingacmd group
usermod -a -G $ICINGA_CMD_GROUP $WWW_USER
# Change permissions to WWW user
chown -R $WWW_USER:$ICINGA2_WEB_GROUP $WWW_HTML_DIR/icingaweb2
# Setup config directory
$WWW_HTML_DIR/icingaweb2/bin/icingacli setup config directory --group $ICINGA2_WEB_GROUP --config $PROJECT_SYSTEM_CONF_DIR/icingaweb2
# Copy icingaweb2 nginx config file or run the command:
# '$WWW_HTML_DIR/icingaweb2/bin/icingacli setup config webserver nginx --document-root $WWW_HTML_DIR/icingaweb2/public > $NGINX_CONF_DIR/sites-enabled/icingaweb2'
[ -e $NGINX_CONF_DIR/sites-enabled/icingaweb2 ] || cp -v $PROJECT_CONFIGS_DIR/nginx/sites-enabled/icingaweb2 $NGINX_CONF_DIR/sites-enabled/
# Restart nginx
systemctl restart nginx.service

# Add DB schema for icingaweb2
#mysql -u $ICINGA_DB_USER -p$ICINGA_DB_PASS $ICINGA_DB_NAME < $WWW_HTML_DIR/icingaweb2/etc/schema/mysql.schema.sql 

# Database 4 icingaweb2
# ---------------------
# Enable and start mysql service if it is not running
systemctl -q is-active mysqld.service || systemctl enable mysqld.service
systemctl -q is-active mysqld.service || systemctl start mysqld.service
# Change MySQL password if default is empty
mysqladmin password $MYSQL_ROOT_PASSWORD > /dev/null 2>&1 || clear && echo "Default MySQL password was already changed! Proceeding ..." && sleep 5
# Create icinga database
mysqladmin -p$MYSQL_ROOT_PASSWORD create $ICINGAWEB2_DB_NAME
# Set privileges on icinga database
echo "GRANT ALL PRIVILEGES ON $ICINGAWEB2_DB_NAME.* to '$ICINGAWEB2_DB_USER'@'localhost' IDENTIFIED by '$ICINGAWEB2_DB_PASS';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
# Add DB schema for icingaweb2
mysql -u $ICINGAWEB2_DB_USER -p$ICINGAWEB2_DB_PASS $ICINGAWEB2_DB_NAME < $WWW_HTML_DIR/icingaweb2/etc/schema/mysql.schema.sql 
}

icingaweb2_configure () {
# Get WWW User and Group
set_www_user_group
#
# Generate setup token
$WWW_HTML_DIR/icingaweb2/bin/icingacli setup token create --config $PROJECT_SYSTEM_CONF_DIR/icingaweb2 > $ICINGA2_WEB_TOKEN_FILE
#
# Authentication file
cat > $ICINGA2_WEB_AUTH_FILE <<EOF
[icingaweb2]
backend             = "db"
resource            = "icingaweb_db"
EOF
# Config file
cat > $ICINGA2_WEB_CONF_FILE <<EOF
[global]
show_stacktraces = "1"
config_backend = "db"
config_resource = "icingaweb_db"

[logging]
log = "syslog"
level = "ERROR"
application = "icingaweb2"
EOF
# Resources file
cat > $ICINGA2_WEB_RESOURCES_FILE << EOF
[icingaweb_db]
type                = "db"
db                  = "mysql"
host                = "localhost"
port                = "3306"
dbname = "$ICINGAWEB2_DB_NAME"
username = "$ICINGAWEB2_DB_USER"
password = "$ICINGAWEB2_DB_PASS"
charset = ""
persistent = "0"

[icinga_ido]
type                = "db"
db                  = "mysql"
host                = "localhost"
port                = "3306"
dbname              = "$ICINGA_DB_NAME"
username            = "$ICINGA_DB_USER"
password            = "$ICINGA_DB_PASS"
charset = ""
persistent = "0"
EOF
#
# Roles file
cat > $ICINGA2_WEB_ROLES_FILE <<EOF
[Administrators]
users               = "$ICINGA_DB_USER"
permissions         = "*"
groups = "Administrators"
EOF
#
# Groups file
cat > $ICINGA2_WEB_GROUPS_FILE <<EOF
[icingaweb2]
backend = "db"
resource = "icingaweb_db"
EOF
#
# Create modules directories if they do not exist
for MOD in monitoring
do
[ -d $ICINGA2_WEB_CONFIG_DIR/modules/$MOD ] || \
	mkdir -p $ICINGA2_WEB_CONFIG_DIR/modules/$MOD
done
#
# Configure monitoring module
# ----------------------------
# backends.ini
cat > $ICINGA2_WEB_CONFIG_DIR/modules/monitoring/backends.ini <<EOF
[icinga]
type                = "ido"
resource            = "icinga_ido"
EOF
# config.ini
cat > $ICINGA2_WEB_CONFIG_DIR/modules/monitoring/config.ini <<EOF
[security]
protected_customvars = "*pw*,*pass*,community"
EOF
# instances.ini
cat > $ICINGA2_WEB_CONFIG_DIR/modules/monitoring/commandtransports.ini <<EOF
[icinga2]
transport           = "local"
path                = "$RUNDIR/icinga2/cmd/icinga2.cmd"
EOF
#
# Create enabledModules directory if it does not exist
[ -d $ICINGA2_WEB_CONFIG_DIR/enabledModules ] || \
	mkdir -p $ICINGA2_WEB_CONFIG_DIR/enabledModules
# Link to monitoring under enabledModules directory if it does not exist
[ -e $ICINGA2_WEB_CONFIG_DIR/enabledModules/monitoring ] || ln -s $WWW_HTML_DIR/icingaweb2/modules/monitoring $ICINGA2_WEB_CONFIG_DIR/enabledModules/monitoring
# Documentation
# Link to doc under enabledModules directory if it does not exist
[ -e $ICINGA2_WEB_CONFIG_DIR/enabledModules/doc ] || \
	ln -s $WWW_HTML_DIR/icingaweb2/modules/doc \
	$ICINGA2_WEB_CONFIG_DIR/enabledModules/doc
# Make symlinks to modules accessible
chmod -R 777 $ICINGA2_WEB_CONFIG_DIR/enabledModules
# Change ownership of icingaweb2 config directory
chown -R $WWW_USER:$ICINGA2_WEB_GROUP $ICINGA2_WEB_CONFIG_DIR
#
# Modules
# Add Icinga2 documentation
[ -d $WWW_HTML_DIR/icingaweb2/modules/icinga2 ] || mkdir $WWW_HTML_DIR/icingaweb2/modules/icinga2
rsync -av $PROJECT_GITHUB_DIR/icinga2/doc/ $WWW_HTML_DIR/icingaweb2/modules/icinga2/doc/
# Change directory owner/group to allow web user
chown -R $WWW_USER:$ICINGA2_WEB_GROUP $WWW_HTML_DIR/icingaweb2/modules/icinga2

# Create Icingaweb2 Admin User in MySQL database
echo "INSERT INTO icingaweb_user (name, active, password_hash, ctime) VALUES ('$ICINGAWEB2_ADMIN_USER', '1', '$ICINGAWEB2_ADMIN_PASS_HASH', NOW());" | mysql -u $ICINGAWEB2_DB_USER -p$ICINGAWEB2_DB_PASS $ICINGAWEB2_DB_NAME
# Create Icingaweb2 Admin Group in MySQL database
echo "INSERT INTO icingaweb_group VALUES (1,'Administrators', NULL, NOW(), NULL);" | mysql -u $ICINGAWEB2_DB_USER -p$ICINGAWEB2_DB_PASS $ICINGAWEB2_DB_NAME
# Add Icingaweb2 User to Admin Group in MySQL database
echo "INSERT INTO icingaweb_group_membership (group_id, username, ctime) VALUES ('1', '$ICINGAWEB2_ADMIN_USER', NOW());" | mysql -u $ICINGAWEB2_DB_USER -p$ICINGAWEB2_DB_PASS $ICINGAWEB2_DB_NAME
#
# Display IcingaWeb's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
IcingaWeb2
==========
% I have automagically setup icingaweb2 for you. To access, open the URL below:
  http://$PROJECT_NAME:$(grep -i 'icingaweb2$' $PORTS_ASSIGNED_FILE | awk {'print $1'})

username            = "$ICINGAWEB2_ADMIN_USER"
password            = "$ICINGAWEB2_ADMIN_PASS"

NOTE: In case you need to do setup manually,
$(cat $ICINGA2_WEB_TOKEN_FILE)
#

Experts Only
============
% If you want to use icinga2 hosts for user presence detection (experimental), set the following
  variable in the tool: jambulatv-initial-setup

  SETUP_ICINGA2_PRESENCE_HOSTS=yes

EOF
# Restart nginx
systemctl restart nginx.service
}

icinga2_ui_configure () {
# Add nginx web server config file
cp -v $PROJECT_CONFIGS_DIR/webserver/icinga.conf $NGINX_CONFD_DIR/
# Restart nginx
systemctl restart nginx.service
# Create account for logging into classic web interface
htpasswd -b -c $CONFDIR/icinga/htpasswd.users icingaadmin $ICINGA_ADMIN_PASS
}

netdata_install () {
# Copy sources to install directory
rsync -avz --delete-after $PROJECT_GITHUB_DIR/netdata/ $INSTALL_SRC_DIR/netdata/
# Install
cd $INSTALL_SRC_DIR/netdata && \
./netdata-installer.sh --dont-start-it --dont-wait
}

netdata_configure () {
# Add Jambula customized config file
cat $PROJECT_CONFIGS_DIR/netdata.conf.template | \
	sed "s:NETDATA_PORT:$NETDATA_PORT:g" | \
	sed "s:NETDATA_HOSTNAME:$PROJECT_NAME:g" \
	> $CONFDIR/netdata/netdata.conf
# Copy systemd start file
cat $INSTALL_SRC_DIR/netdata/system/netdata.service | \
	sed -e "s:KillMode=mixed:#KillMode=mixed:g" \
		> $SYSTEMD_UNITS_DIR_USER/netdata.service
# Enable and start netdata systemd service
systemctl enable netdata.service
systemctl start netdata.service
#
# Display Netdata's post install/configuration information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
Netdata
========
% To access netdata, open the URL below:
  http://$NETWORK_IP_ADDRESS:$NETDATA_PORT

#
EOF
}

gdata_install () {
get_python_version
#Remove gdata rpm
[ rpm -q python-gdata > /dev/null 2>&1 ] && rpm -e --nodeps  python-gdata
# Copy sources depending on python version
# Python 2
[[ "$PYTHON_MAJOR_VERSION_NUMBER" = "2" ]] && \
rsync -avz --delete-after $PROJECT_GITHUB_DIR/gdata-python2/ $INSTALL_SRC_DIR/gdata-python/
# Python 3
[[ "$PYTHON_MAJOR_VERSION_NUMBER" = "3" ]] && \
rsync -avz --delete-after $PROJECT_GITHUB_DIR/gdata-python3/ $INSTALL_SRC_DIR/gdata-python/
#
cd $INSTALL_SRC_DIR/gdata-python
python setup.py install
}

google_sms_setup () {
# Copy to binary path
cp -v $PROJECT_GITHUB_DIR/google-sms/google-sms.py $BINARY_PREFIX/
# Make it executable
chmod 755 $BINARY_PREFIX/google-sms.py
}

vncserver_configure () {
# Create vnc home folder
[ -d $AUTOLOGIN_USER_HOME_DIR/.vnc ] || mkdir -p $AUTOLOGIN_USER_HOME_DIR/.vnc
# Change permissions to owner
chown -R $AUTOLOGIN_USER:$AUTOLOGIN_USER $AUTOLOGIN_USER_HOME_DIR/.vnc
# Create VNC Password file
echo "$VNC_PASSWORD" | vncpasswd -f > $AUTOLOGIN_USER_HOME_DIR/.vnc/passwd

# Create VNC X startup file
cat > $AUTOLOGIN_USER_HOME_DIR/.vnc/xstartup << EOF
#!/bin/sh
if [ -e $BINARY_PREFIX/startlxde ];
then
# Start LXDE
$BINARY_PREFIX/startlxde
else
# Start other DM
[ ! -e /etc/X11/xinit/xinitrc ] || /etc/X11/xinit/xinitrc
[ -r \$HOME/.Xresources ] && xrdb \$HOME/.Xresources
xsetroot -solid grey
xterm -geometry 80x24+10+10 -ls -title "\$VNCDESKTOP Desktop" &
twm &
fi
EOF
# Make xstartup file executable - otherwise display will not show!!!
chmod 755 $AUTOLOGIN_USER_HOME_DIR/.vnc/xstartup
#
# Copy vncserver@.service file
cp -v $PROJECT_INIT_SCRIPTS_DIR/vncserver@.service $SYSTEMD_UNITS_DIR_USER/vncserver@:$VNC_DISPLAY.service
# Enable and start vncserver systemd service - CPU Usage is HIGH!!!
#systemctl enable vncserver@:$VNC_DISPLAY.service
#systemctl start vncserver@:$VNC_DISPLAY.service
#
# Display VNC Access usage information, and output to final notice
echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#
VNC Access
==========
% To connect to this box using VNC from any vnc-aware client:

  # vncviewer $NETWORK_IP_ADDRESS:$VNC_DISPLAY
  # password = $VNC_PASSWORD

EOF
}

desktop_configure () {
# Create LXDE config directory
[ -d $AUTOLOGIN_USER_HOME_DIR/.config/lxpanel/LXDE ] || \
	mkdir -p $AUTOLOGIN_USER_HOME_DIR/.config/lxpanel/LXDE
# Copy customized LXDE panels and config
rsync -avz $PROJECT_CONFIGS_DIR/LXDE/ $AUTOLOGIN_USER_HOME_DIR/.config/lxpanel/LXDE
# Change permissions on ../lxpanel/LXDE
chown -R $AUTOLOGIN_USER:$AUTOLOGIN_USER $AUTOLOGIN_USER_HOME_DIR/.config/lxpanel
# Remove lingering lxpanel cache
[ -d $AUTOLOGIN_USER_HOME_DIR/.cache/menus ] && find $AUTOLOGIN_USER_HOME_DIR/.cache/menus -name '*' -type f -print0 | xargs -0 rm
#
# Add desktop entry for JambulaTV
cat > $DATAROOTDIR/applications/JambulaTV.desktop << EOF
[Desktop Entry]
Version=1.0
Name=JambulaTV
GenericName=JambulaTV
Comment=Return back to JambulaTV
Exec=$BINARY_PREFIX/jambulatv-computer-mode off
Icon=$PROJECT_SYSTEM_SHARE_DIR/images/jambulatv-stream.png
Terminal=true
Type=Application
Encoding=UTF-8
Categories=AudioVideo;Player;Recorder;Video;TV;
MimeType=x-scheme-handler/jambulatv;
X-KDE-Protocols=jambulatv
StartupNotify=true
Keywords=JambulaTV;TV;Multimedia;
X-Desktop-File-Install-Version=0.21
X-KeepTerminal=true
EOF
# Create Desktop Directory
[ -d $AUTOLOGIN_USER_HOME_DIR/Desktop ] || mkdir -p $AUTOLOGIN_USER_HOME_DIR/Desktop
# Copy to Desktop directory
cp -v $DATAROOTDIR/applications/JambulaTV.desktop $AUTOLOGIN_USER_HOME_DIR/Desktop/
# Change permissions
chown -R $AUTOLOGIN_USER:$AUTOLOGIN_USER $AUTOLOGIN_USER_HOME_DIR/Desktop
# Copy jambulatv-computer-mode script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-computer-mode ] || cp -v $PROJECT_BIN_DIR/jambulatv-computer-mode $BINARY_PREFIX/
}

firefox_install () {
# Unpack firefox tarball with correct architecture
case $PROJECT_SYSTEM_ARCH in
x86_64)
tar jxvf $PROJECT_TARBALLS_DIR/firefox/x86_64/firefox-*.tar.bz2 -C $INSTALL_SRC_DIR
;;
i686)
tar jxvf $PROJECT_TARBALLS_DIR/firefox/i686/firefox-*.tar.bz2 -C $INSTALL_SRC_DIR
;;
*)
echo "Unknown platform.  Not installing firefox"
;;
esac
#
# Create link
ln -s $INSTALL_SRC_DIR/firefox/firefox-bin $BINARY_PREFIX/firefox
# Add desktop entry
cat > $DATAROOTDIR/applications/firefox.desktop << EOF
[Desktop Entry]
Version=1.0
Name=Firefox
GenericName=Web Browser
Comment=Browse the Web
Exec=firefox %u
Icon=$INSTALL_SRC_DIR/firefox/browser/chrome/icons/default/default48.png
Terminal=false
Type=Application
MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;x-scheme-handler/http;x-scheme-handler/https;
StartupNotify=true
Categories=Network;WebBrowser;
Keywords=web;browser;internet;
X-Desktop-File-Install-Version=0.21
EOF
}

libreoffice_install () {
# Install LibreOffice
rpm -Uvh $PROJECT_RPMS_DIR/LibreOffice_*_Linux_x86-64_rpm/RPMS/*.rpm
# Add .desktop files
cp -v /opt/libreoffice*/share/xdg/*.desktop $DATAROOTDIR/applications
}

minisapserver_install () {
tar xvf $PROJECT_TARBALLS_DIR/minisapserver-$MINISAPSERVER_VERSION.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v minisapserver-* minisapserver
# Compile
cd $INSTALL_SRC_DIR/minisapserver && ./configure --prefix=$PREFIX \
--libdir=$LIBDIR --sysconfdir=$PROJECT_SYSTEM_CONF_DIR/minisapserver --localstatedir=$STATEDIR
make_install_jambulatv
}

gnokii_install () {
# Unpack
tar jxvf $PROJECT_TARBALLS_DIR/gnokii-*.tar.bz2 -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v gnokii-* gnokii
# Compile all
cd $INSTALL_SRC_DIR/gnokii
./configure --prefix=$PREFIX --libdir=$LIBDIR
make_install_jambulatv
# Cache recently shared libraries 
ldconfig
}

gammu_install () {
# Unpack
tar xvf $PROJECT_TARBALLS_DIR/gammu-*.tar.xz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v gammu-* gammu
# Compile all
cd $INSTALL_SRC_DIR/gammu
./configure --prefix=$PREFIX --enable-backup
make_install_jambulatv
}

sphinxbase_install () {
# unpack
rsync -avz $PROJECT_GITHUB_DIR/sphinxbase/ $INSTALL_SRC_DIR/sphinxbase/
# configure
cd $INSTALL_SRC_DIR/sphinxbase 
./autogen.sh
./configure --prefix=$PREFIX --libdir=$LIBDIR --sysconfdir=$CONFDIR \
--localstatedir=$STATEDIR
make_install_jambulatv
}

pocketsphinx_install () {
# Install pocketsphinx server
# unpack
rsync -avz $PROJECT_GITHUB_DIR/pocketsphinx/ $INSTALL_SRC_DIR/pocketsphinx/
# configure
cd $INSTALL_SRC_DIR/pocketsphinx 
./autogen.sh
./configure --prefix=$PREFIX --libdir=$LIBDIR --sysconfdir=$CONFDIR \
--localstatedir=$STATEDIR
make_install_jambulatv
}

pocketsphinx_configure () {
# Copy over pocketsphinx language dictionaries, models, etc 
rsync -av $PROJECT_CONTRIB_DIR/speech_tts_asr/pocketsphinx/ $POCKETSPHINX_DATA_DIR/

# Copy jambulatv-speech2text script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-speech2text ] || \
	cat $PROJECT_BIN_DIR/jambulatv-speech2text | \
		sed -e "s:MY_PREFIX:$PREFIX:g" | \
		sed -e "s:MY_TMPDIR:$TMPDIR:g" | \
		sed -e "s:MY_POCKETSPHINX_DATA_DIR:$POCKETSPHINX_DATA_DIR:g" | \
		sed -e "s:MY_JAMBULATV_LOG_DIR:$PROJECT_SYSTEM_LOG_DIR:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_NAME:$JAMBULATV_SETUP_DB_NAME:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_TABLE:$JAMBULATV_SETUP_DB_TABLE:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_USER:$JAMBULATV_SETUP_DB_USER:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_PASS:$JAMBULATV_SETUP_DB_PASS:g" \
			> $BINARY_PREFIX/jambulatv-speech2text
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-speech2text

# Copy jambulatv-asr-skills script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-asr-skills ] || \
	cat $PROJECT_BIN_DIR/jambulatv-asr-skills | \
		sed -e "s:MY_TMPDIR:$TMPDIR:g" | \
		sed -e "s:MY_USER_MUSIC_DIR:$USER_MUSIC_DIR:g" | \
		sed -e "s:MY_USER_PICTURES_DIR:$USER_PICTURES_DIR:g" | \
		sed -e "s:MY_USER_TV_SHOWS_DIR:$USER_TV_SHOWS_DIR:g" \
			> $BINARY_PREFIX/jambulatv-asr-skills
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-asr-skills

# Copy jambulatv-fetch-news helper tool for headlines ASR skill
[ -e $BINARY_PREFIX/jambulatv-fetch-news ] || \
	cat $PROJECT_BIN_DIR/jambulatv-fetch-news | \
		sed -e "s:MY_TMPDIR:$TMPDIR:g" | \
		sed -e "s:MY_PROJECT_SYSTEM_CONF_DIR:$PROJECT_SYSTEM_CONF_DIR:g" | \
		sed -e "s:MY_BINARY_PREFIX:$BINARY_PREFIX:g" \
			> $BINARY_PREFIX/jambulatv-fetch-news
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-fetch-news
#
# Add sample RSS file for news headlines
cat > $PROJECT_SYSTEM_CONF_DIR/rss-feeds.cfg << EOF
World Political | http://feeds.bbci.co.uk/news/world/rss.xml
World Business | http://feeds.bbci.co.uk/news/business/rss.xml
World Technology | http://feeds.bbci.co.uk/news/technology/rss.xml
World Sports | http://feeds.bbci.co.uk/sport/rss.xml
EOF

# Copy jambulatv-speech-recognition.service systemd file 
cp -v $PROJECT_INIT_SCRIPTS_DIR/jambulatv-speech-recognition.service $SYSTEMD_UNITS_DIR_USER/
# Enable jambulatv-speech-recognition.service if needed
systemctl enable jambulatv-speech-recognition.service
}

SpeechRecognition_install () {
get_python_version
# PyAudio - Needed for Mic
tar zxvf $PROJECT_TARBALLS_DIR/PyAudio-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v PyAudio-* PyAudio
# Compile
cd $INSTALL_SRC_DIR/PyAudio 
python setup.py install --install-lib=$PYTHON_SITEDIR
# Speech Recognition
tar zxvf $PROJECT_TARBALLS_DIR/SpeechRecognition-*.tar.gz -C $INSTALL_SRC_DIR
cd $INSTALL_SRC_DIR && mv -v SpeechRecognition-* SpeechRecognition
# Compile
cd $INSTALL_SRC_DIR/SpeechRecognition 
python setup.py install --install-lib=$PYTHON_SITEDIR
}

remind_configure () {
# Create reminder directory
[ -d $REMINDERS_DIRECTORY ] || mkdir -p $REMINDERS_DIRECTORY
# Add sample remind files
rsync -av $PROJECT_CONTRIB_DIR/remind/ $REMINDERS_DIRECTORY/
# Give multimedia user permissions to reminder directory
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $REMINDERS_DIRECTORY
# Copy jambulatv-remind script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-remind ] || cp -v $PROJECT_BIN_DIR/jambulatv-remind $BINARY_PREFIX/
# Copy reminder .timer and .service files
cp -v $PROJECT_INIT_SCRIPTS_DIR/reminders.{timer,service} $SYSTEMD_UNITS_DIR_USER/
# Enable reminders.timer which will start the service automagically
systemctl enable reminders.timer
}

# -----------------------------------------------------
# Virtual WiFi Dual Interfaces Support i.e. Connectify
# -----------------------------------------------------
virtual_wifi_interfaces_configure () {
# Import WiFi variables
get_wireless_interface_parameters
# Copy jambulatv-connectify script and add appropraite device parameters
cat $PROJECT_BIN_DIR/jambulatv-connectify | \
		sed -e "s:MY_WIFI_AP_INTERFACE:$WIFI_AP_INTERFACE:g" | \
		sed -e "s:MY_WIFI_STATION_INTERFACE:$WIFI_STATION_INTERFACE:g" | \
		sed -e "s/MY_WIFI_AP_MACADDRESS/$WIFI_AP_MACADDRESS/g" | \
		sed -e "s/MY_WIFI_STATION_MACADDRESS/$WIFI_STATION_MACADDRESS/g" \
			> $BINARY_PREFIX/jambulatv-connectify
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-connectify
# Copy connectify systemd file, and modify some variables
# Note: This is a static service needed by hostapd/coova-chilli
cat $PROJECT_INIT_SCRIPTS_DIR/connectify.service | \
		sed -e "s:MY_WIFI_OLD_INTERFACE:$WIFI_AP_BIOSDEV_NAME:g" \
			> $SYSTEMD_UNITS_DIR_USER/connectify.service
}

# Connectify Support: Configure dual virtual interfaces using one single wifi 
connectify_configure () {
[ "$VIRT_WIFI_SUPPORT" = "0" ] && virtual_wifi_interfaces_configure
}

cockpit_install () {
# unpack
rsync -avz $PROJECT_GITHUB_DIR/cockpit/ $INSTALL_SRC_DIR/cockpit/
# configure
cd $INSTALL_SRC_DIR/cockpit 
./autogen.sh
./configure --prefix=$PREFIX --libdir=$LIBDIR --sysconfdir=$CONFDIR \
--localstatedir=$STATEDIR
make_install_jambulatv
}

bonjour_configure () {
# Create avahi-daemon config file
cat > $CONFDIR/avahi/avahi-daemon.conf << EOF
[server]
#host-name=$PROJECT_NAME
#domain-name=local
browse-domains=$PROJECT_DOMAINS
use-ipv4=yes
use-ipv6=no
#allow-interfaces=
deny-interfaces=$WIFI_STATION_INTERFACE
#check-response-ttl=no
#use-iff-running=no
#enable-dbus=yes
disallow-other-stacks=yes
allow-point-to-point=yes
#cache-entries-max=4096
#clients-max=4096
#objects-per-client-max=1024
#entries-per-entry-group-max=32
ratelimit-interval-usec=1000000
ratelimit-burst=1000

[wide-area]
enable-wide-area=yes

[publish]
#disable-publishing=no
#disable-user-service-publishing=no
#add-service-cookie=no
#publish-addresses=yes
#publish-hinfo=yes
#publish-workstation=yes
#publish-domain=yes
#publish-dns-servers=192.168.50.1, 192.168.50.2
#publish-resolv-conf-dns-servers=yes
#publish-aaaa-on-ipv4=yes
#publish-a-on-ipv6=no

[reflector]
enable-reflector=yes
reflect-ipv=no

[rlimits]
#rlimit-as=
rlimit-core=0
rlimit-data=4194304
rlimit-fsize=0
rlimit-nofile=768
rlimit-stack=4194304
rlimit-nproc=3
EOF
# Copy avahi-daemon unit service  file
cp -v $PROJECT_INIT_SCRIPTS_DIR/avahi-daemon.service $SYSTEMD_UNITS_DIR_SYSTEM/
# Reload services daemon
systemctl --system daemon-reload
# Restart avahi daemon
systemctl restart avahi-daemon.service
}

geolocation_api () {
# Add correct DB name, username and password credentials in geolocation-api tool
[ -e $BINARY_PREFIX/jambulatv-whereami ] || \
	cat $PROJECT_BIN_DIR/jambulatv-whereami | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_NAME:$JAMBULATV_SETUP_DB_NAME:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_TABLE:$JAMBULATV_SETUP_DB_TABLE:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_USER:$JAMBULATV_SETUP_DB_USER:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_PASS:$JAMBULATV_SETUP_DB_PASS:g" | \
		sed -e "s:MY_USER_AGENT:$DEFAULT_USER_AGENT:g" \
			> $BINARY_PREFIX/jambulatv-whereami 
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-whereami 
}

weather_api () {
# Add correct DB name, username and password credentials in weather-api tool
[ -e $BINARY_PREFIX/jambulatv-weather-api ] || \
	cat $PROJECT_BIN_DIR/jambulatv-weather-api | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_NAME:$JAMBULATV_SETUP_DB_NAME:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_TABLE:$JAMBULATV_SETUP_DB_TABLE:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_USER:$JAMBULATV_SETUP_DB_USER:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_PASS:$JAMBULATV_SETUP_DB_PASS:g" | \
		sed -e "s:MY_USER_AGENT:$DEFAULT_USER_AGENT:g" \
			> $BINARY_PREFIX/jambulatv-weather-api 
# Make script executable
chmod 755 $BINARY_PREFIX/jambulatv-weather-api 
}

initial_setup_configure () {
# Copy jambulatv-initial-setup, if none exists in bin directory
[ -e $INITIAL_SETUP_TOOL ] || \
	cat $PROJECT_BIN_DIR/jambulatv-initial-setup | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_NAME:$JAMBULATV_SETUP_DB_NAME:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_TABLE:$JAMBULATV_SETUP_DB_TABLE:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_USER:$JAMBULATV_SETUP_DB_USER:g" | \
		sed -e "s:MY_JAMBULATV_SETUP_DB_PASS:$JAMBULATV_SETUP_DB_PASS:g" \
			> $INITIAL_SETUP_TOOL 
# Make script executable
chmod 755 $INITIAL_SETUP_TOOL

# Create setup sounds directory if no-existent
[ -d $PROJECT_SYSTEM_SHARE_DIR/sounds ] || mkdir -p $PROJECT_SYSTEM_SHARE_DIR/sounds
# Copy setup sound files
cp -rv $PROJECT_CONTRIB_DIR/sounds/setup/* $PROJECT_SYSTEM_SHARE_DIR/sounds/
# Change ownership of sounds directory
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PROJECT_SYSTEM_SHARE_DIR/sounds

# Get WWW User and Group
set_www_user_group
# Add Setup Web files
rsync -av $PROJECT_CUSTOMIZATION_DIR/setup/ $WWW_HTML_DIR/setup/
# Change log directory permissions
chown -R $WWW_USER:$WWW_GROUP $WWW_HTML_DIR/setup

# MySQL DB for JambulaTV Setup
# ----------------------------
# Enable and start mysql service if it is not running
systemctl -q is-active mysqld.service || systemctl enable mysqld.service
systemctl -q is-active mysqld.service || systemctl start mysqld.service
# Change MySQL password if default is empty
mysqladmin password $MYSQL_ROOT_PASSWORD > /dev/null 2>&1 || clear && echo "Default MySQL password was already changed! Proceeding ..." && sleep 5
#
# Create setup database
mysqladmin -p$MYSQL_ROOT_PASSWORD create $JAMBULATV_SETUP_DB_NAME
# Generate database tables using schema
mysql -u root -p$MYSQL_ROOT_PASSWORD $JAMBULATV_SETUP_DB_NAME < $JAMBULATV_SETUP_DB_SCHEMA
# Set privileges on zoneminder database
echo "GRANT ALL PRIVILEGES ON $JAMBULATV_SETUP_DB_NAME.* to $JAMBULATV_SETUP_DB_USER@localhost IDENTIFIED by '$JAMBULATV_SETUP_DB_PASS';" | mysql -u root -p$MYSQL_ROOT_PASSWORD
#
# Change related DB name, username and password credentials in final form submitted
cat $PROJECT_CUSTOMIZATION_DIR/setup/form_50.php | \
	sed -e "s:JAMBULATV_SETUP_DB_NAME:$JAMBULATV_SETUP_DB_NAME:g" | \
	sed -e "s:JAMBULATV_SETUP_DB_USER:$JAMBULATV_SETUP_DB_USER:g" | \
	sed -e "s:JAMBULATV_SETUP_DB_PASS:$JAMBULATV_SETUP_DB_PASS:g" > $WWW_HTML_DIR/setup/form_50.php
#
# Copy autoexec.py startup file for kodi if non-existent
[ -e $KODI_USER_DATA/autoexec.py ] || cp -v $PROJECT_CONFIGS_DIR/kodi/autoexec.py $KODI_USER_DATA
# Append PVR Manager enable script to auto start file
cat >> $KODI_USER_DATA/autoexec.py <<EOF

# If not yet done, run initial setup tool at next boot
subprocess.check_call("$BINARY_PREFIX/jambulatv-initial-setup")
EOF
}

auto_updates_configure () {
# Copy jambulatv-updater script, if it does not exist in bin directory
[ -e $BINARY_PREFIX/jambulatv-updater ] || cp -v $PROJECT_BIN_DIR/jambulatv-updater $BINARY_PREFIX/
# Add to schedule
# Copy reminder .timer and .service files
cp -v $PROJECT_INIT_SCRIPTS_DIR/jambulatv-updates.{timer,service} $SYSTEMD_UNITS_DIR_USER/
systemctl enable jambulatv-updates.timer
}



# --------------
#  FINAL NOTES
# --------------
post_install_notice () {
# Echo post install header 
clear
echo "Congratulations!
****************

Initial setup of $PROJECT_NAME is complete, however, several components will need
to be configured after you reboot.  

Details are listed in the following file which has been saved as:

[$POST_INSTALL_NOTES]

Press 'Enter' to proceed reading this file ...
(To quit after viewing the file, press 'q')

Time
****
Script runtime was $SCRIPT_RUNTIME seconds

"
read
#
# Print post install notes to screen
less $POST_INSTALL_NOTES
# Give owner permissions
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $POST_INSTALL_NOTES

# Remote Access
clear
cat << EOF
IMPORTANT:  To access this box remotely, please setup reverse ssh and make sure to add user at remote server:
For credentials to use, see the file: $POST_INSTALL_NOTES
EOF
}
###################
# End End End End #
###################

# Display this app's post install/configuration information, and output to final notice
#echo 2>&1 | tee -a $POST_INSTALL_NOTES << EOF
#
#

#
#EOF


# -----------------------------------------------
# Other functions not used during install process
# -----------------------------------------------

# FTP Downloads
ftp_connect_get_file () {
# Check Internet connectivity
check_internet_connectivity_ping 0

# Set ftp file paths
FTP_REMOTE_DIR=$1
FTP_REMOTE_FILE=$2
FTP_LOCAL_DIR=$3

# Quit if required arguments are not specified
if [[ "x$FTP_REMOTE_DIR" = "x" || "x$FTP_REMOTE_FILE" = "x" || "x$FTP_LOCAL_DIR" = "x" ]];
then
cat <<EOF
Usage: $(basename $0) [FTP_REMOTE_DIR] [FTP_REMOTE_FILE] [FTP_LOCAL_DIR]
   e.g $(basename $0) iptv/ jambula-iptv.m3u8 /tmp
NOTE: Do not include root directory in path
EOF
exit 1
fi

# Change to local ftp download directory
cd $FTP_LOCAL_DIR
#
# Download file via FTP
ftp -n $JAMBULATV_FTP_SERVER $JAMBULATV_FTP_PORT <<MYFTP
quote USER $JAMBULATV_FTP_USER
quote PASS $JAMBULATV_FTP_PASS
cd $JAMBULATV_FTP_SERVER_ROOT_DIR/$FTP_REMOTE_DIR
get $FTP_REMOTE_FILE 
quit
MYFTP

# See if FTP download succeeded.  Notify if it failed
if [ ! -s $FTP_LOCAL_DIR/$FTP_REMOTE_FILE ];
then
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$FTP_FAILED_NOTIFICATION_MESSAGE $FTP_REMOTE_FILE" text
# Print notification using OSD tool
print_notification "$FTP_FAILED_NOTIFICATION_MESSAGE $FTP_REMOTE_FILE" osd
fi
}

wget_download_file () {
# Check Internet connectivity
check_internet_connectivity_ping 0

WGET_OUTPUT_FILE=$1
WGET_DOWNLOAD_URL=$2
WGET_OTHER_ARGS="$3 $4 $5"
#
$WGET_CMD $WGET_OPTIONS -O $WGET_OUTPUT_FILE $WGET_DOWNLOAD_URL $WGET_OTHER_ARGS
#
# Test to see if file was downloaded
if [[ ! -s "$WGET_OUTPUT_FILE" ]];
then
# Notify if Wget download failed
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$WGET_FAILED_NOTIFICATION_MESSAGE $(basename $WGET_OUTPUT_FILE)" text
# Print notification using OSD tool
print_notification "$WGET_FAILED_NOTIFICATION_MESSAGE $(basename $WGET_OUTPUT_FILE)" osd
fi
}
