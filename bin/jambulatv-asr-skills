#!/bin/sh
# This is a set of voice recognition skills used by JambulaTV 
# It is used by the Speech-to-Text tool
#
# Jambula Labs @copyright 2020-2021 All rights reserved

# Variables
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_FUNCTIONS_FILE=$PROJECT_SYSTEM_CONF_DIR/functions

# Source install functions
. $PROJECT_FUNCTIONS_FILE



############
#  SKILLS  #
############

mute_speakers_localhost () {
$SPEAKER_VOLUME_TOOL all localhost status | grep -i Active > /dev/null 2>&1
SPEAKER_AUDIO_STATUS=$?
[[ "$SPEAKER_AUDIO_STATUS" = "0" ]] && \
$SPEAKER_VOLUME_TOOL all localhost mute
}

unmute_speakers_localhost () {
$SPEAKER_VOLUME_TOOL all localhost status | grep -i Active > /dev/null 2>&1
SPEAKER_AUDIO_STATUS=$?
[[ "$SPEAKER_AUDIO_STATUS" = "0" ]] && \
$SPEAKER_VOLUME_TOOL all localhost unmute
}

sound_alert () {
# Mute house speakers if there's audio playing
mute_speakers_localhost
# Play alert sound specified
$SOUNDS_TOOL alert $1
# Unmute house speakers if there's audio playing
unmute_speakers_localhost
}

sound_effect_flash () {
sound_alert 18
}

sound_upcoming_briefing () {
sound_alert 19
}

sound_greeting () {
# Say time of day
sound_alert 21
}

sound_happy_day () {
# Say Happy 'Day of Week'
sound_alert 20
}

skill_time () {
# Pause Player
$KODI_CONTROLLER_TOOL video_play_pause noreplay
# Say Time
$TEXT2SPEECH_TOOL "" time
# Un Pause Player
$KODI_CONTROLLER_TOOL video_play_pause
}

skill_time_world () {
CITY_REQUESTED=$(echo "$@" | sed "s: :_:g")
TIME_ZONE=$(/usr/bin/timedatectl list-timezones | grep -i "$CITY_REQUESTED")
TIME_NOW=$(TZ="${TIME_ZONE}" date +"%-I %M %P")
# Say world time
$TEXT2SPEECH_TOOL "" custom "The time now in $@ is $TIME_NOW"
}

skill_weather_currently () {
# Pause Player
$KODI_CONTROLLER_TOOL video_play_pause noreplay
# Say weather
$TEXT2SPEECH_TOOL "" weather current 3
# Un Pause Player
$KODI_CONTROLLER_TOOL video_play_pause
}

skill_weather_today () {
# Pause Player
$KODI_CONTROLLER_TOOL video_play_pause noreplay
# Say weather
$TEXT2SPEECH_TOOL "" weather today 1
# Un Pause Player
$KODI_CONTROLLER_TOOL video_play_pause
}

skill_weather_later () {
# Pause Player
$KODI_CONTROLLER_TOOL video_play_pause noreplay
# Say weather
$TEXT2SPEECH_TOOL "" weather later 2
# Un Pause Player
$KODI_CONTROLLER_TOOL video_play_pause
}

skill_weather () {
# Say default weather report
skill_weather_currently 
}

skill_headlines_start () {
# Header voice
$TEXT2SPEECH_TOOL "" custom "Here is whats making news today"
# Fetch news
$FETCH_NEWS_TOOL
}

skill_headlines_stop () {
killall ${FETCH_NEWS_TOOL##*/} && killall ${TEXT2SPEECH_TOOL##*/}
$TEXT2SPEECH_TOOL "" custom "Okay, I will stop reading the news"
touch $TTS_OUTPUT_FILE
}

skill_reminders () {
$TEXT2SPEECH_TOOL "" custom "$(/usr/bin/remind /JambulaTV/Reminders/)"
}

skill_calendar_events () {
# Calendar events variables
CALENDAR_EVENT_START=$1
CALENDAR_EVENT_END=$2
CALENDAR_EVENT_ASR_PERIOD=$3
CALENDAR_TEXT_2_SPEECH_INPUT_FILE=$(grep '^TEXT2SPEECH_INPUT_FILE' $CALENDAR_EVENTS_TOOL | cut -d '=' -f2 | head -1 | awk {'print $1'})

# Query calendar for events
$CALENDAR_EVENTS_TOOL $CALENDAR_EVENT_START $CALENDAR_EVENT_END

# If no events are found, say it 
[ -s $CALENDAR_TEXT_2_SPEECH_INPUT_FILE ] || \
	$TEXT2SPEECH_TOOL "" custom "No events are scheduled for $CALENDAR_EVENT_ASR_PERIOD" 
# Quit if no events found
[ -s $CALENDAR_TEXT_2_SPEECH_INPUT_FILE ] || exit 0

# Say header message
$TEXT2SPEECH_TOOL "" custom "The following events are scheduled for $CALENDAR_EVENT_ASR_PERIOD"
# Cycle through speech-to-text input file and say event summary
cat $CALENDAR_TEXT_2_SPEECH_INPUT_FILE | while read EVENT_SUMMARY
do
$TEXT2SPEECH_TOOL "" custom "The $EVENT_SUMMARY"
done
# Say footer message
$TEXT2SPEECH_TOOL "" custom "That is all for $CALENDAR_EVENT_ASR_PERIOD"
}

skill_motd () {
$TEXT2SPEECH_TOOL "" custom "Today's message of the day is \"\\pau=1000\\\" $(/usr/bin/fortune -s -n 80)"
}

skill_flash_briefing () {
# Play sound effects for flash briefing
sound_effect_flash
# Say greeting
sound_greeting
# Play sound - upcoming flash briefing
sound_upcoming_briefing
# Read reminders
skill_reminders
# Read weather
skill_weather
# Read news headlines
skill_headlines_start
# Read message of the day
skill_motd
# Say time
skill_time
# Wish a good day
sound_happy_day
}

skill_lights_on () {
# Lamp name 
SMARTHOME_HUB_LAMP_NAME="Living Room"
# Turn lamp on
$LIGHTS_TOOL "$SMARTHOME_HUB_LAMP_NAME" on demo
}

skill_lights_off () {
# Lamp name 
SMARTHOME_HUB_LAMP_NAME="Living Room"
# Turn lamp off
$LIGHTS_TOOL "$SMARTHOME_HUB_LAMP_NAME" off demo
}

skill_tv_start () {
# Favorite TV channel
FAVORITE_TV_CHANNEL="NBS TV"
# Play TV channel
$KODI_CONTROLLER_TOOL tv_play_start "$FAVORITE_TV_CHANNEL"
}

skill_tv_play_next () {
$KODI_CONTROLLER_TOOL video_play_next
}

skill_tv_play_previous () {
$KODI_CONTROLLER_TOOL video_play_previous
}

skill_tv_pause_channel () {
$KODI_CONTROLLER_TOOL video_play_pause noreplay
}

skill_tv_unpause_channel () {
$KODI_CONTROLLER_TOOL video_play_pause
}

skill_tv_play_ntv () {
$KODI_CONTROLLER_TOOL tv_play_start "N TV"
}

skill_tv_play_nbs () {
$KODI_CONTROLLER_TOOL tv_play_start "NBS TV"
}

skill_tv_stop () {
$KODI_CONTROLLER_TOOL tv_play_stop
}

skill_tv_record_start_now () {
# TV record status temp file
TV_RECORD_STATUS_FILE=$(grep ^TV_RECORD_STATUS_FILE $KODI_CONTROLLER_TOOL | cut -d '=' -f2 | head -1 | awk {'print $1'} | sed "s:\"::g")
# Check status of tv recording
$KODI_CONTROLLER_TOOL tv_record_status
# Source current TV recording status file
. $TV_RECORD_STATUS_FILE && export TV_RECORDING_CURRENT_STATUS
#
if [ "$TV_RECORDING_CURRENT_STATUS" = "true" ];
then
# Let user know there's already a recording and quit
$TEXT2SPEECH_TOOL "" custom "Am sorry, there is already another recording in progress. To end that recording, please say \"\\pau=1000\\\" STOP RECORDING TV CHANNEL. \"\\pau=1000\\\"  Then repeat your request"
# Quit
exit 1

else
# Record TV channel now
$KODI_CONTROLLER_TOOL tv_record_instant_start
fi
}

skill_tv_record_stop_now () {
# TV record status temp file
TV_RECORD_STATUS_FILE=$(grep ^TV_RECORD_STATUS_FILE $KODI_CONTROLLER_TOOL | cut -d '=' -f2 | head -1 | awk {'print $1'} | sed "s:\"::g")
# Check status of tv recording
$KODI_CONTROLLER_TOOL tv_record_status
# Source current TV recording status file
. $TV_RECORD_STATUS_FILE && export TV_RECORDING_CURRENT_STATUS
#
if [ "$TV_RECORDING_CURRENT_STATUS" = "false" ];
then
# Let user know there's no recording to stop
$TEXT2SPEECH_TOOL "" custom "Am sorry, there is no recording for me to stop"
# Quit
exit 1

else
# Stop recording TV channel now
$KODI_CONTROLLER_TOOL tv_record_instant_stop
fi
}

skill_video_start () {
# Favorite video
FAVORITE_VIDEO="$USER_TV_SHOWS_DIR/Game_of_Thrones/Season_07/Game.of.Thrones.S07E07.The.Dragon.and.the.Wolf.HDTV.H264.mkv"
# Play favorite video
$KODI_CONTROLLER_TOOL video_play_start "$FAVORITE_VIDEO"
}

skill_video_pause () {
$KODI_CONTROLLER_TOOL video_play_pause noreplay
}

skill_video_unpause () {
$KODI_CONTROLLER_TOOL video_play_pause
}

skill_video_play_next () {
$KODI_CONTROLLER_TOOL navigate_down
$KODI_CONTROLLER_TOOL navigate_select
}

skill_video_play_previous () {
$KODI_CONTROLLER_TOOL navigate_up
$KODI_CONTROLLER_TOOL navigate_select
}

skill_video_play_stop () {
$KODI_CONTROLLER_TOOL video_play_stop
}

skill_picture_in_picture_start () {
$PIP_TOOL start
}

skill_picture_in_picture_next () {
$PIP_TOOL next
}

skill_picture_in_picture_previous () {
$PIP_TOOL previous
}

skill_picture_in_picture_pause () {
$PIP_TOOL pause
}

skill_picture_in_picture_unpause () {
$PIP_TOOL unpause
}

skill_picture_in_picture_stop () {
$PIP_TOOL stop
}

skill_youtube_search_start () {
$KODI_CONTROLLER_TOOL addon_play_youtube "$@"
}

skill_youtube_search_stop () {
$KODI_CONTROLLER_TOOL video_play_stop
}

skill_pictures_slideshow_all_start () {
# Run pictures slide show
$KODI_CONTROLLER_TOOL pictures_play_start $USER_PICTURES_DIR
}

skill_pictures_slideshow_stop () {
$KODI_CONTROLLER_TOOL pictures_play_stop
}

skill_music_start () {
# Music playlists using categories
MUSIC_CATEGORY="$@"
case $MUSIC_CATEGORY in
jazz)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_jazz.m3u
;;
gospel)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_gospel.m3u
;;
local)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_local.m3u
;;
lingala)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_lingala.m3u
;;
*)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_jazz.m3u
;;
esac
#
# Remove old playlist
[ -e $MUSIC_PLAYLIST ] && rm -f $MUSIC_PLAYLIST
# Generate playlist - TODO: Cache playlist and refresh periodically
find $(find $USER_MUSIC_DIR -type d -iname $MUSIC_CATEGORY) -type f | grep -E "*(\.mp3|\.mp4|\.wav|\.m4a|\.webm)" | while read SONG
do 
echo "$SONG" >> "$MUSIC_PLAYLIST"
done

# Play requested music category
$KODI_CONTROLLER_TOOL music_play_offline_start "$MUSIC_PLAYLIST" 
}

skill_internet_music_start () {
# Music playlists using categories
ONLINE_MUSIC_STATION="$@"
case $ONLINE_MUSIC_STATION in
jazz_fm_online)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_internet_jazz_fm.m3u
STATION_URL="http://sj64.hnux.com"
;;
east_africa_online)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_internet_east_africa.m3u
STATION_URL="http://www.ophanim.net:8270/"
;;
*)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_internet_various.m3u
;;
esac
#
# Remove old playlist
[ -e $MUSIC_PLAYLIST ] && rm -f $MUSIC_PLAYLIST
#
# Generate playlist
echo "$STATION_URL" >> "$MUSIC_PLAYLIST"

# Play requested music category
$KODI_CONTROLLER_TOOL music_play_online_start "$MUSIC_PLAYLIST" 
}

skill_music_pause () {
$KODI_CONTROLLER_TOOL music_play_pause noreplay
}

skill_music_unpause () {
$KODI_CONTROLLER_TOOL music_play_pause
}

skill_music_read_playing_now () {
MUSIC_NOW_PLAYING_SONG=$(tail -1 $MUSIC_NOW_PLAYING_FILE | cut -d')' -f2- | sed 's:^ ::g')
# Use text to speech
$TEXT2SPEECH_TOOL "" custom "The song currently playing is. $MUSIC_NOW_PLAYING_SONG"
}

skill_music_download_playing_now () {
$MUSIC_DOWNLOAD_TOOL youtube playing
}

skill_fmradio_start () {
# Change FM radio station
$FMRADIO_STREAMER_TOOL restart "$@"
# Stream FM radio
$KODI_CONTROLLER_TOOL addon_play_fmradio 
}

skill_fmradio_stop () {
$KODI_CONTROLLER_TOOL audio_play_stop
}

skill_music_play_next () {
$KODI_CONTROLLER_TOOL navigate_down
$KODI_CONTROLLER_TOOL navigate_select
}

skill_music_play_previous () {
$KODI_CONTROLLER_TOOL navigate_up
$KODI_CONTROLLER_TOOL navigate_select
}

skill_music_play_stop () {
$KODI_CONTROLLER_TOOL music_play_stop
}

skill_volume_mute_toggle () {
# Get index
SINK_INPUT_INDEX=$(/usr/bin/pactl list | grep -B 19 "application.name = \"Kodi\"" | grep 'Sink Input #' | sed 's:Sink Input #::')
# Toggle mute
/usr/bin/pactl set-sink-input-mute $SINK_INPUT_INDEX toggle
}

skill_volume_increase () {
# Get index
SINK_INPUT_INDEX=$(/usr/bin/pactl list | grep -B 19 "application.name = \"Kodi\"" | grep 'Sink Input #' | sed 's:Sink Input #::')
#
# Current Volume level
SINK_INPUT_VOLUME_CURRENT=$(/usr/bin/pactl list | grep -B 19 "application.name = \"Kodi"\" | grep 'Volume' | awk -F':' {'print $3'} | awk {'print $1'})
#
# Step up by 5% i.e. 3277
let "SINK_INPUT_VOLUME_NEXT = $SINK_INPUT_VOLUME_CURRENT + 3277"
# Increase Volume
pactl set-sink-input-volume $SINK_INPUT_INDEX $SINK_INPUT_VOLUME_NEXT
}

skill_volume_decrease () {
# Get index
SINK_INPUT_INDEX=$(/usr/bin/pactl list | grep -B 19 "application.name = \"Kodi\"" | grep 'Sink Input #' | sed 's:Sink Input #::')
#
# Current Volume level
SINK_INPUT_VOLUME_CURRENT=$(/usr/bin/pactl list | grep -B 19 "application.name = \"Kodi"\" | grep 'Volume' | awk -F':' {'print $3'} | awk {'print $1'})
#
# Step down by 5% i.e. 3277
let "SINK_INPUT_VOLUME_NEXT = $SINK_INPUT_VOLUME_CURRENT - 3277"
# Decrease Volume
pactl set-sink-input-volume $SINK_INPUT_INDEX $SINK_INPUT_VOLUME_NEXT
}

skill_go_home () {
$KODI_CONTROLLER_TOOL navigate_home
}

skill_web_camera_view_play () {
$CAMPLAYER_TOOL play $1 ffplay
}

skill_web_camera_view_stop () {
$CAMPLAYER_TOOL stop
}

skill_internet_data_balance_mifi () {
# Check if MiFi router is alive
MIFI_IP_ADDRESS=$(query_mysql_db mifi_ip_address)
ping -c 1 -W 1 $MIFI_IP_ADDRESS > /dev/null 2>&1
MIFI_REACHEABLE=$?
# If MiFi is up, proceed to query
if [[ "$MIFI_REACHEABLE" = "0" ]];
then
# Add beeps while data stats are fetched
$SOUNDS_TOOL api $TTS_OUTPUT_FILE

# source mifi router login credentials
MIFI_ADMIN_USER=$(query_mysql_db mifi_admin_user)
MIFI_ADMIN_PASS=$(query_mysql_db mifi_admin_pass)
# Source data remaining
DATA_BALANCE_LEFT_MB=$($MIFI_QUERY_TOOL $MIFI_IP_ADDRESS $MIFI_ADMIN_USER $MIFI_ADMIN_PASS data | grep 'Data balance remaining' | head -1 | awk -F':' {'print $2'} | awk {'print $1'} | sed 's:MB: MB:')
DATA_BALANCE_LEFT_PERCENT=$($MIFI_QUERY_TOOL $MIFI_IP_ADDRESS $MIFI_ADMIN_USER $MIFI_ADMIN_PASS data | grep 'Data balance remaining' | tail -1 | awk -F':' {'print $2'} | awk {'print $1'} | cut -d '.' -f1)
DATA_BALANCE_THRESHOLD_LOW=$(grep -Ev '(#.*$)|(^$)' $MIFI_QUERY_TOOL | grep 'DATA_BALANCE_THRESHOLD_LOW=' | cut -d '=' -f2)
fi

# If MiFi is down, or no data fetched
if [[ "$MIFI_REACHEABLE" != "0" || "x$DATA_BALANCE_LEFT_MB" = "x" ]];
then
# Alert using voice
$TEXT2SPEECH_TOOL "" custom "I am sorry, but I failed to get the Internet data balance from your router. Please check that it is powered on"
# quit
exit 0
fi

# If data is above warning threshold
if [[ "$DATA_BALANCE_LEFT_PERCENT" -ge "$DATA_BALANCE_THRESHOLD_LOW" ]];
then
# Only read the balance left
$TEXT2SPEECH_TOOL "" custom "The remaining balance for your Internet data is $DATA_BALANCE_LEFT_MB"

else
# Read balance left and Warn when data is about to run out
$TEXT2SPEECH_TOOL "" custom "The remaining balance for your Internet data is $DATA_BALANCE_LEFT_MB. Please recharge as soon as possible"
fi
}

phone_call_dial () {
# Set phone number variables
PHONE_ENTRY="$1"
PHONE_NUMBER=$(sudo asterisk -x "database show" | grep -w "$PHONE_ENTRY" | awk {'print $1'} | cut -d / -f3 | sed "s:-::g" | sed "s:+::g"| uniq | head -1)
# Set to number if blank
[[ "x$PHONE_NUMBER" = "x" ]] && PHONE_NUMBER=$1
# Ensure phone number is valid i.e. numeric not letters
[[ "$PHONE_NUMBER" =~ ^[0-9]+$ ]] || $TEXT2SPEECH_TOOL custom "I did not find a valid phone number"
# Dial Number
sudo asterisk -rx "console dial $PHONE_NUMBER"
}

phone_call_hangup () {
sudo asterisk -rx "console hangup"
}

skill_connect_2_hotspot () {
sudo $AUTO_WIFI_PROVISION_TOOL &
$TEXT2SPEECH_TOOL "" custom "Please scan the QR Code displayed on the TV Screen to get the Wifi password.  For Android devices, you may connect automatically"
}

skill_display_off () {
#$TEXT2SPEECH_TOOL "" custom "Turning off Display"
. $SCREEN_DISPLAY_TOOL off
}

skill_display_on () {
#$TEXT2SPEECH_TOOL "" custom "Turning on Display"
. $SCREEN_DISPLAY_TOOL on
}

skill_power_off () {
$TEXT2SPEECH_TOOL "" custom "Turning off system"
systemctl poweroff -i
}

skill_stop_running_skill () {
# Text2Speech tool
TTS_PLAY_TOOL=$(basename $(grep ^TTS_PLAY_CMD $TEXT2SPEECH_TOOL | cut -d '=' -f2 | head -1 | awk {'print $1'} | sed "s:\"::g"))
# Get PID of TTS audio
TTS_PID=$(ps auxw | grep -Ev grep | grep $TTS_PLAY_TOOL | grep $TEXT_2_SPEECH_OUTPUT_FILE | awk {'print $2'})
kill $TTS_PID
}

skill_mute_speech_recognition () {
$TEXT2SPEECH_TOOL "" custom "Geeez \"\\pau=1000\\\" Am I that noisy? \"\\pau=1000\\\" OK \"\\pau=500\\\" I will go off line for now"
[ -e $TEXT_2_SPEECH_OUTPUT_FILE ] && rm -f $TEXT_2_SPEECH_OUTPUT_FILE
touch $TEXT_2_SPEECH_OUTPUT_FILE
sudo chattr +i $TEXT_2_SPEECH_OUTPUT_FILE
}

skill_unmute_speech_recognition () {
sudo chattr -i $TEXT_2_SPEECH_OUTPUT_FILE 
[ -e $TEXT_2_SPEECH_OUTPUT_FILE ] && rm -f $TEXT_2_SPEECH_OUTPUT_FILE
$TEXT2SPEECH_TOOL "" custom "You missed me \"\\pau=500\\\" Right? \"\\pau=1000\\\" OK \"\\pau=500\\\"  I am baack"
}

skill_unknown () {
$TEXT2SPEECH_TOOL "" custom "Am sorry, I did not understand what you said"
}
