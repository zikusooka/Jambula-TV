#!/bin/sh
# This is a set of voice recognition skills used by JambulaTV 
# It is used by the Speech-to-Text tool
#
# Jambula Labs @copyright 2022-2023 All rights reserved

# Variables
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_FUNCTIONS_FILE=$PROJECT_SYSTEM_CONF_DIR/functions

# Source install functions
. $PROJECT_FUNCTIONS_FILE

SOUNDS_VOLUME_LEVEL=160

# Variables - Flash briefing
ALL_BRIEF_CONCAT_DIR=$TMPDIR/tts/flash_briefing_intro
ALL_BRIEF_CONCAT_INPUT_FILE=$TMPDIR/input_files_flash_briefing_all.txt
ALL_BRIEF_FILE=$TMPDIR/flash_briefing_intro.mp3
ALL_BRIEF_ALERT_SOUND=$(echo ${ALL_BRIEF_FILE##*/} | sed 's:.mp3::') 
ALL_BRIEF_DATE=$(date '+%A %-d %B %Y') 

# Variables - Reminders
REMINDERS_TOOL=/usr/bin/jambulatv-remind
REMINDERS_SCHEDULED="$($REMINDERS_TOOL text)"
REMINDERS_TEMP_FILE=$(grep ^TODAYS_REMINDERS_FILE $REMINDERS_TOOL | cut -d '=' -f2 | head -1 | awk {'print $1'} | sed 's/"//g' | cut -d '.' -f1)
REMINDERS_CONCAT_DIR=$TMPDIR/tts/reminders
REMINDERS_CONCAT_INPUT_FILE=$TMPDIR/input_files_reminders.txt
REMINDERS_FILE=$TMPDIR/reminders_today.mp3
REMINDERS_ALERT_SOUND=$(echo ${REMINDERS_FILE##*/} | sed 's:.mp3::')

# Variables - Power outages
POWER_OUTAGE_DATE_TODAY=$(date '+%A %d %B')
POWER_OUTAGE_DATE_TOMORROW=$(date --date='tomorrow' '+%A %d %B')
POWER_OUTAGES_CONCAT_DIR=$TMPDIR/tts/power_outages
POWER_OUTAGES_CONCAT_INPUT_FILE=$TMPDIR/input_files_power_outages.txt
POWER_OUTAGES_FILE=$TMPDIR/power_outages_coming_up.mp3
POWER_OUTAGES_ALERT_SOUND=$(echo ${POWER_OUTAGES_FILE##*/} | sed 's:.mp3::')

# Variables - Weather
WEATHER_REPORT_CONCAT_DIR=$TMPDIR/tts/weather_currently
WEATHER_REPORT_CONCAT_INPUT_FILE=$TMPDIR/input_files_weather_currently.txt
WEATHER_REPORT_FILE=$TMPDIR/weather_summary_currently.mp3
WEATHER_REPORT_ALERT_SOUND=$(echo ${WEATHER_REPORT_FILE##*/} | sed 's:.mp3::')

WEATHER_REPORT_CONCAT_DIR=$TMPDIR/tts/weather_today
WEATHER_REPORT_CONCAT_INPUT_FILE=$TMPDIR/input_files_weather_today.txt
WEATHER_REPORT_FILE=$TMPDIR/weather_forecast_today.mp3
WEATHER_REPORT_ALERT_SOUND=$(echo ${WEATHER_REPORT_FILE##*/} | sed 's:.mp3::')

WEATHER_REPORT_CONCAT_DIR=$TMPDIR/tts/weather_later
WEATHER_REPORT_CONCAT_INPUT_FILE=$TMPDIR/input_files_weather_later.txt
WEATHER_REPORT_FILE=$TMPDIR/weather_forecast_later.mp3
WEATHER_REPORT_ALERT_SOUND=$(echo ${WEATHER_REPORT_FILE##*/} | sed 's:.mp3::')

# Variables - News
NEWS_BRIEF_CONCAT_DIR=$TMPDIR/tts/news
NEWS_BRIEF_CONCAT_INPUT_FILE=$TMPDIR/input_files_news.txt
NEWS_BRIEF_FILE=$TMPDIR/news_briefing_today.mp3
NEWS_BRIEF_ALERT_SOUND=$(echo ${NEWS_BRIEF_FILE##*/} | sed 's:.mp3::')
NEWS_SUMMARY_AUDIO_FILENAME_4_BBC=bbc_news_summary.mp3
NEWS_SUMMARY_AUDIO_FILENAME_4_MONITOR=monitor_news_summary.mp3
NEWS_EXPIRY_TIME_4_BBC=7200
NEWS_EXPIRY_TIME_4_MONITOR=7200

# Variables - MOTD
MESSAGE_OF_THE_DAY=$(/usr/bin/fortune -s -n 80)
MESSAGE_OF_THE_DAY_CONCAT_DIR=$TMPDIR/tts/motd
MESSAGE_OF_THE_DAY_CONCAT_INPUT_FILE=$TMPDIR/input_files_motd.txt
MESSAGE_OF_THE_DAY_FILE=$TMPDIR/message_of_the_day.mp3
MESSAGE_OF_THE_DAY_ALERT_SOUND=$(echo ${MESSAGE_OF_THE_DAY_FILE##*/} | sed 's:.mp3::')

# Variables - Signout
DAY_OF_WEEK=$(date +%A) 
DAYS_GREETING_CONCAT_DIR=$TMPDIR/tts/flash_briefing_sign_out
DAYS_GREETING_CONCAT_INPUT_FILE=$TMPDIR/input_files_days_greeting.txt
DAYS_GREETING_FILE=$TMPDIR/flash_briefing_sign_out.mp3
DAYS_GREETING_ALERT_SOUND=$(echo ${DAYS_GREETING_FILE##*/} | sed 's:.mp3::')

# Variables - Miscellaneous
SILENCE_1_SECS_AUDIO_FILE=$PROJECT_SYSTEM_SOUNDS_DIR/silence_1s.mp3
SILENCE_2_SECS_AUDIO_FILE=$PROJECT_SYSTEM_SOUNDS_DIR/silence_2s.mp3



###############
#  FUNCTIONS  #
###############

query_and_set_freshness_of_target_file () {
TARGET_FILE=$1
MAXIMUM_AGE_OF_TARGET_FILE=$2

# If Flash briefing today file of size exists, set variable to yes
if [[ -s "$TARGET_FILE" ]];
then
TARGET_FILE_IS_PRESENT=yes
else
TARGET_FILE_IS_PRESENT=no
fi

# If Flash briefing today file is still fresh, set variable to yes
if [[ -e "$TARGET_FILE" && "$(date -d "now - $(stat -c "%Y" $TARGET_FILE) seconds" +%s)" -lt "$MAXIMUM_AGE_OF_TARGET_FILE" ]];
then
TARGET_FILE_IS_FRESH=yes
else
TARGET_FILE_IS_FRESH=no
fi
}

play_audio_test () {
# To play audio or not
echo $@ | grep -e 'play=no' -e 'play=n' > /dev/null 2>&1
EXTRA_ARG_PLAY=$?
if [[ "$EXTRA_ARG_PLAY" = "0" ]];
then
PLAY_AUDIO=no
else
PLAY_AUDIO=yes
fi
}

mqtt_publish_flash_briefing_status () {
# Use the following states: | pending | ready | failed
$MQTT_PUBLISH_CMD $MQTT_PUBLISH_OPTS -t "$MQTT_TOPIC_FLASH_BRIEFING" -m "$1"
}

audio_merge_pre_setup () {
AUDIO_INPUT_FILE=$1
AUDIO_OUTPUT_DIR=$2
AUDIO_OUTPUT_FILE=$3

# Create the directory to store audio clips if non-existent
[[ -d $AUDIO_OUTPUT_DIR ]] || mkdir -p $AUDIO_OUTPUT_DIR

# Remove existing and previous audio clip
[[ -e "${AUDIO_OUTPUT_DIR}/${AUDIO_OUTPUT_FILE}.mp3" ]] && sudo rm -f ${AUDIO_OUTPUT_DIR}/${AUDIO_OUTPUT_FILE}.mp3

# If format of input audio clip is not 'mp3', perform conversion using FFmpeg other wise copy into clips directory
if [[ "${AUDIO_INPUT_FILE##*.}" != "mp3" ]];
then
$FFMPEG_CMD $FFMPEG_OPTS -nostdin -loglevel quiet -y -i $TMPDIR/$AUDIO_INPUT_FILE ${AUDIO_OUTPUT_DIR}/${AUDIO_OUTPUT_FILE}.mp3 

elif [[ -e $TMPDIR/$AUDIO_INPUT_FILE ]];
then
cp $TMPDIR/$AUDIO_INPUT_FILE ${AUDIO_OUTPUT_DIR}/${AUDIO_OUTPUT_FILE}.mp3

elif [[ -e $PROJECT_SYSTEM_SOUNDS_DIR/$AUDIO_INPUT_FILE ]];
then
cp $PROJECT_SYSTEM_SOUNDS_DIR/${AUDIO_INPUT_FILE} ${AUDIO_OUTPUT_DIR}/${AUDIO_OUTPUT_FILE}.mp3
fi
}

wifi_ap_discovery_configure () {
ICINGA_API_USER=root
ICINGA_API_PASS=$(awk -F'= ' '/password/ {print $2; exit;}' $ICINGA2_API_USERS_CONF_FILE | sed "s:\"::g")
ICINGA_SERVICE_NAME="JambulaTV!Discover%20Wifi%20Access%20Point"
CURL_OPTS="-iksS"

# Enable/Disable WiFi access point service discovery in Icinga via API
$CURL_CMD $CURL_OPTS -u $ICINGA_API_USER:$ICINGA_API_PASS -H "Accept:application/json" "https://localhost:5665/v1/objects/services/$ICINGA_SERVICE_NAME" -d '{ "attrs":{ "enable_event_handler":"'"$1"'" } }' > /dev/null 2>&1
}


# -----------
# Initialize
# -----------
play_audio_test $@


############
#  SKILLS  #
############

check_internet_connectivity () {
# Check for internet connectivity - IMPORTANT: Don't use DNS to ping use actual IP address
REMOTE_HOST_NAME=8.8.4.4
PING_COUNT=3
PING_TIMEOUT=3

# Ping
ping -c $PING_COUNT -W $PING_TIMEOUT $REMOTE_HOST_NAME > /dev/null 2>&1
INTERNET_STATUS_VAL=$?
#
}

skill_connect_2_internet () {
INTERNET_METHOD=$1
check_internet_connectivity

if [[ "$INTERNET_STATUS_VAL" != "0" ]];
then
# Connect to the Internet if unreacheable
logger -s -t $(basename $0) "Attempting to connect to the Internet. Please wait ..."
#
# Connect via method specified
case $INTERNET_METHOD in
mifi)    
# Enable WiFi access point service discovery in Icinga via API
wifi_ap_discovery_configure 1
# Restart iwd - temporary fix
sudo /usr/bin/systemctl restart iwd.service
sleep 3
# Connect
sudo $CONNECT_WIFI_AP_TOOL UP
;;
*)
$0 mifi
;;
esac

else
# Internet was already on
INTERNET_ALREADY_CONNECTED=yes
export INTERNET_ALREADY_CONNECTED
fi
}

skill_disconnect_4rm_internet () {
INTERNET_METHOD=$1
check_internet_connectivity

if [[ "$INTERNET_STATUS_VAL" = "0" && "$INTERNET_ALREADY_CONNECTED" != "yes" ]];
then
# Connect to the Internet if unreacheable
logger -s -t $(basename $0) "Disconnecting from the Internet"
#
# Connect via method specified
case $INTERNET_METHOD in
mifi)
# Disable WiFi access point service discovery in Icinga via API
wifi_ap_discovery_configure 0
# Disconnect
sudo $CONNECT_WIFI_AP_TOOL WARNING
;;
*)
$0 mifi
;;
esac
fi
}

skill_date () {
# Pause Player
$KODI_CONTROLLER_TOOL video_play_pause noreplay
# Say time now
$DATE_TIME_TOOL --date today --volume $SOUNDS_VOLUME_LEVEL > /dev/null 2>&1
# Un Pause Player
$KODI_CONTROLLER_TOOL video_play_pause
}

skill_time () {
# Pause Player
$KODI_CONTROLLER_TOOL video_play_pause noreplay
# Say time now
$DATE_TIME_TOOL --time now --volume $SOUNDS_VOLUME_LEVEL > /dev/null 2>&1
# Un Pause Player
$KODI_CONTROLLER_TOOL video_play_pause
}

skill_time_world () {
CITY_REQUESTED=$(echo "$@" | sed "s: :_:g")
TIME_ZONE=$(/usr/bin/timedatectl list-timezones | grep -i "$CITY_REQUESTED")
TIME_NOW=$(TZ="${TIME_ZONE}" date +"%-I %M %P")
# Say world time
$TEXT2SPEECH_TOOL "" custom "The time now in $@ is $TIME_NOW"
}

skill_weather_currently () {
LATITUDE=$1
LONGITUDE=$2
DEBUG=$3

# Copy system sound file for header into tts directory
audio_merge_pre_setup weather_current.mp3 $WEATHER_REPORT_CONCAT_DIR 1

# Compile weather
$TEXT2SPEECH_TOOL "" weather current "" "$DEBUG" "$LATITUDE" "$LONGITUDE" concatenate=yes
#
# Copy audio clip(s) to tts directory for merging
audio_merge_pre_setup tts_output.wav $WEATHER_REPORT_CONCAT_DIR 2

# If weather report was not fetched, skip compilation and use saved clip to notify of failure
if [[ ! -s $WEATHER_REPORT_CONCAT_DIR/2.mp3 ]];
then
FETCHED_WEATHER=no
cp -f $PROJECT_SYSTEM_SOUNDS_DIR/weather_not_generated.mp3 $WEATHER_REPORT_FILE

else
# Create input file used to concatenate audio files
[[ -e $WEATHER_REPORT_CONCAT_INPUT_FILE ]] && sudo rm -f $WEATHER_REPORT_CONCAT_INPUT_FILE
for CLIP in $(seq 1 2)
do
cat >> $WEATHER_REPORT_CONCAT_INPUT_FILE <<ET
file '$WEATHER_REPORT_CONCAT_DIR/${CLIP}.mp3'
ET
done

# Merge into one nice file
$FFMPEG_CMD $FFMPEG_OPTS -nostdin -loglevel quiet -y -f concat -safe 0 -i $WEATHER_REPORT_CONCAT_INPUT_FILE -c copy $WEATHER_REPORT_FILE
fi

# Play audio  
if [[ "$PLAY_AUDIO" != "no" ]];
then
# Pause Player
$KODI_CONTROLLER_TOOL video_play_pause noreplay
# Log
[[ "$FETCHED_WEATHER" = "no" ]] || logger -s -t $(basename $0) "Playing the current weather summary ..."
# Play
$SOUNDS_TOOL alert $WEATHER_REPORT_ALERT_SOUND gain=$SOUNDS_VOLUME_LEVEL
# Un Pause Player
$KODI_CONTROLLER_TOOL video_play_pause
fi
}

skill_weather_today () {
LATITUDE=$1
LONGITUDE=$2
DEBUG=$3

# Copy system sound file for header into tts directory
audio_merge_pre_setup weather_forecast.mp3 $WEATHER_REPORT_CONCAT_DIR 1

# Say weather
$TEXT2SPEECH_TOOL "" weather today "" "$DEBUG" "$LATITUDE" "$LONGITUDE" concatenate=yes
#
# Copy audio clip(s) to tts directory for merging
audio_merge_pre_setup tts_output.wav $WEATHER_REPORT_CONCAT_DIR 2

# If weather report was not fetched, skip compilation and use saved clip to notify of failure
if [[ ! -s $WEATHER_REPORT_CONCAT_DIR/2.mp3 ]];
then
FETCHED_WEATHER=no
cp -f $PROJECT_SYSTEM_SOUNDS_DIR/weather_not_generated.mp3 $WEATHER_REPORT_FILE

else
# Create input file used to concatenate audio files
[[ -e $WEATHER_REPORT_CONCAT_INPUT_FILE ]] && sudo rm -f $WEATHER_REPORT_CONCAT_INPUT_FILE
for CLIP in $(seq 1 2)
do
cat >> $WEATHER_REPORT_CONCAT_INPUT_FILE <<ET
file '$WEATHER_REPORT_CONCAT_DIR/${CLIP}.mp3'
ET
done

# Merge into one nice file
$FFMPEG_CMD $FFMPEG_OPTS -nostdin -loglevel quiet -y -f concat -safe 0 -i $WEATHER_REPORT_CONCAT_INPUT_FILE -c copy $WEATHER_REPORT_FILE
fi

# Play audio  
if [[ "$PLAY_AUDIO" != "no" ]];
then
# Pause Player
$KODI_CONTROLLER_TOOL video_play_pause noreplay
# Log
[[ "$FETCHED_WEATHER" = "no" ]] || logger -s -t $(basename $0) "Playing today's weather forecast ..."
# Play
$SOUNDS_TOOL alert $WEATHER_REPORT_ALERT_SOUND gain=$SOUNDS_VOLUME_LEVEL
# Un Pause Player
$KODI_CONTROLLER_TOOL video_play_pause
fi
}

skill_weather_later () {
LATITUDE=$1
LONGITUDE=$2
DEBUG=$3

# Copy system sound file for header into tts directory
audio_merge_pre_setup weather_forecast.mp3 $WEATHER_REPORT_CONCAT_DIR 1

# Say weather
$TEXT2SPEECH_TOOL "" weather today "" "$DEBUG" "$LATITUDE" "$LONGITUDE" concatenate=yes
#
# Copy audio clip(s) to tts directory for merging
audio_merge_pre_setup tts_output.wav $WEATHER_REPORT_CONCAT_DIR 2

# If weather report was not fetched, skip compilation and use saved clip to notify of failure
if [[ ! -s $WEATHER_REPORT_CONCAT_DIR/2.mp3 ]];
then
FETCHED_WEATHER=no
cp -f $PROJECT_SYSTEM_SOUNDS_DIR/weather_not_generated.mp3 $WEATHER_REPORT_FILE

else
# Create input file used to concatenate audio files
[[ -e $WEATHER_REPORT_CONCAT_INPUT_FILE ]] && sudo rm -f $WEATHER_REPORT_CONCAT_INPUT_FILE
for CLIP in $(seq 1 2)
do
cat >> $WEATHER_REPORT_CONCAT_INPUT_FILE <<ET
file '$WEATHER_REPORT_CONCAT_DIR/${CLIP}.mp3'
ET
done

# Merge into one nice file
$FFMPEG_CMD $FFMPEG_OPTS -nostdin -loglevel quiet -y -f concat -safe 0 -i $WEATHER_REPORT_CONCAT_INPUT_FILE -c copy $WEATHER_REPORT_FILE
fi

# Play audio  
if [[ "$PLAY_AUDIO" != "no" ]];
then
# Pause Player
$KODI_CONTROLLER_TOOL video_play_pause noreplay
# Log
[[ "$FETCHED_WEATHER" = "no" ]] || logger -s -t $(basename $0) "Playing weather forecast later ..."
# Play
$SOUNDS_TOOL alert $WEATHER_REPORT_ALERT_SOUND gain=$SOUNDS_VOLUME_LEVEL
# Un Pause Player
$KODI_CONTROLLER_TOOL video_play_pause
fi
}

skill_headlines_start () {
# Test for freshness of news - BBC
query_and_set_freshness_of_target_file $TMPDIR/$NEWS_SUMMARY_AUDIO_FILENAME_4_BBC $NEWS_EXPIRY_TIME_4_BBC 
NEWS_FRESH_BBC=$TARGET_FILE_IS_FRESH

# Test for freshness of news - Monitor
query_and_set_freshness_of_target_file $TMPDIR/$NEWS_SUMMARY_AUDIO_FILENAME_4_MONITOR $NEWS_EXPIRY_TIME_4_MONITOR
NEWS_FRESH_MONITOR=$TARGET_FILE_IS_FRESH

# If news files for BBC and Monitor are not fresh, fetch latest
if [[ "$NEWS_FRESH_BBC" = "no" ]] || [[ "$NEWS_FRESH_MONITOR" = "no" ]];
then
# Remove old news
for OLD_NEWS in \
$TMPDIR/$NEWS_SUMMARY_AUDIO_FILENAME_4_BBC \
$TMPDIR/$NEWS_SUMMARY_AUDIO_FILENAME_4_MONITOR
do
[[ -e "$OLD_NEWS" ]] && sudo rm -f $OLD_NEWS
done
#
# If Internet is available, fetch latest news headlines 
check_internet_connectivity
#
[[ "$INTERNET_STATUS_VAL" = "0" ]] && $FETCH_NEWS_VIA_SCRAPER_TOOL > /dev/null 2>&1
fi

# If no news was fetched, skip compilation and use saved clip to notify of failure
if [[ ! -s "$TMPDIR/$NEWS_SUMMARY_AUDIO_FILENAME_4_BBC" ]] && [[ ! -s "$TMPDIR/$NEWS_SUMMARY_AUDIO_FILENAME_4_MONITOR" ]];
then
FETCHED_NEWS=no
cp -f $PROJECT_SYSTEM_SOUNDS_DIR/news_summary_not_generated.mp3 $NEWS_BRIEF_FILE

else
# Copy system sound file for header into tts directory
[[ -s "$TMPDIR/$NEWS_SUMMARY_AUDIO_FILENAME_4_BBC" ]] && \
	audio_merge_pre_setup news_globally.mp3 $NEWS_BRIEF_CONCAT_DIR header_global

	# Copy system sound file for global news into tts directory
	audio_merge_pre_setup bbc_news_summary.mp3 $NEWS_BRIEF_CONCAT_DIR bbc

# Copy system sound file for header into tts directory
[[ -s "$TMPDIR/$NEWS_SUMMARY_AUDIO_FILENAME_4_MONITOR" ]] && \
	audio_merge_pre_setup news_locally.mp3 $NEWS_BRIEF_CONCAT_DIR header_local

	# Copy system sound file for local news into tts directory
	audio_merge_pre_setup monitor_news_summary.mp3 $NEWS_BRIEF_CONCAT_DIR monitor

# Copy system sound file for footer into tts directory
audio_merge_pre_setup news_summary_completed.mp3 $NEWS_BRIEF_CONCAT_DIR footer

# Create input file used to concatenate audio files
[[ -e $NEWS_BRIEF_CONCAT_INPUT_FILE ]] && sudo rm -f $NEWS_BRIEF_CONCAT_INPUT_FILE
for CLIP in header_global bbc header_local monitor footer
do

if [[ -e $NEWS_BRIEF_CONCAT_DIR/${CLIP}.mp3 ]];
then
cat >> $NEWS_BRIEF_CONCAT_INPUT_FILE <<ET
file '$NEWS_BRIEF_CONCAT_DIR/${CLIP}.mp3'
ET
fi
done

# Merge into one nice file
$FFMPEG_CMD $FFMPEG_OPTS -nostdin -loglevel quiet -y -f concat -safe 0 -i $NEWS_BRIEF_CONCAT_INPUT_FILE -c copy $NEWS_BRIEF_FILE
fi

# Play audio  
if [[ "$PLAY_AUDIO" != "no" ]];
then
# Log
[[ "$FETCHED_NEWS" = "no" ]] || logger -s -t $(basename $0) "Playing today's news headlines ..."
# Play
$SOUNDS_TOOL alert $NEWS_BRIEF_ALERT_SOUND gain=$SOUNDS_VOLUME_LEVEL
#
# Remove this non-news file since we do not want it to be replayed if still fresh
[[ "$FETCHED_NEWS" = "no" ]] && sudo rm -f $NEWS_BRIEF_FILE
fi
}

skill_headlines_stop () {
killall ${FETCH_NEWS_TOOL##*/} && killall ${TEXT2SPEECH_TOOL##*/}
$TEXT2SPEECH_TOOL "" custom "Okay, I will stop reading the news"
touch $TTS_OUTPUT_FILE
}

skill_reminders () {
# If existent, remove audio clip for reminders
[[ -e $REMINDERS_FILE ]] && sudo rm -f $REMINDERS_FILE

# Ensure that reminders exist today before proceeding
if [[ "$REMINDERS_SCHEDULED" != "none" ]];
then

# Copy system sound file for header into tts directory
audio_merge_pre_setup reminders_scheduled.mp3 $REMINDERS_CONCAT_DIR 1

# Remove spaces in reminders file
[[ -e ${REMINDERS_TEMP_FILE}.clean ]] && sudo rm -f ${REMINDERS_TEMP_FILE}.clean
sed '/^$/d' $REMINDERS_TEMP_FILE | sed '/^ /d' > ${REMINDERS_TEMP_FILE}.clean

# Count number of reminders
REMINDERS_NUMBER=$(wc -l ${REMINDERS_TEMP_FILE}.clean | awk '{print $1}')

# Cycle through all reminders
COUNT=2
#
uniq -u ${REMINDERS_TEMP_FILE}.clean | while read REMINDER
do
# Skip blank lines
[[ "x$REMINDER" = "x" ]] && continue
#
# Read todays reminders
$TEXT2SPEECH_TOOL "" custom "$REMINDER" concatenate=yes
audio_merge_pre_setup tts_output.wav $REMINDERS_CONCAT_DIR $COUNT
# Set next count number
let "COUNT = $COUNT + 1"
done

# Create input file used to concatenate audio files
[[ -e $REMINDERS_CONCAT_INPUT_FILE ]] && sudo rm -f $REMINDERS_CONCAT_INPUT_FILE
#
let "COUNT = $REMINDERS_NUMBER + 1"
for CLIP in $(seq 1 $COUNT)
do
cat >> $REMINDERS_CONCAT_INPUT_FILE <<ET
file '$SILENCE_1_SECS_AUDIO_FILE'
file '$REMINDERS_CONCAT_DIR/${CLIP}.mp3'
ET
done

# Merge into one nice file
$FFMPEG_CMD $FFMPEG_OPTS -nostdin -loglevel quiet -y -f concat -safe 0 -i $REMINDERS_CONCAT_INPUT_FILE -c copy $REMINDERS_FILE

# Play audio  
if [[ "$PLAY_AUDIO" != "no" ]];
then
# Log
logger -s -t $(basename $0) "Playing scheduled reminders ..."
# Play
$SOUNDS_TOOL alert $REMINDERS_ALERT_SOUND gain=$SOUNDS_VOLUME_LEVEL
fi

else

REMINDERS=no
# Log
logger -s -t $(basename $0) "No scheduled reminders found"
#
if [[ "$PLAY_AUDIO" != "no" ]];
then
# Play
$SOUNDS_TOOL alert reminders_none_scheduled gain=$SOUNDS_VOLUME_LEVEL
else
# Announce later
cp -f $PROJECT_SYSTEM_SOUNDS_DIR/reminders_none_scheduled.mp3 $REMINDERS_FILE
fi

fi
}

skill_power_outages () {
check_internet_connectivity
#
if [[ "$INTERNET_STATUS_VAL" = "0" ]];
then
POWER_OUTAGE_ONGOING=$($UMEME_OUTAGES_VIA_API_TOOL ongoing $(/usr/bin/jambulatv-homeassistant-secrets umeme_outage_areas) | uniq | sed '/^$/d' | paste -s -d' \n')
else
POWER_OUTAGE_ONGOING="none"
fi
POWER_OUTAGE_TODAY=$($UMEME_OUTAGES_VIA_SCRAPER_TOOL today $(/usr/bin/jambulatv-homeassistant-secrets umeme_outage_areas) | uniq | grep -i -v -e umeme | sed '/^$/d' | paste -s -d' \n')
POWER_OUTAGE_TOMORROW=$($UMEME_OUTAGES_VIA_SCRAPER_TOOL tomorrow $(/usr/bin/jambulatv-homeassistant-secrets umeme_outage_areas) | uniq | grep -i -v -e umeme | sed '/^$/d' | paste -s -d' \n')

# Header
if [[ "$POWER_OUTAGE_ONGOING" != "none" ]];
then
# Copy system sound file for header into tts directory
audio_merge_pre_setup unplanned_emergency_power_outage_currently.mp3 $POWER_OUTAGES_CONCAT_DIR header

elif [[ "$POWER_OUTAGE_TODAY" != "none" ]];
then
# Copy system sound file for header into tts directory
audio_merge_pre_setup planned_power_outage_today.mp3 $POWER_OUTAGES_CONCAT_DIR header

elif [[ "$POWER_OUTAGE_TOMORROW" != "none" ]];
then
# Copy system sound file for header into tts directory
audio_merge_pre_setup planned_power_outage_tomorrow.mp3 $POWER_OUTAGES_CONCAT_DIR header

else
# Copy system sound file for header into tts directory
audio_merge_pre_setup power_outages_no_scheduled.mp3 $POWER_OUTAGES_CONCAT_DIR header
fi

# Create input file used to concatenate audio files
[[ -e $POWER_OUTAGES_CONCAT_INPUT_FILE ]] && sudo rm -f $POWER_OUTAGES_CONCAT_INPUT_FILE
for CLIP in header ongoing today tomorrow
do

if [[ -e $POWER_OUTAGES_CONCAT_DIR/${CLIP}.mp3 ]];
then
cat >> $POWER_OUTAGES_CONCAT_INPUT_FILE <<ET
file '$POWER_OUTAGES_CONCAT_DIR/${CLIP}.mp3'
file '$SILENCE_1_SECS_AUDIO_FILE'
ET
fi

done

# Merge into one nice file
$FFMPEG_CMD $FFMPEG_OPTS -nostdin -loglevel quiet -y -f concat -safe 0 -i $POWER_OUTAGES_CONCAT_INPUT_FILE -c copy $POWER_OUTAGES_FILE

# Play audio  
if [[ "$PLAY_AUDIO" != "no" ]];
then
# Log
logger -s -t $(basename $0) "Playing power outages scheduled ..."
# Play
$SOUNDS_TOOL alert $POWER_OUTAGES_ALERT_SOUND gain=$SOUNDS_VOLUME_LEVEL
fi
}

skill_calendar_events () {
# Calendar events variables
CALENDAR_EVENT_START=$1
CALENDAR_EVENT_END=$2
CALENDAR_EVENT_ASR_PERIOD=$3
CALENDAR_TEXT_2_SPEECH_INPUT_FILE=$(grep '^TEXT2SPEECH_INPUT_FILE' $CALENDAR_EVENTS_TOOL | cut -d '=' -f2 | head -1 | awk {'print $1'})

# Query calendar for events
$CALENDAR_EVENTS_TOOL $CALENDAR_EVENT_START $CALENDAR_EVENT_END

# If no events are found, say it 
[ -s $CALENDAR_TEXT_2_SPEECH_INPUT_FILE ] || \
	$TEXT2SPEECH_TOOL "" custom "No events are scheduled for $CALENDAR_EVENT_ASR_PERIOD" 
# Quit if no events found
[ -s $CALENDAR_TEXT_2_SPEECH_INPUT_FILE ] || exit 0

# Say header message
$TEXT2SPEECH_TOOL "" custom "The following events are scheduled for $CALENDAR_EVENT_ASR_PERIOD"
# Cycle through speech-to-text input file and say event summary
cat $CALENDAR_TEXT_2_SPEECH_INPUT_FILE | while read EVENT_SUMMARY
do
$TEXT2SPEECH_TOOL "" custom "The $EVENT_SUMMARY"
done
# Say footer message
$TEXT2SPEECH_TOOL "" custom "That is all for $CALENDAR_EVENT_ASR_PERIOD"
}

skill_motd () {
# Ensure that message of the day exists before proceeding
if [[ "x$MESSAGE_OF_THE_DAY" != "x" ]];
then
# Add text output for debugging purposes
cat > $MESSAGE_OF_THE_DAY_CONCAT_DIR/motd.txt <<ET
$MESSAGE_OF_THE_DAY]
ET

# Copy system sound file for header into tts directory
audio_merge_pre_setup message_of_the_day_header.mp3 $MESSAGE_OF_THE_DAY_CONCAT_DIR 1

$TEXT2SPEECH_TOOL "" custom "$MESSAGE_OF_THE_DAY" concatenate=yes
audio_merge_pre_setup tts_output.wav $MESSAGE_OF_THE_DAY_CONCAT_DIR 2

# Create input file used to concatenate audio files
[[ -e $MESSAGE_OF_THE_DAY_CONCAT_INPUT_FILE ]] && sudo rm -f $MESSAGE_OF_THE_DAY_CONCAT_INPUT_FILE
for CLIP in $(seq 1 2)
do
cat >> $MESSAGE_OF_THE_DAY_CONCAT_INPUT_FILE <<ET
file '$MESSAGE_OF_THE_DAY_CONCAT_DIR/${CLIP}.mp3'
ET
done

# Merge into one nice file
$FFMPEG_CMD $FFMPEG_OPTS -nostdin -loglevel quiet -y -f concat -safe 0 -i $MESSAGE_OF_THE_DAY_CONCAT_INPUT_FILE -c copy $MESSAGE_OF_THE_DAY_FILE

# Play audio  
if [[ "$PLAY_AUDIO" != "no" ]];
then
# Log
logger -s -t $(basename $0) "Playing today's message of the day ..."
# Play
$SOUNDS_TOOL alert $MESSAGE_OF_THE_DAY_ALERT_SOUND gain=$SOUNDS_VOLUME_LEVEL
fi

else
# Log
logger -s -t $(basename $0) "No message of the day found"
fi
}

skill_flash_briefing_intro () {
# Copy system sound effects file for flash briefing into tts directory
audio_merge_pre_setup flash_briefing.mp3 $ALL_BRIEF_CONCAT_DIR  1

# Copy system sound file for 'flash briefing coming up' into tts directory
audio_merge_pre_setup flash_briefing_coming_up_for_today.mp3 $ALL_BRIEF_CONCAT_DIR 2

# Create input file used to concatenate audio files
[[ -e $ALL_BRIEF_CONCAT_INPUT_FILE ]] && sudo rm -f $ALL_BRIEF_CONCAT_INPUT_FILE 
for CLIP in $(seq 1 2)
do
cat >> $ALL_BRIEF_CONCAT_INPUT_FILE <<ET
file '$ALL_BRIEF_CONCAT_DIR/${CLIP}.mp3'
ET
done

# Merge into one nice file
$FFMPEG_CMD $FFMPEG_OPTS -nostdin -loglevel quiet -y -f concat -safe 0 -i $ALL_BRIEF_CONCAT_INPUT_FILE -c copy $ALL_BRIEF_FILE

# Play audio  
if [[ "$PLAY_AUDIO" != "no" ]];
then
# Log
logger -s -t $(basename $0) "Playing flash briefing intro ..."
# Play
$SOUNDS_TOOL alert $ALL_BRIEF_ALERT_SOUND gain=$SOUNDS_VOLUME_LEVEL
fi
}

skill_flash_briefing_sign_out () {
# Copy system sound effects file for flash briefing into tts directory
audio_merge_pre_setup flash_briefing.mp3 $DAYS_GREETING_CONCAT_DIR  1

# Copy system sound file for 'flash briefing coming up' into tts directory
audio_merge_pre_setup flash_briefing_concluded_for_today.mp3 $DAYS_GREETING_CONCAT_DIR 2

# Copy system sound file for happy day into tts directory
day_of_week=$(date +%A | tr '[:upper:]' '[:lower:]')
audio_merge_pre_setup happy_${day_of_week}.mp3 $DAYS_GREETING_CONCAT_DIR 3

# Create input file used to concatenate audio files
[[ -e $DAYS_GREETING_CONCAT_INPUT_FILE ]] && sudo rm -f $DAYS_GREETING_CONCAT_INPUT_FILE
for CLIP in $(seq 1 3)
do
cat >> $DAYS_GREETING_CONCAT_INPUT_FILE <<ET
file '$DAYS_GREETING_CONCAT_DIR/${CLIP}.mp3'
ET
done

# Merge into one nice file
$FFMPEG_CMD $FFMPEG_OPTS -nostdin -loglevel quiet -y -f concat -safe 0 -i $DAYS_GREETING_CONCAT_INPUT_FILE -c copy $DAYS_GREETING_FILE

# Play audio  
if [[ "$PLAY_AUDIO" != "no" ]];
then
# Log
logger -s -t $(basename $0) "Playing day's signout greeting ..."
# Play
$SOUNDS_TOOL alert $DAYS_GREETING_ALERT_SOUND gain=$SOUNDS_VOLUME_LEVEL
fi
}

skill_flash_briefing_all_merge_audio () {
FLASH_BRIEFING_AUDIO_OUTPUT_FILE=$TMPDIR/flash_briefing_today.mp3
FLASH_BRIEFING_CONCAT_INPUT_FILE=$TMPDIR/input_files_flash_briefing_today.txt

# Create input file used to concatenate audio files
[[ -e $FLASH_BRIEFING_CONCAT_INPUT_FILE ]] && sudo rm -f $FLASH_BRIEFING_CONCAT_INPUT_FILE

# Merge into one single file for texts and later use
cat > $FLASH_BRIEFING_CONCAT_INPUT_FILE <<ET
file '$ALL_BRIEF_FILE'
file '$SILENCE_2_SECS_AUDIO_FILE'
file '$REMINDERS_FILE'
file '$SILENCE_2_SECS_AUDIO_FILE'
file '$POWER_OUTAGES_FILE'
file '$SILENCE_2_SECS_AUDIO_FILE'
file '$WEATHER_REPORT_FILE'
file '$SILENCE_2_SECS_AUDIO_FILE'
file '$NEWS_BRIEF_FILE'
file '$SILENCE_2_SECS_AUDIO_FILE'
file '$MESSAGE_OF_THE_DAY_FILE'
file '$SILENCE_2_SECS_AUDIO_FILE'
file '$DAYS_GREETING_FILE'
ET

# Remove previous briefing
[[ -s $FLASH_BRIEFING_AUDIO_OUTPUT_FILE ]] && sudo rm -f $FLASH_BRIEFING_AUDIO_OUTPUT_FILE
#
$FFMPEG_CMD $FFMPEG_OPTS -nostdin -loglevel quiet -y -f concat -safe 0 -i $FLASH_BRIEFING_CONCAT_INPUT_FILE -c copy $FLASH_BRIEFING_AUDIO_OUTPUT_FILE
}

skill_flash_briefing_play_summaries () {
mqtt_publish_flash_briefing_status reading

# Play each summary with added effect of current music playing as opposed to silence between briefings
for ALERT_SOUND in \
$ALL_BRIEF_ALERT_SOUND \
$REMINDERS_ALERT_SOUND \
$POWER_OUTAGES_ALERT_SOUND \
$WEATHER_REPORT_ALERT_SOUND \
$NEWS_BRIEF_ALERT_SOUND \
$MESSAGE_OF_THE_DAY_ALERT_SOUND \
$DAYS_GREETING_ALERT_SOUND
do
[[ -e $TMPDIR/${ALERT_SOUND}.mp3 ]] && $SOUNDS_TOOL alert $ALERT_SOUND gain=$SOUNDS_VOLUME_LEVEL
sleep 5
done
}

skill_flash_briefing_compile_generate_and_read () {
PREP_STANDBY_ALERT_SOUND=flash_briefing_preparing_for_today_standby

# MQTT alert: Started generation of flash briefing
mqtt_publish_flash_briefing_status started

# Voice Alert: Preparing briefing, standby
$SOUNDS_TOOL alert $PREP_STANDBY_ALERT_SOUND gain=$SOUNDS_VOLUME_LEVEL
	
# Connect to the Internet        
skill_connect_2_internet mifi

# Fetch and compile news headlines
skill_headlines_start

# Fetch weather and generate summery
skill_weather_currently $1 $2

# Get reminders
skill_reminders

# Get power outages info
skill_power_outages

# Generate flash intro
skill_flash_briefing_intro

# Generate MOTD
skill_motd

# Sign out greeting for the day
skill_flash_briefing_sign_out

# Merge all the following summaries into one single audio file. Use it to play later, or send with texts!
# ---
# Flash intro
# Reminders
# Power outages
# Weather
# News
# Read message of the day
# Sign out with today's greeting
# 
skill_flash_briefing_all_merge_audio
	
# Disonnect from the Internet
skill_disconnect_4rm_internet mifi

if [[ -s $FLASH_BRIEFING_AUDIO_OUTPUT_FILE ]];
then

# Play each summary of the briefing
skill_flash_briefing_play_summaries

# MQTT Alert: Flash briefing was succesfully completed
mqtt_publish_flash_briefing_status completed

else
# MQTT Alert: Flash briefing failed
mqtt_publish_flash_briefing_status failed
# Log
logger -s -t $(basename $0) "Failed to prepare flash briefing for today, quitting ..."
exit 0
fi

# Clean up
# -------
# If news or weather was not fetched, nuke associated files and entire briefing that was just generated and read
if [[ "$FETCHED_NEWS" = "no" ]] || [[ "$FETCHED_WEATHER" = "no" ]];
then 
sudo rm -f $NEWS_BRIEF_FILE $WEATHER_REPORT_FILE
sudo rm -f $FLASH_BRIEFING_AUDIO_OUTPUT_FILE
fi
}

skill_flash_briefing_exists_read () {
# MQTT alert: Reading flash briefing
mqtt_publish_flash_briefing_status reading

# Play each summary of the briefing
skill_flash_briefing_play_summaries

# MQTT Alert: Flash briefing was succesfully completed
mqtt_publish_flash_briefing_status completed
}

skill_flash_briefing_all () {
FLASH_BRIEFING_AUDIO_OUTPUT_FILE=$TMPDIR/flash_briefing_today.mp3
FLASH_BRIEFING_ALERT_SOUND=$(echo ${FLASH_BRIEFING_AUDIO_OUTPUT_FILE##*/} | sed 's:.mp3::')
FLASH_BRIEFING_EXPIRY_TIME=3600

# Check freshness of the flash briefing today file
query_and_set_freshness_of_target_file $FLASH_BRIEFING_AUDIO_OUTPUT_FILE $FLASH_BRIEFING_EXPIRY_TIME 
#
if [[ "$TARGET_FILE_IS_FRESH" = "yes" ]];
	then
	# Read the already generated flash briefing today file
	skill_flash_briefing_exists_read

	else
	# Compile and generate flash briefing today file
	skill_flash_briefing_compile_generate_and_read
fi

# Say time - Note unlike other, this must be in realtime, so no concatenation please
skill_time
}

skill_lights_on () {
# Lamp name 
SMARTHOME_HUB_LAMP_NAME="Living Room"
# Turn lamp on
$LIGHTS_TOOL "$SMARTHOME_HUB_LAMP_NAME" on demo
}

skill_lights_off () {
# Lamp name 
SMARTHOME_HUB_LAMP_NAME="Living Room"
# Turn lamp off
$LIGHTS_TOOL "$SMARTHOME_HUB_LAMP_NAME" off demo
}

skill_tv_start () {
# Favorite TV channel
FAVORITE_TV_CHANNEL="NBS TV"
# Play TV channel
$KODI_CONTROLLER_TOOL tv_play_start "$FAVORITE_TV_CHANNEL"
}

skill_tv_play_next () {
$KODI_CONTROLLER_TOOL video_play_next
}

skill_tv_play_previous () {
$KODI_CONTROLLER_TOOL video_play_previous
}

skill_tv_pause_channel () {
$KODI_CONTROLLER_TOOL video_play_pause noreplay
}

skill_tv_unpause_channel () {
$KODI_CONTROLLER_TOOL video_play_pause
}

skill_tv_play_ntv () {
$KODI_CONTROLLER_TOOL tv_play_start "N TV"
}

skill_tv_play_nbs () {
$KODI_CONTROLLER_TOOL tv_play_start "NBS TV"
}

skill_tv_stop () {
$KODI_CONTROLLER_TOOL tv_play_stop
}

skill_tv_record_start_now () {
# TV record status temp file
TV_RECORD_STATUS_FILE=$(grep ^TV_RECORD_STATUS_FILE $KODI_CONTROLLER_TOOL | cut -d '=' -f2 | head -1 | awk {'print $1'} | sed "s:\"::g")
# Check status of tv recording
$KODI_CONTROLLER_TOOL tv_record_status
# Source current TV recording status file
. $TV_RECORD_STATUS_FILE && export TV_RECORDING_CURRENT_STATUS
#
if [ "$TV_RECORDING_CURRENT_STATUS" = "true" ];
then
# Let user know there's already a recording and quit
$TEXT2SPEECH_TOOL "" custom "Am sorry, there is already another recording in progress. To end that recording, please say \"\\pau=1000\\\" STOP RECORDING TV CHANNEL. \"\\pau=1000\\\"  Then repeat your request"
# Quit
exit 0

else
# Record TV channel now
$KODI_CONTROLLER_TOOL tv_record_instant_start
fi
}

skill_tv_record_stop_now () {
# TV record status temp file
TV_RECORD_STATUS_FILE=$(grep ^TV_RECORD_STATUS_FILE $KODI_CONTROLLER_TOOL | cut -d '=' -f2 | head -1 | awk {'print $1'} | sed "s:\"::g")
# Check status of tv recording
$KODI_CONTROLLER_TOOL tv_record_status
# Source current TV recording status file
. $TV_RECORD_STATUS_FILE && export TV_RECORDING_CURRENT_STATUS
#
if [ "$TV_RECORDING_CURRENT_STATUS" = "false" ];
then
# Let user know there's no recording to stop
$TEXT2SPEECH_TOOL "" custom "Am sorry, there is no recording for me to stop"
# Quit
exit 0

else
# Stop recording TV channel now
$KODI_CONTROLLER_TOOL tv_record_instant_stop
fi
}

skill_video_start () {
# Favorite video
FAVORITE_VIDEO="$USER_TV_SHOWS_DIR/Game_of_Thrones/Season_07/Game.of.Thrones.S07E07.The.Dragon.and.the.Wolf.HDTV.H264.mkv"
# Play favorite video
$KODI_CONTROLLER_TOOL video_play_start "$FAVORITE_VIDEO"
}

skill_video_pause () {
$KODI_CONTROLLER_TOOL video_play_pause noreplay
}

skill_video_unpause () {
$KODI_CONTROLLER_TOOL video_play_pause
}

skill_video_play_next () {
$KODI_CONTROLLER_TOOL navigate_down
$KODI_CONTROLLER_TOOL navigate_select
}

skill_video_play_previous () {
$KODI_CONTROLLER_TOOL navigate_up
$KODI_CONTROLLER_TOOL navigate_select
}

skill_video_play_stop () {
$KODI_CONTROLLER_TOOL video_play_stop
}

skill_picture_in_picture_start () {
$PIP_TOOL start
}

skill_picture_in_picture_next () {
$PIP_TOOL next
}

skill_picture_in_picture_previous () {
$PIP_TOOL previous
}

skill_picture_in_picture_pause () {
$PIP_TOOL pause
}

skill_picture_in_picture_unpause () {
$PIP_TOOL unpause
}

skill_picture_in_picture_stop () {
$PIP_TOOL stop
}

skill_youtube_search_start () {
$KODI_CONTROLLER_TOOL addon_play_youtube "$@"
}

skill_youtube_search_stop () {
$KODI_CONTROLLER_TOOL video_play_stop
}

skill_pictures_slideshow_all_start () {
# Run pictures slide show
$KODI_CONTROLLER_TOOL pictures_play_start $USER_PICTURES_DIR
}

skill_pictures_slideshow_stop () {
$KODI_CONTROLLER_TOOL pictures_play_stop
}

skill_music_start () {
# Music playlists using categories
MUSIC_CATEGORY="$@"
case $MUSIC_CATEGORY in
jazz)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_jazz.m3u
;;
gospel)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_gospel.m3u
;;
local)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_local.m3u
;;
lingala)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_lingala.m3u
;;
*)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_jazz.m3u
;;
esac
#
# Remove old playlist
[ -e $MUSIC_PLAYLIST ] && sudo rm -f $MUSIC_PLAYLIST
# Generate playlist - TODO: Cache playlist and refresh periodically
find $(find $USER_MUSIC_DIR -type d -iname $MUSIC_CATEGORY) -type f | grep -E "*(\.mp3|\.mp4|\.wav|\.m4a|\.webm)" | while read SONG
do 
echo "$SONG" >> "$MUSIC_PLAYLIST"
done

# Play requested music category
$KODI_CONTROLLER_TOOL music_play_offline_start "$MUSIC_PLAYLIST" 
}

skill_internet_music_start () {
# Music playlists using categories
ONLINE_MUSIC_STATION="$@"
case $ONLINE_MUSIC_STATION in
jazz_fm_online)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_internet_jazz_fm.m3u
STATION_URL="http://sj64.hnux.com"
;;
east_africa_online)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_internet_east_africa.m3u
STATION_URL="http://www.ophanim.net:8270/"
;;
*)
MUSIC_PLAYLIST=/JambulaTV/Playlists/music_internet_various.m3u
;;
esac
#
# Remove old playlist
[ -e $MUSIC_PLAYLIST ] && sudo rm -f $MUSIC_PLAYLIST
#
# Generate playlist
echo "$STATION_URL" >> "$MUSIC_PLAYLIST"

# Play requested music category
$KODI_CONTROLLER_TOOL music_play_online_start "$MUSIC_PLAYLIST" 
}

skill_music_pause () {
$KODI_CONTROLLER_TOOL music_play_pause noreplay
}

skill_music_unpause () {
$KODI_CONTROLLER_TOOL music_play_pause
}

skill_music_read_playing_now () {
MUSIC_NOW_PLAYING_SONG=$(tail -1 $MUSIC_NOW_PLAYING_FILE | cut -d')' -f2- | sed 's:^ ::g')
# Use text to speech
$TEXT2SPEECH_TOOL "" custom "The song currently playing is. $MUSIC_NOW_PLAYING_SONG"
}

skill_music_download_playing_now () {
$MUSIC_DOWNLOAD_TOOL youtube playing
}

skill_music_download_played_previously () {
$MUSIC_DOWNLOAD_TOOL youtube previous
}

skill_fmradio_start () {
# Change FM radio station
$FMRADIO_STREAMER_TOOL restart "$@"
# Stream FM radio
$KODI_CONTROLLER_TOOL addon_play_fmradio 
}

skill_fmradio_stop () {
$KODI_CONTROLLER_TOOL audio_play_stop
}

skill_music_play_next () {
$KODI_CONTROLLER_TOOL navigate_down
$KODI_CONTROLLER_TOOL navigate_select
}

skill_music_play_previous () {
$KODI_CONTROLLER_TOOL navigate_up
$KODI_CONTROLLER_TOOL navigate_select
}

skill_music_play_stop () {
$KODI_CONTROLLER_TOOL music_play_stop
}

skill_volume_mute_toggle () {
# Get index
SINK_INPUT_INDEX=$(/usr/bin/pactl list | grep -B 19 "application.name = \"Kodi\"" | grep 'Sink Input #' | sed 's:Sink Input #::')
# Toggle mute
/usr/bin/pactl set-sink-input-mute $SINK_INPUT_INDEX toggle
}

skill_volume_increase () {
# Get index
SINK_INPUT_INDEX=$(/usr/bin/pactl list | grep -B 19 "application.name = \"Kodi\"" | grep 'Sink Input #' | sed 's:Sink Input #::')
#
# Current Volume level
SINK_INPUT_VOLUME_CURRENT=$(/usr/bin/pactl list | grep -B 19 "application.name = \"Kodi"\" | grep 'Volume' | awk -F':' {'print $3'} | awk {'print $1'})
#
# Step up by 5% i.e. 3277
let "SINK_INPUT_VOLUME_NEXT = $SINK_INPUT_VOLUME_CURRENT + 3277"
# Increase Volume
pactl set-sink-input-volume $SINK_INPUT_INDEX $SINK_INPUT_VOLUME_NEXT
}

skill_volume_decrease () {
# Get index
SINK_INPUT_INDEX=$(/usr/bin/pactl list | grep -B 19 "application.name = \"Kodi\"" | grep 'Sink Input #' | sed 's:Sink Input #::')
#
# Current Volume level
SINK_INPUT_VOLUME_CURRENT=$(/usr/bin/pactl list | grep -B 19 "application.name = \"Kodi"\" | grep 'Volume' | awk -F':' {'print $3'} | awk {'print $1'})
#
# Step down by 5% i.e. 3277
let "SINK_INPUT_VOLUME_NEXT = $SINK_INPUT_VOLUME_CURRENT - 3277"
# Decrease Volume
pactl set-sink-input-volume $SINK_INPUT_INDEX $SINK_INPUT_VOLUME_NEXT
}

skill_go_home () {
$KODI_CONTROLLER_TOOL navigate_home
}

skill_web_camera_view_play () {
$CAMPLAYER_TOOL play $1 ffplay
}

skill_web_camera_view_stop () {
$CAMPLAYER_TOOL stop
}

skill_internet_data_balance_mifi () {
# Check if MiFi router is alive
MIFI_IP_ADDRESS=$(query_mysql_db mifi_ip_address)
ping -c 1 -W 1 $MIFI_IP_ADDRESS > /dev/null 2>&1
MIFI_REACHEABLE=$?
# If MiFi is up, proceed to query
if [[ "$MIFI_REACHEABLE" = "0" ]];
then
# Add beeps while data stats are fetched
$SOUNDS_TOOL api $TTS_OUTPUT_FILE

# source mifi router login credentials
MIFI_ADMIN_USER=$(query_mysql_db mifi_admin_user)
MIFI_ADMIN_PASS=$(query_mysql_db mifi_admin_pass)
# Source data remaining
DATA_BALANCE_LEFT_MB=$($MIFI_QUERY_TOOL $MIFI_IP_ADDRESS $MIFI_ADMIN_USER $MIFI_ADMIN_PASS data | grep 'Data balance remaining' | head -1 | awk -F':' {'print $2'} | awk {'print $1'} | sed 's:MB: MB:')
DATA_BALANCE_LEFT_PERCENT=$($MIFI_QUERY_TOOL $MIFI_IP_ADDRESS $MIFI_ADMIN_USER $MIFI_ADMIN_PASS data | grep 'Data balance remaining' | tail -1 | awk -F':' {'print $2'} | awk {'print $1'} | cut -d '.' -f1)
DATA_BALANCE_THRESHOLD_LOW=$(grep -Ev '(#.*$)|(^$)' $MIFI_QUERY_TOOL | grep 'DATA_BALANCE_THRESHOLD_LOW=' | cut -d '=' -f2)
fi

# If MiFi is down, or no data fetched
if [[ "$MIFI_REACHEABLE" != "0" || "x$DATA_BALANCE_LEFT_MB" = "x" ]];
then
# Alert using voice
$TEXT2SPEECH_TOOL "" custom "I am sorry, but I failed to get the Internet data balance from your router. Please check that it is powered on"
# quit
exit 0
fi

# If data is above warning threshold
if [[ "$DATA_BALANCE_LEFT_PERCENT" -ge "$DATA_BALANCE_THRESHOLD_LOW" ]];
then
# Only read the balance left
$TEXT2SPEECH_TOOL "" custom "The remaining balance for your Internet data is $DATA_BALANCE_LEFT_MB"

else
# Read balance left and Warn when data is about to run out
$TEXT2SPEECH_TOOL "" custom "The remaining balance for your Internet data is $DATA_BALANCE_LEFT_MB. Please recharge as soon as possible"
fi
}

phone_call_dial () {
# Set phone number variables
PHONE_ENTRY="$1"
PHONE_NUMBER=$(sudo asterisk -x "database show" | grep -w "$PHONE_ENTRY" | awk {'print $1'} | cut -d / -f3 | sed "s:-::g" | sed "s:+::g"| uniq | head -1)
# Set to number if blank
[[ "x$PHONE_NUMBER" = "x" ]] && PHONE_NUMBER=$1
# Ensure phone number is valid i.e. numeric not letters
[[ "$PHONE_NUMBER" =~ ^[0-9]+$ ]] || $TEXT2SPEECH_TOOL custom "I did not find a valid phone number"
# Dial Number
sudo asterisk -rx "console dial $PHONE_NUMBER"
}

phone_call_hangup () {
sudo asterisk -rx "console hangup"
}

skill_connect_2_hotspot () {
sudo $AUTO_WIFI_PROVISION_TOOL &
$TEXT2SPEECH_TOOL "" custom "Please scan the QR Code displayed on the TV Screen to get the Wifi password.  For Android devices, you may connect automatically"
}

skill_display_off () {
#$TEXT2SPEECH_TOOL "" custom "Turning off Display"
. $SCREEN_DISPLAY_TOOL off
}

skill_display_on () {
#$TEXT2SPEECH_TOOL "" custom "Turning on Display"
. $SCREEN_DISPLAY_TOOL on
}

skill_power_off () {
$TEXT2SPEECH_TOOL "" custom "Turning off system"
systemctl poweroff -i
}

skill_stop_running_skill () {
# Text2Speech tool
TTS_PLAY_TOOL=$(basename $(grep ^TTS_PLAY_CMD $TEXT2SPEECH_TOOL | cut -d '=' -f2 | head -1 | awk {'print $1'} | sed "s:\"::g"))
# Get PID of TTS audio
TTS_PID=$(ps auxw | grep -Ev grep | grep $TTS_PLAY_TOOL | grep $TEXT_2_SPEECH_OUTPUT_FILE | awk {'print $2'})
kill $TTS_PID
}

skill_mute_speech_recognition () {
$TEXT2SPEECH_TOOL "" custom "Geeez \"\\pau=1000\\\" Am I that noisy? \"\\pau=1000\\\" OK \"\\pau=500\\\" I will go off line for now"
[ -e $TEXT_2_SPEECH_OUTPUT_FILE ] && sudo rm -f $TEXT_2_SPEECH_OUTPUT_FILE
touch $TEXT_2_SPEECH_OUTPUT_FILE
sudo chattr +i $TEXT_2_SPEECH_OUTPUT_FILE
}

skill_unmute_speech_recognition () {
sudo chattr -i $TEXT_2_SPEECH_OUTPUT_FILE 
[ -e $TEXT_2_SPEECH_OUTPUT_FILE ] && sudo rm -f $TEXT_2_SPEECH_OUTPUT_FILE
$TEXT2SPEECH_TOOL "" custom "You missed me \"\\pau=500\\\" Right? \"\\pau=1000\\\" OK \"\\pau=500\\\"  I am baack"
}

skill_unknown () {
$TEXT2SPEECH_TOOL "" custom "Am sorry, I did not understand what you said"
}
