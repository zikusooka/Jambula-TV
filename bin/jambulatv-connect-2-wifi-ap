#!/bin/sh
# This is a wrapper script used by icinga2 to connect to a wireless access point
# Jambula Labs @copyright 2020-2021 All rights reserved

# Argument from icinga2 script
ICINGA2_AP_STATUS=$@

SCRIPT_RUNNING_FILE=/tmp/connect_2_ap_running
INTERNET_OFF_FILE=/etc/dnsmasq.d/dns_off.conf
SETUP_COMPLETED_FILE=/usr/share/JambulaTV/html/setup/.initial-setup-completed

PING_CMD=/usr/sbin/fping
PING_CMD_OPTS="-l"
HOST_2_PING=MY_HOST_2_PING

# Available in functions file
INTERNET_WIFI_ISP_CONFIG=/etc/JambulaTV/internet-mobile-wifi.cfg
WIFI_INTERFACES_AVAILABLE=$(sudo /usr/sbin/ip link |grep jwlan | wc -l)
# Variable specific to this script
WIFI_SSID=$(grep -i SSID $INTERNET_WIFI_ISP_CONFIG | sed '/^#/d' | cut -d = -f2 | sed 's/"//g')
WIFI_SECURITY_KEY=$(grep -i SECURITY_KEY $INTERNET_WIFI_ISP_CONFIG | sed '/^#/d' | cut -d = -f2 | sed 's/"//g')
OSD_TOOL_CMD="sudo /usr/bin/jambulatv-osd -m"
AP_NOT_FOUND_MSG="WARNING - Wireless Access Point ($WIFI_SSID) Not Available"
AP_FOUND_MSG="Found your WiFi Access Point ($WIFI_SSID). Please wait while I connect to it"
CONNECTED_MSG="Successfully connected to your WiFi Access Point ($WIFI_SSID), Assigning IP Address ..."
INSERT_WIFI_DONGLE_MSG="Please insert your USB Wireless (WiFi) Network Adapter. I will try connecting to $WIFI_SSID shortly ..."

HOSTAPD_CONFIG_FILE=/etc/hostapd/hostapd.conf

# Set WiFi station Interface
WIFI_STATION_INTERFACE=MY_WIFI_STATION_INTERFACE



###############
#  FUNCTIONS  #
###############

# Check if script is already running and internet is off
quit_if_already_running () {

# Check external DNS status
check_external_dns_status 

if [[ -e "$SCRIPT_RUNNING_FILE" ]] && [[ -e "$INTERNET_OFF_FILE" ]];
then
# Remove script running file and continue
rm -f $SCRIPT_RUNNING_FILE

elif [[ -e "$INTERNET_OFF_FILE" ]];
then
logger -s -t $(basename $0) "Internet is Off"
break

elif [[ "$DNS_STATUS" != "0" ]];
then
logger -s -t $(basename $0) "Connecting to the Internet using the WiFi Access Point (MiFi)"
break 

elif [[ ! -e "$SETUP_COMPLETED_FILE" ]];
then
logger -s -t $(basename $0) "Internet is Off"
break

else
# Quit
exit 1
fi
}

add_script_running_file () {
touch $SCRIPT_RUNNING_FILE
}

remove_script_running_file () {
rm -f $SCRIPT_RUNNING_FILE
}

number_of_interfaces () { 
# Quit if less than 2 WiFi devices are detected
if [[ "$WIFI_INTERFACES_AVAILABLE" -lt "2" ]];
then
logger -s -t $(basename $0) "CRITICAL: Sorry, I did not find a second and/or usable WiFi interface "
exit 2
fi
}

check_4_wifi_dongle () {
# Test to see if WiFi stick is present
sudo /usr/bin/iwctl device list | grep ${WIFI_STATION_INTERFACE} > /dev/null 2>&1
WIFI_STICK_PRESENT=$?
#
# Test to see if WiFi stick is now present
until [[ "$WIFI_STICK_PRESENT" = "0" ]];
do
# Display success message on Screen
$OSD_TOOL_CMD "$INSERT_WIFI_DONGLE_MSG"
# Pause while waiting for insertion
sleep 60
# Test to see if WiFi stick is now present
sudo /usr/bin/iwctl device list | grep ${WIFI_STATION_INTERFACE} > /dev/null 2>&1
WIFI_STICK_PRESENT=$?
done
}

scan_4_wifi () {
# Take station UP
sudo /usr/sbin/ip link set $WIFI_STATION_INTERFACE up
# Scan for AP and pick out preferred SSID
DISCOVERED_WIFI_SSID=$(sudo /usr/sbin/iw dev $WIFI_STATION_INTERFACE scan | awk -F': ' '/SSID:/ {print $2}' | grep -i "\b$WIFI_SSID\b")
#
# See if there's a match
if [[ "x$DISCOVERED_WIFI_SSID" = "x" ]];
then
WIFI_FOUND=no
# Notify
logger -s -t $(basename $0) "$AP_NOT_FOUND_MSG"
else
WIFI_FOUND=yes
logger -s -t $(basename $0) "$AP_FOUND_MSG"
fi
export WIFI_FOUND
}

disconnect_4rm_access_point () {
# PIDs
DHCLIENT_PID=$(sudo ps auxw | grep dhclient | grep $WIFI_STATION_INTERFACE | head -1 | awk {'print $2'})

# Kill dhclient
[[ "x$DHCLIENT_PID" = "x" ]] || sudo kill $DHCLIENT_PID >> /dev/null

# Disconnect from Access Point
sudo /usr/bin/iwctl station $WIFI_STATION_INTERFACE disconnect

# Forget previous Access point
sudo /usr/bin/iwctl known-networks list | grep "\b$WIFI_SSID\b" > /dev/null 2>&1
NETWORK_EXISTS=$?
[[ "$NETWORK_EXISTS" = "0" ]] && \
	sudo /usr/bin/iwctl known-networks "$WIFI_SSID" forget

# Flush Wifi station interface
sudo /usr/sbin/ip addr flush dev $WIFI_STATION_INTERFACE 
}

connect_2_access_point () {
# Disconnect any existing WiFi processes
disconnect_4rm_access_point

# Start IWD service if not running
sudo /usr/bin/systemctl -q is-active iwd.service || /usr/bin/systemctl start iwd.service

# Connect to Access Point
sudo /usr/bin/iwctl station $WIFI_STATION_INTERFACE connect "$WIFI_SSID" --passphrase "$WIFI_SECURITY_KEY"

# Do not auto connect
sudo /usr/bin/iwctl known-networks "$WIFI_SSID" set-property AutoConnect no
}

check_link_status () {
# Check link status
WIFI_LINK_STATUS=$(sudo /usr/bin/iwctl station $WIFI_STATION_INTERFACE show | awk '/State/ {print $2}')
#
if [[ "$WIFI_LINK_STATUS" = "disconnected" ]];
then
logger -s -t $(basename $0) "Connection to $WIFI_SSID failed!. Exiting ..."
exit 1

else
# Beep to alert: Connected WiFi AP
/usr/bin/beep

# Display success message on Screen
$OSD_TOOL_CMD "$CONNECTED_MSG"
fi
}

disable_dns_servers_assignment () {
[[ -e /etc/dhcp/dhclient-enter-hooks ]] || \
	cat > /etc/dhcp/dhclient-enter-hooks <<ET
#!/bin/sh
make_resolv_conf () {
:
logger -s -t \$(basename \$0) "Info: JambulaTV will ignore any DNS server IP addresses assigned to \$interface ..."
}
ET

# Make dhclient-enter-hooks script executable
chmod 755 /etc/dhcp/dhclient-enter-hooks
}

get_ip_address () {
# Remove previous/failed dhclient process 
DHCLIENT_FAILED_PID=$(ps auxw | grep dhclient | grep ${WIFI_STATION_INTERFACE} | awk {'print $2'} | tail -1)
# Kill existing dhclient process
[[ "x$DHCLIENT_FAILED_PID" = "x" ]] || kill $DHCLIENT_FAILED_PID
# Clear default route
/usr/sbin/ip route del default
# Disable assignment of DNS servers by Access Point
disable_dns_servers_assignment
# Get IP/Gateway addresses, and other DHCP info (NOTE: Run dhclient in background!)
sudo /sbin/dhclient -H $(hostname -s) -q -cf /dev/null -lf /var/lib/dhclient/dhclient--${WIFI_STATION_INTERFACE}.lease -pf /var/run/dhclient-${WIFI_STATION_INTERFACE}.pid ${WIFI_STATION_INTERFACE}
}

wait_4_ip_address () {
IP_ADDRESS_ASSIGNED=255
# Wait for WiFi interface to be assigned an IP address 
while [[ "$IP_ADDRESS_ASSIGNED" != "0" ]]
do
logger -s -t $(basename $0) "Waiting for WiFi Interface (${WIFI_STATION_INTERFACE}) to be assigned an IP address"
sleep 1
/usr/sbin/ip addr show ${WIFI_STATION_INTERFACE} | grep inet > /dev/null 2>&1
IP_ADDRESS_ASSIGNED=$?
done
}

start_presence_detection_via_mifi () {
if [[ -e $SETUP_COMPLETED_FILE ]] && \
	[[ "$(systemctl is-enabled presence-detection-via-mifi.service)" = "enabled" && \
	"$(systemctl is-active presence-detection-via-mifi.service)" != "active" ]];
then
# Start presence detection using MiFi: Restart systemd unit if enabled but not active
logger -s -t $(basename $0) "Starting Presence Detection using MiFi Router"
systemctl restart presence-detection-via-mifi.service 
fi
}

quit_not_found () {
if [[ $WIFI_FOUND != yes ]];
then
logger -s -t $(basename $0) "$AP_NOT_FOUND_MSG"
exit 1
fi
}

keep_alive () {
$PING_CMD $PING_CMD_OPTS $HOST_2_PING > /dev/null 2>&1 &
}

check_external_dns_status () {
host -W1 $HOST_2_PING > /dev/null 2>&1
DNS_STATUS=$?
}



#################
#  MAIN SCRIPT  #
#################

# Quit if script is already running
quit_if_already_running

# Kill ping if keep_alive function is activated
#killall fping

# Find WiFi interface to be used as station
number_of_interfaces

# Act according to who called this script
case $ICINGA2_AP_STATUS in
OK)
# Add script running file
add_script_running_file
# Started by icinga2
logger -s -t $(basename $0) "Wireless Access Point ($WIFI_SSID) Available"
;;
WARNING)
# Quit script since Icinga2 detects no WiFi AP.  Before though, kill any previous WiFi
# connections
disconnect_4rm_access_point
exit 1
;;
*)
# Scan for WiFi AP If not running via icinga2 i.e. manual
scan_4_wifi
quit_not_found
;;
esac

# Check to see if USB WiFi dongle is inserted
check_4_wifi_dongle

# Go futher if there's available AP
connect_2_access_point
# IMPORTANT: Wait for access point link to settle before checking state
sleep 5
check_link_status
get_ip_address
wait_4_ip_address

# Start presence detection using MiFi: Restart systemd unit if enabled but not active
start_presence_detection_via_mifi

#keep_alive
remove_script_running_file
