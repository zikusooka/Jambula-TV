#!/bin/sh
# Argument from icinga2 script
ICINGA2_AP_STATUS=$@

# Available in functions file
INTERNET_WIFI_ISP_CONFIG=/etc/JambulaTV/internet-mobile-wifi.cfg
WIFI_WPA_CONFIG_FILE=/etc/wpa_supplicant/wpa_supplicant.conf
WIFI_INTERFACES_AVAILABLE=$(sudo iw dev |grep Interface |wc -l)
# Variable specific to this script
WIFI_DRIVER=nl80211
WIFI_SSID=$(grep -i SSID $INTERNET_WIFI_ISP_CONFIG | sed '/^#/d' | cut -d = -f2 | sed 's/"//g')
WIFI_SECURITY_KEY=$(grep -i SECURITY_KEY $INTERNET_WIFI_ISP_CONFIG | sed '/^#/d' | cut -d = -f2 | sed 's/"//g')
OSD_SCRIPT=/usr/bin/jambulatv-osd
AP_FOUND_MSG="Found your WiFi Access Point ($WIFI_SSID). Please wait while I connect to it"
CONNECTED_MSG="Successfully connected to your WiFi Access Point ($WIFI_SSID), Assigning IP Address ..."
INSERT_WIFI_DONGLE_MSG="Please insert your USB Wireless (WiFi) Network Adapter. I will try connecting to $WIFI_SSID shortly ..."

HOSTAPD_CONFIG_FILE=/etc/hostapd/hostapd.conf

# Set WiFi station Interface
WIFI_STATION_INTERFACE=MY_WIFI_STATION_INTERFACE



###############
#  FUNCTIONS  #
###############
check_4_wifi_dongle () {
# Test to see if WiFi stick is now present
iw dev ${WIFI_STATION_INTERFACE} info > /dev/null 2>&1
WIFI_STICK_PRESENT=$?
until [ "$WIFI_STICK_PRESENT" = "0" ];
do
# Display success message on Screen
$OSD_SCRIPT -m "$INSERT_WIFI_DONGLE_MSG"
# Pause while waiting for insertion
sleep 60
# Test if WiFi stick is now present
iw dev ${WIFI_STATION_INTERFACE} info > /dev/null 2>&1
WIFI_STICK_PRESENT=$?
done
}

number_of_interfaces () { 
# Quit if less than 2 WiFi devices are detected
if [ "$WIFI_INTERFACES_AVAILABLE" -lt "2" ];
then
echo "CRITICAL: Sorry, WiFi dual Interface mode is not supported"
exit 2
fi
}

scan_4_wifi () {
# Take station UP
sudo ip link set $WIFI_STATION_INTERFACE up
#
# Scan for AP, and get scanned SSID
sudo iw dev $WIFI_STATION_INTERFACE scan | grep "SSID: $WIFI_SSID" | cut -d : -f2 | awk {'print $1'}
# See if there's a match
if [[ $? = 0 ]];
then
WIFI_FOUND=yes
# Notify
echo "$AP_FOUND_MSG"
else
WIFI_FOUND=no
fi
export WIFI_FOUND
}

reset_hostapd_channel () {
# Get channel number
WIFI_CHANNEL=$(sudo iw dev $WIFI_STATION_INTERFACE scan  | grep -A2 "SSID: $WIFI_SSID" | grep 'DS Parameter set' | cut -d : -f2 | awk {'print $2'})
# Replace existing channel number
sed -i "/^channel=/d" $HOSTAPD_CONFIG_FILE
echo "channel=$WIFI_CHANNEL" >> $HOSTAPD_CONFIG_FILE
sudo systemctl restart hostapd.service
}

disconnect_4rm_access_point () {
# PIDs
DHCLIENT_PID=$(sudo ps auxw | grep dhclient | grep $WIFI_STATION_INTERFACE | head -1 | awk {'print $2'})
WPA_SUPPLICANT_PID=$(sudo ps auxw | grep wpa_supplicant | grep $WIFI_STATION_INTERFACE | head -1 | awk {'print $2'})
#
# Kill dhclient
[ "x$DHCLIENT_PID" = "x" ] || sudo kill $DHCLIENT_PID >> /dev/null
# Kill wpa_supplicant
[ "x$WPA_SUPPLICANT_PID" = "x" ] || sudo kill $WPA_SUPPLICANT_PID >> /dev/null
# Flush Wifi station interface
sudo ip addr flush dev $WIFI_STATION_INTERFACE 
#sudo ip link set $WIFI_STATION_INTERFACE down
}

generate_wpa_config () {
grep "ssid=\"$WIFI_SSID\"" $WIFI_WPA_CONFIG_FILE > /dev/null 2>&1
WPA_EXISTS=$?
# Generate a wpa/wpa2 configuration file if not yet set
[ "$WPA_EXISTS" = "0" ] || \
sudo wpa_passphrase "$WIFI_SSID" "$WIFI_SECURITY_KEY" > $WIFI_WPA_CONFIG_FILE
}

connect_2_access_point () {
# Disconnect any existing WiFi processes
disconnect_4rm_access_point
# Connect to HotSpot
sudo wpa_supplicant -B -D $WIFI_DRIVER -i $WIFI_STATION_INTERFACE -c $WIFI_WPA_CONFIG_FILE
}

check_link_status () {
# Check link status
WIFI_LINK_STATUS=$(sudo iw dev $WIFI_STATION_INTERFACE link)
#
echo "WIFI_LINK_STATUS=$WIFI_LINK_STATUS" > /tmp/link_status
#
if [ "$WIFI_LINK_STATUS" = "Not connected." ];
then
echo "Connection to $WIFI_SSID failed!. Exiting ..."
exit 1
else
# Beep to alert: Connected WiFi AP
/usr/bin/beep
# Display success message on Screen
$OSD_SCRIPT -m "$CONNECTED_MSG"
fi
}

get_ip_address () {
# Start dhclient if it is not running
ps auxw | grep dhclient | grep ${WIFI_STATION_INTERFACE} > /dev/null 2>&1
# Get IP Address using dhclient
if [ "$?" != "0" ];
then
# Clear default route
ip route del default
# Get IP Address/Gateway/DNS
echo "Acquiring IP address information ..."
sudo /sbin/dhclient -H $(hostname -s) -q -lf /var/lib/dhclient/dhclient--${WIFI_STATION_INTERFACE}.lease -pf /var/run/dhclient-${WIFI_STATION_INTERFACE}.pid ${WIFI_STATION_INTERFACE}
fi
}

make_this_internet_gateway () {
# Allow IP masquerading through this box
/bin/echo 1 > /proc/sys/net/ipv4/ip_forward
/usr/sbin/iptables -t nat -A POSTROUTING -o ${WIFI_STATION_INTERFACE} -j MASQUERADE
}

quit_not_found () {
if [[ $WIFI_FOUND != yes ]];
then
echo "WARNING - Wireless Access Point ($WIFI_SSID) Not Available"
exit 1
fi
}



#################
#  MAIN SCRIPT  #
#################

# Find WiFi interface to be used as station
number_of_interfaces

# Act according to who called this script
case $ICINGA2_AP_STATUS in
OK)
# Started by icinga2
echo "Wireless Access Point ($WIFI_SSID) Available"
;;
WARNING)
# Quit script since Icinga2 detects no WiFi AP.  Before though, kill any previous WiFi
# connections
disconnect_4rm_access_point
exit 1
;;
*)
# Scan for WiFi AP If not running via icinga2 i.e. manual
scan_4_wifi
quit_not_found
;;
esac


# Reset channel in hostapd.conf to match AP
#reset_hostapd_channel # Restarts hostAPD - Not desirable!!!

# Check to see if USB WiFi dongle is inserted
check_4_wifi_dongle

# Go futher if there's available AP
generate_wpa_config
connect_2_access_point 
sleep 5
check_link_status
get_ip_address
make_this_internet_gateway

# Reload coova-chilli in order to change default gateway device and DNS settings
#/usr/bin/jambulatv-chilli restart
