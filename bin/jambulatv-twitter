#!/bin/sh
# This a wrapper tool for tweet.sh a command line and bash based 
# Twitter client.  Use it to perform various tasks on a specified
# Twitter account e.g. searches for keywords
#
# NOTE: The following Twitter API key, tokens, and secrets
# are required. Sign up at https://apps.twitter.com/
#
# 		CONSUMER_KEY
# 		CONSUMER_SECRET
# 		ACCESS_TOKEN
# 		ACCESS_TOKEN_SECRET
#
# HELP: For a comprehensive list of standard search operators, 
# please visit the following website:
# https://developer.twitter.com/en/docs/tweets/rules-and-filtering/overview/standard-operators 
#
# Jambula Labs @copyright 2019-2020 All rights reserved

# Variables
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_FUNCTIONS_FILE=$PROJECT_SYSTEM_CONF_DIR/functions

# Source install functions
. $PROJECT_FUNCTIONS_FILE

TWITTER_CLIENT_CMD=/usr/bin/tweet.sh
TWITTER_CLIENT_KEYS_FILE=$PROJECT_SYSTEM_CONF_DIR/twitter_client.key
TWITTER_DATE=$(date -u +'%a %b %d')
TWITTER_DATE_YESTERDAY=$(date -u -d yesterday +'%Y-%m-%d')
TWITTER_REPORTS_OUTPUT_FILE=$TMPDIR/twitter_reports_today

TWITTER_VILLAGE_NAME=$1

get_client_keys () {
# Source Twitter client keys file if available
if [[ -e $TWITTER_CLIENT_KEYS_FILE ]];
then
set -a
source $TWITTER_CLIENT_KEYS_FILE
set +a

else
clear
cat <<ET
The Twitter client keys file [$TWITTER_CLIENT_KEYS_FILE] is missing.

Please set up your twitter keys there before proceeding as follows:

MY_SCREEN_NAME=yourscreenname
MY_LANGUAGE=en
CONSUMER_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxx
CONSUMER_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxx
ACCESS_TOKEN=123456-xxxxxxxxxxxxxxxxxxxxxx
ACCESS_TOKEN_SECRET=xxxxxxxxxxxxxxxxxxxxxx

ET
exit 1
fi
}

usage () {
# CLI arguments
clear
if [ "x$TWITTER_VILLAGE_NAME" = "x" ];
then
echo "Usage:  ./`basename $0` [VILLAGE NAME]
"
exit 1
fi
}

pre_start_tasks () {
# Check connectivity to Twitter servers
check_internet_connectivity_ping 0 twitter.com

# Test and see if filtering is going on i.e. ICMP ping requests were blocked 
if [[ "$PING_ICMP_REQUESTS_BLOCKED" = "yes" ]];
then
# Source SSH server variables i.e. credentials
[[ -e $REVERSE_SSH_CONFIG ]] && . $REVERSE_SSH_CONFIG
#
# Start a VPN tunnel using sshuttle
$VPN_TUNNEL_SSHUTTLE_TOOL start $MIDDLEMAN_SSH_SERVER $MIDDLEMAN_SSH_SERVER_PORT $MIDDLEMAN_SSH_SERVER_USER 0.0.0.0/0
fi
}

post_clean_up_tasks () {
# Test and see if filtering is going on i.e. ICMP ping requests were blocked 
if [[ "$PING_ICMP_REQUESTS_BLOCKED" = "yes" ]];
then
# Stop VPN tunnel using sshuttle
$VPN_TUNNEL_SSHUTTLE_TOOL stop
fi
}

extract_newspaper_links () {
# Daily monitor
# ---
DAILY_MONITOR_SEARCH_STRING="Monitor+Today OR Monitor+Tomorrow OR Saturday+Monitor OR Sunday+Monitor OR In+your+copy+of+the+Daily+Monitor"
# 
cat <<ET

Daily Monitor (Uganda)
ET
$TWITTER_CLIENT_CMD search -c 1 -q "from:DailyMonitor since:$TWITTER_DATE_YESTERDAY filter:twimg -filter:retweets $DAILY_MONITOR_SEARCH_STRING" | jq -r '.statuses[] |.created_at,.text' | grep -Eo "(http|https)://[a-zA-Z0-9./?=_-]*" 

# The Observer
# ---
OBSERVER_SEARCH_STRING="In+@observerug: OR In+@observerug+tomorrow: AND >>"
#
cat <<ET

The Observer (Uganda)
ET
$TWITTER_CLIENT_CMD search -c 1 -q "from:observerug since:$TWITTER_DATE_YESTERDAY filter:twimg -filter:retweets $OBSERVER_SEARCH_STRING" | jq -r '.statuses[] |.created_at,.text' | grep -Eo "(http|https)://[a-zA-Z0-9./?=_-]*" 

# New Vision
# ---
NEW_VISION_SEARCH_STRING="TODAY+IN+THE+NEW OR Get+the+details+in OR daily+is+out OR Details+and+more OR Saturday OR Sunday OR Get+yourself+a+copy+of+the AND Vision"
#
cat <<ET

New Vision (Uganda)
ET
$TWITTER_CLIENT_CMD search -c 1 -q "from:newvisionwire since:$TWITTER_DATE_YESTERDAY filter:twimg -filter:retweets $NEW_VISION_SEARCH_STRING" | jq -r '.statuses[] |.created_at,.text' | grep -Eo "(http|https)://[a-zA-Z0-9./?=_-]*" 

# RedPepper
# ---
REDPEPPER_SEARCH_STRING="Edition OR On+The+Stall"
#
cat <<ET

RedPepper (Uganda)
ET
$TWITTER_CLIENT_CMD search -c 1 -q "from:RedPepperUG since:$TWITTER_DATE_YESTERDAY filter:twimg -filter:retweets $REDPEPPER_SEARCH_STRING" | jq -r '.statuses[] |.created_at,.text' | grep -Eo "(http|https)://[a-zA-Z0-9./?=_-]*" 

echo
}

# Water outage reports
water_outage_reports () {
$TWITTER_CLIENT_CMD search -c 2 -q "@nwscug since:$TWITTER_DATE_YESTERDAY $TWITTER_VILLAGE_NAME" | jq -r '.statuses[] |.created_at,.text'
echo
}

# Power outage reports
power_outage_reports () {
$TWITTER_CLIENT_CMD search -c 2 -q "@UmemeLtd since:$TWITTER_DATE_YESTERDAY $TWITTER_VILLAGE_NAME" | jq -r '.statuses[] |.created_at,.text'
echo
}

# Power outage alerts
power_outage_alerts () {
$TWITTER_CLIENT_CMD search -c 2 -q "from:UmemeLtd since:$TWITTER_DATE_YESTERDAY Outage Alert OR token generation" | jq -r '.statuses[] |.created_at,.text'
echo
}

# Power outage alerts - UETCL
power_outage_alerts_uetcl () {
$TWITTER_CLIENT_CMD search -c 2 -q "from:uetcl since:$TWITTER_DATE_YESTERDAY @UmemeLtd @ERA_Uganda @ntvuganda @nbstv @newvisionwire @ubctvuganda" | jq -r '.statuses[] |.created_at,.text'
echo
}



#################
#  MAIN SCRIPT  #
#################

# Source keys file
get_client_keys

# Usage
usage

# Post clean up tasks
trap post_clean_up_tasks EXIT

# Pre start tasks
pre_start_tasks 

# Create temp output file
cat > $TWITTER_REPORTS_OUTPUT_FILE <<ET

*NEWS PAPERS TODAY*
$(extract_newspaper_links)


*WATER REPORTS ($TWITTER_VILLAGE_NAME)*
$(water_outage_reports)


*POWER REPORTS ($TWITTER_VILLAGE_NAME)*
$(power_outage_reports)


*UMEME ALERTS (Everywhere)*
$(power_outage_alerts)


*UETCL ALERTS (Kampala)*
$(power_outage_alerts_uetcl)

ET

# Print output
clear
cat $TWITTER_REPORTS_OUTPUT_FILE
