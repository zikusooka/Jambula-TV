#!/bin/sh
# This script controls volume levels for specified home speakers
#
# Jambula Labs @copyright 2019-2020 All rights reserved

# Variables
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_FUNCTIONS_FILE=$PROJECT_SYSTEM_CONF_DIR/functions

# Source install functions
. $PROJECT_FUNCTIONS_FILE

SPEAKER_VOLUME_TYPE=$1
SPEAKER_VOLUME_LOCATION=$2
SPEAKER_VOLUME_LEVEL=$3

# PID files for streamer tools
FMRADIO_STREAMER_PID_FILE=$TMPDIR/fmradio_process_ids
WEBRADIO_STREAMER_PID_FILE=$TMPDIR/webradio_process_ids

PACTL_CMD=/usr/bin/pactl

MPC_CMD=/usr/bin/mpc
MPD_LOCAL_PORT=$MPD_PORT



###############
#  FUNCTIONS  #
###############
usage_all () {
# Quit if there are missing CLI arguments
if [[ "xSPEAKER_VOLUME_TYPE" = "x" || "x$SPEAKER_VOLUME_LOCATION" = "x" || "x$SPEAKER_VOLUME_LEVEL" = "x" ]];
then
clear
cat <<EOT
Usage: ./$(basename $0) [SPEAKER_VOLUME_TYPE] [SPEAKER_VOLUME_LOCATION] [SPEAKER_VOLUME_LEVEL]

Example: 
./$(basename $0) [fmradio|webradio|all] localhost [100%|mute|unmute]

EOT
exit 1
fi
}


# MPD
# ---
mpd_check_status () {
# Check status of MPD server
$MPC_CMD -q -h localhost -p $MPD_LOCAL_PORT status > /dev/null 2>&1
MPC_EXIT_STATUS=$?
}

toggle_volume_mpd_localhost () {
# Control MPD server volume
$MPC_CMD -q -h localhost -p $MPD_LOCAL_PORT volume $1
}


# FM Radio
# --------
toggle_volume_fmradio_localhost () {
# toggle/unmute volume using MPD if its server is running 
mpd_check_status
if [[ "$MPC_EXIT_STATUS" = "0" ]];
then
toggle_volume_mpd_localhost 100

else
# Toggle volume i.e. unmute
[[ -e $FMRADIO_STREAMER_PID_FILE ]] && \
$PACTL_CMD set-sink-input-mute $($PACTL_CMD list | grep -B20 $(awk {'print $1'} $FMRADIO_STREAMER_PID_FILE) | grep 'Sink Input #' | sed 's:Sink Input #::') toggle
fi
}

mute_volume_fmradio_localhost () {
# Mute volume using mpd if its server is running 
mpd_check_status
if [[ "$MPC_EXIT_STATUS" = "0" ]];
then
toggle_volume_mpd_localhost 0

else
# If volume for FM radio is not muted, mute it
[[ -e $FMRADIO_STREAMER_PID_FILE ]] && \
FMRADIO_VOLUME_MUTED=$($PACTL_CMD list | grep -B20 $(awk {'print $1'} $FMRADIO_STREAMER_PID_FILE) | grep -i Mute | awk -F': ' {'print $2'})
[[ "$FMRADIO_VOLUME_MUTED" = "yes" ]] || toggle_volume_fmradio_localhost
fi
}

adjust_volume_fmradio_localhost () {
# Adjust volume using MPD if its server is running 
mpd_check_status
case $MPC_EXIT_STATUS in
0)
toggle_volume_mpd_localhost $(echo $SPEAKER_VOLUME_LEVEL | sed 's:%::')
;;

*)
# If volume for FM radio is muted, unmute it
[[ -e $FMRADIO_STREAMER_PID_FILE ]] && \
FMRADIO_VOLUME_MUTED=$($PACTL_CMD list | grep -B20 $(awk {'print $1'} $FMRADIO_STREAMER_PID_FILE) | grep -i Mute | awk -F': ' {'print $2'})
if [[ "$FMRADIO_VOLUME_MUTED" = "yes" ]];
then
toggle_volume_fmradio_localhost
else
[[ -e $FMRADIO_STREAMER_PID_FILE ]] && \
$PACTL_CMD set-sink-input-volume $($PACTL_CMD list | grep -B20 $(awk {'print $1'} $FMRADIO_STREAMER_PID_FILE) | grep 'Sink Input #' | sed 's:Sink Input #::') $SPEAKER_VOLUME_LEVEL
fi
;;
esac
}

control_volume_fmradio () {
case $SPEAKER_VOLUME_LOCATION in
# Control volume of fm radio for speakers at localhost
localhost)
# If volume level is set at '0' then assume 'mute' has been requested
if [[ "$SPEAKER_VOLUME_LEVEL" = "0" ]];
then
# Mute volume for fmradio
mute_volume_fmradio_localhost
else
# Increase/Decrease volume for fmradio
adjust_volume_fmradio_localhost
fi
;;

# Control volume of fm radio for speakers at remote host
192.168.x.x)
:
;;
esac
}


# Internet Radio
# --------------
toggle_volume_webradio_localhost () {
# toggle/unmute volume using MPD if its server is running 
mpd_check_status
if [[ "$MPC_EXIT_STATUS" = "0" ]];
then
toggle_volume_mpd_localhost 100

else
[[ -e $WEBRADIO_STREAMER_PID_FILE ]] && \
$PACTL_CMD set-sink-input-mute $($PACTL_CMD list | grep -B20 $(awk {'print $1'} $WEBRADIO_STREAMER_PID_FILE) | grep 'Sink Input #' | sed 's:Sink Input #::') toggle
fi
}

mute_volume_webradio_localhost () {
# Mute volume using mpd if its server is running 
mpd_check_status
if [[ "$MPC_EXIT_STATUS" = "0" ]];
then
toggle_volume_mpd_localhost 0

else
# If volume for Internet radio is not muted, mute it
[[ -e $WEBRADIO_STREAMER_PID_FILE ]] && \
WEBRADIO_VOLUME_MUTED=$($PACTL_CMD list | grep -B20 $(awk {'print $1'} $WEBRADIO_STREAMER_PID_FILE) | grep -i Mute | awk -F': ' {'print $2'})
[[ "$WEBRADIO_VOLUME_MUTED" = "yes" ]] || toggle_volume_webradio_localhost
fi
}

adjust_volume_webradio_localhost () {
# Adjust volume using MPD if its server is running 
mpd_check_status
case $MPC_EXIT_STATUS in
0)
toggle_volume_mpd_localhost $(echo $SPEAKER_VOLUME_LEVEL | sed 's:%::')
;;

*)
# If volume for Internet radio is muted, unmute it
[[ -e $WEBRADIO_STREAMER_PID_FILE ]] && \
WEBRADIO_VOLUME_MUTED=$($PACTL_CMD list | grep -B20 $(awk {'print $1'} $WEBRADIO_STREAMER_PID_FILE) | grep -i Mute | awk -F': ' {'print $2'})
if [[ "$WEBRADIO_VOLUME_MUTED" = "yes" ]];
then
toggle_volume_webradio_localhost
else
[[ -e $WEBRADIO_STREAMER_PID_FILE ]] && \
$PACTL_CMD set-sink-input-volume $($PACTL_CMD list | grep -B20 $(awk {'print $1'} $WEBRADIO_STREAMER_PID_FILE) | grep 'Sink Input #' | sed 's:Sink Input #::') $SPEAKER_VOLUME_LEVEL
fi
;;
esac
}

control_volume_webradio () {
case $SPEAKER_VOLUME_LOCATION in
# Control volume of internet radio for speakers at localhost
localhost)
# If volume level is set at '0' then assume 'mute' has been requested
if [[ "$SPEAKER_VOLUME_LEVEL" = "0" ]];
then
# Mute volume for webradio
mute_volume_webradio_localhost
else
# Increase/Decrease volume for webradio
adjust_volume_webradio_localhost
fi
;;

# Control volume of internet radio for speakers at remote host
192.168.x.x)
:
;;
esac
}



#################
#  MAIN SCRIPT  #
#################
# Usage for all
usage_all

# Volume control
case $SPEAKER_VOLUME_TYPE in

fmradio)
if [[ "$SPEAKER_VOLUME_LEVEL" = "mute" ]];
then
# Mute FM radio volume
mute_volume_fmradio_localhost

elif [[ "$SPEAKER_VOLUME_LEVEL" = "unmute" ]];
then
# Unmute FM radio volume
toggle_volume_fmradio_localhost 

else
control_volume_fmradio
fi
;;

webradio)
if [[ "$SPEAKER_VOLUME_LEVEL" = "mute" ]];
then
# Mute Internet radio volume
mute_volume_webradio_localhost

elif [[ "$SPEAKER_VOLUME_LEVEL" = "unmute" ]];
then
# Unmute Internet radio volume
toggle_volume_webradio_localhost

else
control_volume_webradio
fi
;;

all)
if [[ "$SPEAKER_VOLUME_LEVEL" = "mute" ]];
then
# Mute all volumes
mute_volume_fmradio_localhost
mute_volume_webradio_localhost

elif [[ "$SPEAKER_VOLUME_LEVEL" = "unmute" ]];
then
# Unmute all volumes
toggle_volume_fmradio_localhost 
toggle_volume_webradio_localhost

else
control_volume_fmradio
control_volume_webradio
fi
;;

esac
