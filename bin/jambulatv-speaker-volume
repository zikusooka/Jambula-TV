#!/bin/sh
# This script controls volume levels for specified home speakers
#
# Jambula Labs @copyright 2020-2021 All rights reserved

# Variables
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_FUNCTIONS_FILE=$PROJECT_SYSTEM_CONF_DIR/functions

# Source install functions
. $PROJECT_FUNCTIONS_FILE

SPEAKER_VOLUME_TYPE=$1
SPEAKER_VOLUME_LOCATION=$2
SPEAKER_VOLUME_LEVEL=$3

# PID files for streamer tools
FMRADIO_STREAMER_PID_FILE=$TMPDIR/fmradio_process_ids
WEBRADIO_STREAMER_PID_FILE=$TMPDIR/webradio_process_ids

PACTL_CMD=/usr/bin/pactl

MPC_CMD=/usr/bin/mpc
MPD_LOCAL_PORT=$MPD_PORT



###############
#  FUNCTIONS  #
###############
usage_all () {
# Quit if there are missing CLI arguments
if [[ "xSPEAKER_VOLUME_TYPE" = "x" || "x$SPEAKER_VOLUME_LOCATION" = "x" || "x$SPEAKER_VOLUME_LEVEL" = "x" ]];
then
clear
cat <<EOT
Usage: ./$(basename $0) [SPEAKER_VOLUME_TYPE] [SPEAKER_VOLUME_LOCATION] [SPEAKER_VOLUME_LEVEL or STATUS]

Example: 
./$(basename $0) [fmradio|webradio|jtvradio|system|all] localhost [100%|mute|unmute|status]

EOT
exit 1
fi
}

# Snapcast
# --------
snapcast_check_status () {
# Check status of snapcast client
ps auxw | grep snapclient | grep pulse > /dev/null 2>&1
SNAPCLIENT_EXIT_STATUS=$?
}

get_sink_input_index_snapcast () {
SINK_INPUT_INDEX=$($PACTL_CMD list sink-inputs | grep -B25 'application.process.binary = \"snapclient\"' | grep 'Sink Input #' | sed 's:Sink Input #::')
}

set_sink_input_mute_snapcast_localhost () {
get_sink_input_index_snapcast
[[ "x$SINK_INPUT_INDEX" = "x" ]] || $PACTL_CMD set-sink-input-mute $SINK_INPUT_INDEX $1
}

set_sink_input_volume_snapcast_localhost () {
get_sink_input_index_snapcast
[[ "x$SINK_INPUT_INDEX" = "x" ]] || $PACTL_CMD set-sink-input-volume $SINK_INPUT_INDEX $SPEAKER_VOLUME_LEVEL
}

# MPD
# ---
mpd_check_status () {
# Check status of MPD server
$MPC_CMD -q -h localhost -p $MPD_LOCAL_PORT status > /dev/null 2>&1
MPC_EXIT_STATUS=$?
}

set_sink_input_mute_mpd_localhost () {
# Control MPD server volume
$MPC_CMD -q -h localhost -p $MPD_LOCAL_PORT volume $1
}

set_sink_input_volume_mpd_localhost () {
# Control MPD server volume
$MPC_CMD -q -h localhost -p $MPD_LOCAL_PORT volume $(echo $SPEAKER_VOLUME_LEVEL | sed 's:%::')
}

# MPlayer
# -------
get_sink_input_index_mplayer () {
SINK_INPUT_INDEX=$($PACTL_CMD list sink-inputs | grep -B40 -e 'application.process.binary = \"mplayer\"' -e 'application.process.binary = \"vlc\"' -e 'application.process.binary = \"ffplay\"' | grep 'Sink Input #' | sed 's:Sink Input #::')
}

set_sink_input_mute_mplayer_localhost () {
get_sink_input_index_mplayer
[[ "x$SINK_INPUT_INDEX" = "x" ]] || $PACTL_CMD set-sink-input-mute $SINK_INPUT_INDEX $1
}

set_sink_input_volume_mplayer_localhost () {
get_sink_input_index_mplayer
[[ "x$SINK_INPUT_INDEX" = "x" ]] || $PACTL_CMD set-sink-input-volume $SINK_INPUT_INDEX $SPEAKER_VOLUME_LEVEL
}

# System
# ------
check_pulse_sinks_status () {
$PACTL_CMD list sinks | grep 'Driver: module-alsa-card.c' > /dev/null 2>&1
PULSE_SINK_STATUS=$?
}

check_pulse_sinks_volume_mute_status () {
check_pulse_sinks_status
[[ "$PULSE_SINK_STATUS" = "0" ]] && \
SYSTEM_VOLUME_MUTED=$($PACTL_CMD list sinks | grep -A8 'Driver: module-alsa-card.c' | awk -F': ' '/Mute/ {print $2}')
}

get_sink_index_system () {
check_pulse_sinks_status
[[ "$PULSE_SINK_STATUS" = "0" ]] && \
SINK_INDEX=$($PACTL_CMD list sinks | grep -B8 'Driver: module-alsa-card.c' | awk -F'#' '/Sink #/ {print $2}')
}

set_sink_mute_system_localhost () {
get_sink_index_system 
[[ "x$SINK_INDEX" = "x" ]] || $PACTL_CMD set-sink-mute $SINK_INDEX $1
}

set_sink_volume_system_localhost () {
get_sink_index_system 
[[ "x$SINK_INDEX" = "x" ]] || $PACTL_CMD set-sink-volume $SINK_INDEX $SPEAKER_VOLUME_LEVEL
}


# --------------
# App selection
# --------------
app_used_localhost () {
snapcast_check_status
mpd_check_status
if [[ "$SNAPCLIENT_EXIT_STATUS" = "0" ]];
then
APP_USED_TO_PLAY=snapcast
elif [[ "$MPC_EXIT_STATUS" = "0" ]];
then
APP_USED_TO_PLAY=mpd
else
APP_USED_TO_PLAY=mplayer
fi
}


# ---------
# FM Radio
# ---------
unmute_volume_fmradio_localhost () {
if [[ "$APP_USED_TO_PLAY" = "snapcast" ]];
then
# toggle/unmute volume using snapcast if it is running 
set_sink_input_mute_snapcast_localhost 0

elif [[ "$APP_USED_TO_PLAY" = "mpd" ]];
then
# toggle/unmute volume using MPD if it is running 
set_sink_input_mute_mpd_localhost 100

elif [[ "$APP_USED_TO_PLAY" = "mplayer" ]];
then
# toggle/unmute volume using mplayer if it is running 
[[ -e $FMRADIO_STREAMER_PID_FILE ]] && \
set_sink_input_mute_mplayer_localhost 0

fi
}

mute_volume_fmradio_localhost () {
if [[ "$APP_USED_TO_PLAY" = "snapcast" ]];
then
# Mute volume using snapcast if it is running
set_sink_input_mute_snapcast_localhost 1

elif [[ "$APP_USED_TO_PLAY" = "mpd" ]];
then
# Mute volume using mpd if it is running 
set_sink_input_mute_mpd_localhost 0

elif [[ "$APP_USED_TO_PLAY" = "mplayer" ]];
then
# If volume for FM radio is not muted, mute it
[[ -e $FMRADIO_STREAMER_PID_FILE ]] && \
FMRADIO_VOLUME_MUTED=$($PACTL_CMD list | grep -B20 $(awk {'print $1'} $FMRADIO_STREAMER_PID_FILE) | grep -i Mute | awk -F': ' {'print $2'})
[[ "$FMRADIO_VOLUME_MUTED" = "yes" ]] || 
set_sink_input_mute_mplayer_localhost 1

fi
}

adjust_volume_fmradio_localhost () {
if [[ "$APP_USED_TO_PLAY" = "snapcast" ]];
then
# Adjust volume using snapcast if its server is running 
set_sink_input_volume_snapcast_localhost $SPEAKER_VOLUME_LEVEL

elif [[ "$APP_USED_TO_PLAY" = "mpd" ]];
then
# Adjust volume using MPD if its server is running 
set_sink_input_volume_mpd_localhost 

elif [[ "$APP_USED_TO_PLAY" = "mplayer" ]];
then
# If volume for FM radio is muted, unmute it
[[ -e $FMRADIO_STREAMER_PID_FILE ]] && \
FMRADIO_VOLUME_MUTED=$($PACTL_CMD list | grep -B20 $(awk {'print $1'} $FMRADIO_STREAMER_PID_FILE) | grep -i Mute | awk -F': ' {'print $2'})
if [[ "$FMRADIO_VOLUME_MUTED" = "yes" ]];
then
unmute_volume_fmradio_localhost
fi
# If there's a volume level specified, adjust volume accordingly
if [[ -e $FMRADIO_STREAMER_PID_FILE ]] && [[ "x$SPEAKER_VOLUME_LEVEL" != "x" ]];
then
set_sink_input_volume_mplayer_localhost $SPEAKER_VOLUME_LEVEL
fi

fi
}

control_volume_fmradio () {
case $SPEAKER_VOLUME_LOCATION in
# Control volume of fm radio for speakers at localhost
localhost)
# If volume level is set at '0' then assume 'mute' has been requested
if [[ "$SPEAKER_VOLUME_LEVEL" = "0" || "$SPEAKER_VOLUME_LEVEL" = "0%" ]];
then
# Mute volume for fmradio
mute_volume_fmradio_localhost
else
# Increase/Decrease volume for fmradio
adjust_volume_fmradio_localhost
fi
;;

# Control volume of fm radio for speakers at remote host
192.168.x.x)
:
;;
esac
}

status_volume_fmradio () {
case $SPEAKER_VOLUME_LOCATION in
# Status of volume for fm radio on speakers at localhost
localhost)
$PACTL_CMD list sink-inputs | grep -i -e snapclient -e mpd -e mplayer -e vlc -e ffplay > /dev/null 2>&1
PULSE_SINK_INPUT_STATUS=$?
if [[ "$PULSE_SINK_INPUT_STATUS" = "0" ]] && [[ -e $FMRADIO_STREAMER_PID_FILE ]];
then
FMRADIO_VOLUME=$($PACTL_CMD list sink-inputs | grep -B20 -i -e snapclient -e mpd -e mplayer -e vlc -e ffplay | awk '/Volume/ {print $5}')
cat <<ET
-----------------------------
FM Radio
-----------------------------
Status	:	Active
Volume	:	$FMRADIO_VOLUME

ET

else
cat <<ET
-----------------------------
FM Radio
-----------------------------
Status	:	Idle

ET
fi
;;

# Status of volume for fm radio on speakers at remote host
192.168.x.x)
:
;;
esac
}


# ---------------
# Internet Radio
# ---------------
unmute_volume_webradio_localhost () {
if [[ "$APP_USED_TO_PLAY" = "snapcast" ]];
then
# toggle/unmute volume using snapcast if it is running 
set_sink_input_mute_snapcast_localhost 0

elif [[ "$APP_USED_TO_PLAY" = "mpd" ]];
then
# toggle/unmute volume using MPD if it is running 
set_sink_input_mute_mpd_localhost 100

elif [[ "$APP_USED_TO_PLAY" = "mplayer" ]];
then
# toggle/unmute volume using mplayer if it is running 
[[ -e $WEBRADIO_STREAMER_PID_FILE ]] && \
set_sink_input_mute_mplayer_localhost 0

fi
}

mute_volume_webradio_localhost () {
if [[ "$APP_USED_TO_PLAY" = "snapcast" ]];
then
# Mute volume using snapcast if it is running 
set_sink_input_mute_snapcast_localhost 1

elif [[ "$APP_USED_TO_PLAY" = "mpd" ]];
then
# Mute volume using mpd if it is running 
set_sink_input_mute_mpd_localhost 0

elif [[ "$APP_USED_TO_PLAY" = "mplayer" ]];
then
# If volume for Internet radio is not muted, mute it
[[ -e $WEBRADIO_STREAMER_PID_FILE ]] && \
WEBRADIO_VOLUME_MUTED=$($PACTL_CMD list | grep -B20 $(awk {'print $1'} $WEBRADIO_STREAMER_PID_FILE) | grep -i Mute | awk -F': ' {'print $2'})
[[ "$WEBRADIO_VOLUME_MUTED" = "yes" ]] || set_sink_input_mute_mplayer_localhost 1

fi
}

adjust_volume_webradio_localhost () {
if [[ "$APP_USED_TO_PLAY" = "snapcast" ]];
then
# Adjust volume using snapcast if its server is running 
set_sink_input_volume_snapcast_localhost $SPEAKER_VOLUME_LEVEL

elif [[ "$APP_USED_TO_PLAY" = "mpd" ]];
then
# Adjust volume using MPD if its server is running 
set_sink_input_volume_mpd_localhost

elif [[ "$APP_USED_TO_PLAY" = "mplayer" ]];
then
# If volume for Internet radio is muted, unmute it
[[ -e $WEBRADIO_STREAMER_PID_FILE ]] && \
WEBRADIO_VOLUME_MUTED=$($PACTL_CMD list | grep -B20 $(awk {'print $1'} $WEBRADIO_STREAMER_PID_FILE) | grep -i Mute | awk -F': ' {'print $2'})
if [[ "$WEBRADIO_VOLUME_MUTED" = "yes" ]];
then
unmute_volume_webradio_localhost
fi
# If there's a volume level specified, adjust volume accordingly
if [[ -e $WEBRADIO_STREAMER_PID_FILE ]] && [[ "x$SPEAKER_VOLUME_LEVEL" != "x" ]];
then
set_sink_input_volume_mplayer_localhost $SPEAKER_VOLUME_LEVEL
fi

fi
}

control_volume_webradio () {
case $SPEAKER_VOLUME_LOCATION in
# Control volume of web radio for speakers at localhost
localhost)
# If volume level is set at '0' then assume 'mute' has been requested
if [[ "$SPEAKER_VOLUME_LEVEL" = "0" || "$SPEAKER_VOLUME_LEVEL" = "0%" ]];
then
# Mute volume for webradio
mute_volume_webradio_localhost
else
# Increase/Decrease volume for webradio
adjust_volume_webradio_localhost
fi
;;

# Control volume of web radio for speakers at remote host
192.168.x.x)
:
;;
esac
}

status_volume_webradio () {
case $SPEAKER_VOLUME_LOCATION in
# Status of volume for Internet radio on speakers at localhost
localhost)
$PACTL_CMD list sink-inputs | grep -i -e snapclient -e mpd -e mplayer -e vlc -e ffplay > /dev/null 2>&1
PULSE_SINK_INPUT_STATUS=$?
if [[ "$PULSE_SINK_INPUT_STATUS" = "0" ]] && [[ -e $WEBRADIO_STREAMER_PID_FILE ]];
then
WEBRADIO_VOLUME=$($PACTL_CMD list sink-inputs | grep -B20 -i -e snapclient -e mpd -e mplayer -e vlc -e ffplay | awk '/Volume/ {print $5}')
cat <<ET
-----------------------------
Internet Radio
-----------------------------
Status	:	Active
Volume	:	$WEBRADIO_VOLUME

ET

else
cat <<ET
-----------------------------
Internet Radio
-----------------------------
Status	:	Idle

ET
fi
;;

# Status of volume for Internet radio on speakers at remote host
192.168.x.x)
:
;;
esac
}


# -----------------------------------
# JambulaTV Radio (File based player)
# -----------------------------------
unmute_volume_jtvradio_localhost () {
if [[ "$APP_USED_TO_PLAY" = "snapcast" ]];
then
# toggle/unmute volume using snapcast if it is running 
set_sink_input_mute_snapcast_localhost 0

elif [[ "$APP_USED_TO_PLAY" = "mpd" ]];
then
# toggle/unmute volume using MPD if it is running 
set_sink_input_mute_mpd_localhost 100

elif [[ "$APP_USED_TO_PLAY" = "mplayer" ]];
then
# toggle/unmute volume using mplayer if it is running 
set_sink_input_mute_mplayer_localhost 0

fi
}

mute_volume_jtvradio_localhost () {
if [[ "$APP_USED_TO_PLAY" = "snapcast" ]];
then

# Mute volume using snapcast if it is running 
set_sink_input_mute_snapcast_localhost 1

elif [[ "$APP_USED_TO_PLAY" = "mpd" ]];
then
# Mute volume using mpd if it is running 
set_sink_input_mute_mpd_localhost 0

elif [[ "$APP_USED_TO_PLAY" = "mplayer" ]];
then
# If volume for JambulaTV radio is not muted, mute it
JTVRADIO_VOLUME_MUTED=$($PACTL_CMD list sink-inputs | grep -B40 -e 'application.process.binary = \"mplayer\"' -e 'application.process.binary = \"vlc\"' -e 'application.process.binary = \"ffplay\"'  | grep -i Mute | awk -F': ' {'print $2'})
[[ "$JTVRADIO_VOLUME_MUTED" = "yes" ]] || set_sink_input_mute_mplayer_localhost 1

fi
}

adjust_volume_jtvradio_localhost () {
if [[ "$APP_USED_TO_PLAY" = "snapcast" ]];
then
# Adjust volume using snapcast if its server is running 
set_sink_input_volume_snapcast_localhost $SPEAKER_VOLUME_LEVEL

elif [[ "$APP_USED_TO_PLAY" = "mpd" ]];
then
# Adjust volume using MPD if its server is running 
set_sink_input_volume_mpd_localhost

elif [[ "$APP_USED_TO_PLAY" = "mplayer" ]];
then
# If volume for JambulaTV radio is muted, unmute it
JTVRADIO_VOLUME_MUTED=$($PACTL_CMD list sink-inputs | grep -B40 -e 'application.process.binary = \"mplayer\"' -e 'application.process.binary = \"vlc\"' -e 'application.process.binary = \"ffplay\"'  | grep -i Mute | awk -F': ' {'print $2'})
if [[ "$JTVRADIO_VOLUME_MUTED" = "yes" ]];
then
unmute_volume_jtvradio_localhost
fi
# If there's a volume level specified, adjust volume accordingly
[[ "x$SPEAKER_VOLUME_LEVEL" = "x" ]] || \
set_sink_input_volume_mplayer_localhost $SPEAKER_VOLUME_LEVEL

fi
}

control_volume_jtvradio () {
case $SPEAKER_VOLUME_LOCATION in
# Control volume of JambulaTV radio for speakers at localhost
localhost)
# If volume level is set at '0' then assume 'mute' has been requested
if [[ "$SPEAKER_VOLUME_LEVEL" = "0" || "$SPEAKER_VOLUME_LEVEL" = "0%" ]];
then
# Mute volume for jtvradio
mute_volume_jtvradio_localhost
else
# Increase/Decrease volume for jtvradio
adjust_volume_jtvradio_localhost
fi
;;

# Control volume of JambulaTV radio for speakers at remote host
192.168.x.x)
:
;;
esac
}

status_volume_jtvradio () {
case $SPEAKER_VOLUME_LOCATION in
# Status of volume for JambulaTV radio on speakers at localhost
localhost)
$PACTL_CMD list sink-inputs | grep -i -e snapclient -e mpd -e mplayer -e vlc -e ffplay > /dev/null 2>&1
PULSE_SINK_INPUT_STATUS=$?
if [[ "$PULSE_SINK_INPUT_STATUS" = "0" ]];
then
JTVRADIO_VOLUME=$($PACTL_CMD list sink-inputs | grep -B20 -i -e snapclient -e mpd -e mplayer -e vlc -e ffplay | awk '/Volume/ {print $5}')
cat <<ET
-----------------------------
JambulaTV Radio
-----------------------------
Status	:	Active
Volume	:	$JTVRADIO_VOLUME

ET

else
cat <<ET
-----------------------------
JambulaTV Radio
-----------------------------
Status	:	Idle

ET
fi
;;

# Status of volume for JambulaTV radio on speakers at remote host
192.168.x.x)
:
;;
esac
}


# ----------------------------------------
# System Volume (Speakers used for alerts)
# ----------------------------------------
unmute_volume_system_localhost () {
# toggle/unmute volume using system if it is running 
set_sink_mute_system_localhost 0
}

mute_volume_system_localhost () {
check_pulse_sinks_volume_mute_status
# If volume for System is not muted, mute it
[[ "$SYSTEM_VOLUME_MUTED" = "yes" ]] || set_sink_mute_system_localhost 1
}

adjust_volume_system_localhost () {
check_pulse_sinks_volume_mute_status
# If volume for System is muted, unmute it
if [[ "$SYSTEM_VOLUME_MUTED" = "yes" ]];
then
unmute_volume_system_localhost
fi
# If there's a volume level specified, adjust volume accordingly
[[ "x$SPEAKER_VOLUME_LEVEL" = "x" ]] || \
set_sink_volume_system_localhost $SPEAKER_VOLUME_LEVEL
}

control_volume_system () {
case $SPEAKER_VOLUME_LOCATION in
# Control volume of System for speakers at localhost
localhost)
# If volume level is set at '0' then assume 'mute' has been requested
if [[ "$SPEAKER_VOLUME_LEVEL" = "0" || "$SPEAKER_VOLUME_LEVEL" = "0%" ]];
then
# Mute volume for system
mute_volume_system_localhost
else
# Increase/Decrease volume for system
adjust_volume_system_localhost
fi
;;

# Control volume of System for speakers at remote host
192.168.x.x)
:
;;
esac
}

status_volume_system () {
case $SPEAKER_VOLUME_LOCATION in
# Status of system volume for speakers at localhost
localhost)
$PACTL_CMD list sinks | grep -i Volume > /dev/null 2>&1
PULSE_SINK_STATUS=$?
#
[[ "$PULSE_SINK_STATUS" = "0" ]] && \
SYSTEM_VOLUME=$($PACTL_CMD list sinks | grep -A8 'Driver: module-alsa-card.c' | awk -F'/ ' '/Volume: front-left: / {print $2}' | awk '{print $1}' | head -1)
#
if [[ "$PULSE_SINK_STATUS" = "0" ]];
then
SYSTEM_VOLUME_STATE=$($PACTL_CMD list sinks | grep -B6 'Driver: module-alsa-card.c' | awk -F': ' '/State:/ {print $2}' | awk '{print $1}' | head -1)
cat <<ET
-----------------------------
System Speakers (Pulseaudio)
-----------------------------
Status	:	$SYSTEM_VOLUME_STATE
Volume	:	$SYSTEM_VOLUME

ET

else
cat <<ET
-----------------------------
System Speakers (Pulseaudio)
-----------------------------
Status	:	DEAD

ET
fi
;;

# Status of system volume for speakers at remote host
192.168.x.x)
:
;;
esac
}



#################
#  MAIN SCRIPT  #
#################

# Usage for all
usage_all

# Get application used to play locally
app_used_localhost

# Volume control
case $SPEAKER_VOLUME_TYPE in

fmradio)
if [[ "$SPEAKER_VOLUME_LEVEL" = "mute" ]];
then
# Mute FM radio volume
mute_volume_fmradio_localhost

elif [[ "$SPEAKER_VOLUME_LEVEL" = "unmute" ]];
then
# Unmute FM radio volume
unmute_volume_fmradio_localhost 

elif [[ "$SPEAKER_VOLUME_LEVEL" = "status" ]];
then
# Status of FM radio volume
status_volume_fmradio

else
control_volume_fmradio
fi
;;

webradio)
if [[ "$SPEAKER_VOLUME_LEVEL" = "mute" ]];
then
# Mute Internet radio volume
mute_volume_webradio_localhost

elif [[ "$SPEAKER_VOLUME_LEVEL" = "unmute" ]];
then
# Unmute Internet radio volume
unmute_volume_webradio_localhost

elif [[ "$SPEAKER_VOLUME_LEVEL" = "status" ]];
then
# Status of Internet radio volume
status_volume_webradio

else
control_volume_webradio
fi
;;

jtvradio)
if [[ "$SPEAKER_VOLUME_LEVEL" = "mute" ]];
then
# Mute JambulaTV radio volume
mute_volume_jtvradio_localhost

elif [[ "$SPEAKER_VOLUME_LEVEL" = "unmute" ]];
then
# Unmute JambulaTV radio volume
unmute_volume_jtvradio_localhost

elif [[ "$SPEAKER_VOLUME_LEVEL" = "status" ]];
then
# Status of JambulaTV radio volume
status_volume_jtvradio

else
control_volume_jtvradio
fi
;;

system)
if [[ "$SPEAKER_VOLUME_LEVEL" = "mute" ]];
then
# Mute System volume
mute_volume_system_localhost

elif [[ "$SPEAKER_VOLUME_LEVEL" = "unmute" ]];
then
# Unmute System volume
unmute_volume_system_localhost

elif [[ "$SPEAKER_VOLUME_LEVEL" = "status" ]];
then
# Status of system volume
status_volume_system

else
control_volume_system
fi
;;

all)
if [[ "$SPEAKER_VOLUME_LEVEL" = "mute" ]];
then
# Mute all volumes - Except System Speaker
mute_volume_fmradio_localhost
mute_volume_webradio_localhost
mute_volume_jtvradio_localhost

elif [[ "$SPEAKER_VOLUME_LEVEL" = "unmute" ]];
then
# Unmute all volumes - Except System Speaker
unmute_volume_fmradio_localhost 
unmute_volume_webradio_localhost
unmute_volume_jtvradio_localhost

elif [[ "$SPEAKER_VOLUME_LEVEL" = "status" ]];
then
# Status of all volumes
status_volume_fmradio
status_volume_webradio
status_volume_jtvradio
status_volume_system

else
control_volume_fmradio
control_volume_webradio
control_volume_jtvradio
control_volume_system
fi
;;

esac
