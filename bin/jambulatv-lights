#!/bin/sh
#
# Jambula Labs @copyright 2022-2023 All rights reserved

# HASS Settings
HASS_HOST_IP=127.0.0.1
HASS_WWW_PORT=8505
HASS_WWW_PASSWORD=""

# Time of Day
SUN_POSTION=$(curl -s -X GET -H "x-ha-access: $HASS_WWW_PASSWORD"  -H "Content-Type: application/json"  http://$HASS_HOST_IP:$HASS_WWW_PORT/api/states | jq . | grep horizon  | grep state | awk {'print $2'} | head -1 | sed 's:"::g' | sed 's:,::g')

HASS_LAMP_NAME="$1"
HASS_LAMP_LIVING_ROOM_NAME="Living Room"
HASS_LAMP_ACTION=$2

JAMBULATV_LIVING_ROOM_NAME="JambulaTV (Living Room)"
JAMBULATV_LIVING_ROOM_STATE_ON="playing"

MODE=$3



###############
#  FUNCTIONS  #
###############
usage () {
# Device Name
if [ "x$HASS_LAMP_NAME" = "x" ];
then
clear
echo "Usage:  ./`basename $0` [LAMP_NAME (Use Quotes for spaced names] [LAMP_ACTION (on|off|toggle)] [demo (Optional)]
"
exit 1
fi
# Device Action
if [ "x$HASS_LAMP_ACTION" = "x" ];
then
clear
echo "Usage:  ./`basename $0` $HASS_LAMP_NAME [LAMP_ACTION (on|off|toggle)] [demo (Optional)]

"
exit 1
fi
# Check for Lamp name
get_id_of_lamp
#
if [ "x$HASS_LAMP_ID" = "x" ];
then
clear
echo "Error:  The Lamp [$HASS_LAMP_NAME] was not found. It is most likely not yet setup in JambulaTV

"
exit 1
fi
}

darkness_or_light () {
# Determine weather it is dark or not
if [ "$SUN_POSTION" = "below_horizon" ];
then
ITS_DARK=yes
else
ITS_DARK=no
# Test mode option
[ "$MODE" = "demo" ] || \
cat << EOF
You are running this tool during day time.  If you want to overide default 
i.e. run it anytime, add 'demo' to list of CLI arguments

Usage:  ./`basename $0` $HASS_LAMP_NAME $HASS_LAMP_ACTION demo

EOF
#
fi
}

# TV ID and Status
get_id_of_tv () {
HASS_TV_ID=$(curl -s -X GET -H "x-ha-access: $HASS_WWW_PASSWORD"  -H "Content-Type: application/json"  http://$HASS_HOST_IP:$HASS_WWW_PORT/api/states | jq -r '. []' | grep -B12 "$JAMBULATV_LIVING_ROOM_NAME" | grep entity_id | awk {'print $2'} | sed 's:["|,]::g' | grep -Ev null)
}

status_of_tv () {
HASS_TV_STATUS=$(curl -s -X GET -H "x-ha-access: $HASS_WWW_PASSWORD"  -H "Content-Type: application/json"  http://$HASS_HOST_IP:$HASS_WWW_PORT/api/states | jq -r '. []' | grep -B12 "$JAMBULATV_LIVING_ROOM_NAME" | grep state | awk {'print $2'} | sed 's:["|,]::g' | grep -Ev null)
}

# Lamp ID, and Status
get_id_of_lamp () {
# Query HASS for entity_id of device
HASS_LAMP_ID=$(curl -s -X GET -H "x-ha-access: $HASS_WWW_PASSWORD"  -H "Content-Type: application/json"  http://$HASS_HOST_IP:$HASS_WWW_PORT/api/states | jq -r '. [] | .attributes | select(.friendly_name=="'"$HASS_LAMP_NAME"'") | .new_entity_id' | grep -Ev null)
HASS_NODE_ID=$(curl -s -X GET -H "x-ha-access: $HASS_WWW_PASSWORD"  -H "Content-Type: application/json"  http://$HASS_HOST_IP:$HASS_WWW_PORT/api/states | jq -r '. [] | .attributes | select(.friendly_name=="'"$HASS_LAMP_NAME"'") | .node_id' | grep -Ev null)
#
export HASS_LAMP_ID HASS_NODE_ID
}

type_of_lamp () {
get_id_of_lamp
#
# Set if lamp allows dimming
curl -s -X GET -H "x-ha-access: $HASS_WWW_PASSWORD"  -H "Content-Type: application/json"  http://$HASS_HOST_IP:$HASS_WWW_PORT/api/states | jq -r '. [] ' | grep "$HASS_NODE_ID" | grep node_name | grep -i Dim > /dev/null 2>&1
[ "$?" = "0" ] && HASS_LAMP_TYPE=Dimmer
}

status_of_lamp () {
get_id_of_lamp
# Check status of light
HASS_LAMP_STATE=$(curl -s -X GET -H "x-ha-access: $HASS_WWW_PASSWORD"  -H "Content-Type: application/json"  http://$HASS_HOST_IP:$HASS_WWW_PORT/api/states/$HASS_LAMP_ID | jq . | grep state | awk {'print $2'} | head -1 | sed 's:"::g' | sed 's:,::g')
}

turn_on_lamp () {
get_id_of_lamp
type_of_lamp
#
if [ "$HASS_LAMP_TYPE" = "Dimmer" ];
then
# Dimmable (ON) - Added Brightness level
curl -s -X POST -H "x-ha-access: $HASS_WWW_PASSWORD" -H "Content-Type: application/json" -d '{"entity_id": "'"$HASS_LAMP_ID"'", "brightness": 255}' http://$HASS_HOST_IP:$HASS_WWW_PORT/api/services/light/turn_on

else
# Non-Dimmable (ON)
curl -s -X POST -H "x-ha-access: $HASS_WWW_PASSWORD" -H "Content-Type: application/json" -d '{"entity_id": "'"$HASS_LAMP_ID"'"}' http://$HASS_HOST_IP:$HASS_WWW_PORT/api/services/light/turn_on
fi
#
# State
curl -s -X POST -H "x-ha-access: $HASS_WWW_PASSWORD" -H "Content-Type: application/json" -d '{"state": "on"}' http://$HASS_HOST_IP:$HASS_WWW_PORT/api/states/$HASS_LAMP_ID
}

turn_off_lamp () {
get_id_of_lamp
type_of_lamp
#
if [ "$HASS_LAMP_TYPE" = "Dimmer" ];
then
# Dimmable (OFF) - Added Brightness level
curl -s -X POST -H "x-ha-access: $HASS_WWW_PASSWORD" -H "Content-Type: application/json" -d '{"entity_id": "'"$HASS_LAMP_ID"'", "brightness": 0}' http://$HASS_HOST_IP:$HASS_WWW_PORT/api/services/light/turn_off

else
# Non-Dimmable (OFF)
curl -s -X POST -H "x-ha-access: $HASS_WWW_PASSWORD" -H "Content-Type: application/json" -d '{"entity_id": "'"$HASS_LAMP_ID"'"}' http://$HASS_HOST_IP:$HASS_WWW_PORT/api/services/light/turn_off
fi

# state
curl -s -X POST -H "x-ha-access: $HASS_WWW_PASSWORD" -H "Content-Type: application/json" -d '{"state": "off"}' http://$HASS_HOST_IP:$HASS_WWW_PORT/api/states/$HASS_LAMP_ID
}



#################
#  MAIN SCRIPT  #
#################
usage

# Time of day
darkness_or_light 

# Get status of lamp
status_of_lamp

# Get status of tv
status_of_tv

case $HASS_LAMP_ACTION in
[Oo][Nn])
# If in demo mode, continue out of 'if' statement
if [ "$MODE" = "demo" ];
then
continue
# Exit == Don't turn on Light if its in the Living Room and Video is playing
elif [ "$HASS_TV_STATUS" = "playing" ] && [ "$HASS_LAMP_NAME" = "$HASS_LAMP_LIVING_ROOM_NAME" ];
then
exit 0
fi
# Turn on security Light if it is not on and its dark or during demo mode
if [ "$ITS_DARK" = "yes" ] || [ "$MODE" = "demo" ];
then
turn_on_lamp
fi
;;

[Oo][Ff][Ff])
# Switch off security Light if its is dark or during demo mode
if [ "$ITS_DARK" = "yes" ] || [ "$MODE" = "demo" ];
then
turn_off_lamp
fi
;;

[Tt][Oo][Gg][Gg][Ll][Ee])
# If in off state, Turn on
[ "$HASS_LAMP_STATE" = "off" ] && turn_on_lamp
# If on off state, Turn off
[ "$HASS_LAMP_STATE" = "on" ] && turn_off_lamp
;;

*)
clear
echo "Usage:  ./`basename $0` [LAMP_NAME (Use Quotes for spaced names] [LAMP_ACTION (on|off|toggle)] [demo (Optional)]
"
esac
