#!/bin/sh
# This tool backs up data from a mobile smart phone plugged into a
# USB port using Android Debug Bridge (ADB) 
#
# Prerequisites: 
# --------------
# 1) Install Android SDK platform tools containing adb tool
#
# 2) Add the following rule to udev file: '51-android.rules' 
#    See: https://github.com/M0Rf30/android-udev-rules
#
#ENV{adb_user}=="yes", MODE="0660", GROUP="adbusers", SYMLINK+="phone_android_$env{ID_MODEL}_$env{ID_SERIAL_SHORT}", TAG+="systemd", ENV{SYSTEMD_WANTS}+="jambulatv-backup-mobile-phone@$env{ID_SERIAL_SHORT}.service"
#
# Jambula Labs @copyright 2020-2021 All rights reserved



# Source global settings
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_SYSTEM_LOG_DIR=/var/log/$PROJECT_NAME
PROJECT_GLOBAL_SETTINGS_FILE=$PROJECT_SYSTEM_CONF_DIR/global-settings.cfg
. $PROJECT_GLOBAL_SETTINGS_FILE

# Variables
PHONE_SERIAL_NUMBER=$1
PHONE_MODEL=$( [[ "x$PHONE_SERIAL_NUMBER" = "x" ]] || /usr/bin/journalctl -b -r | grep -m 1 -A3 "SerialNumber: $PHONE_SERIAL_NUMBER" | grep "Product:" | cut -d':' -f6- | sed 's:^ ::g')
PHONE_MANUFACTURER=$(/usr/bin/journalctl -b -r | grep -m 1 -A3 "SerialNumber: $PHONE_SERIAL_NUMBER" | grep "Manufacturer:" | cut -d':' -f6- | sed 's:^ ::g')
PHONE_PRETTY_NAME=$(echo $PHONE_MODEL | sed 's: :_:g')
PHONE_BACKUP_NAME=backup_${PHONE_SERIAL_NUMBER}.ab
PHONE_BACKUP_DIR=/JambulaTV/Backups/Phones/${PHONE_PRETTY_NAME}
PHONE_BACKUP_FILE=$PHONE_BACKUP_DIR/${PHONE_BACKUP_NAME}
PHONE_BACKUP_LOG_FILE=$PROJECT_SYSTEM_LOG_DIR/$(echo $(basename $0) | sed 's:jambulatv-::g').log

ADB_CMD="sudo /usr/bin/adb"
ADB_BACKUP_OPTS="-shared -apk -all" # (DO NOT USE -system or -nosystem)
DD_CMD="sudo /usr/bin/dd"
STAT_CMD=/usr/bin/stat
LOGGER_CMD=/usr/bin/logger
OPENSSL_CMD=/usr/bin/openssl
TAR_CMD=/usr/bin/tar
SOUNDS_TOOL=/usr/bin/jambulatv-sounds
SPEAKER_VOLUME_TOOL=/usr/bin/jambulatv-speaker-volume
SOUNDS_ENABLE=1
ALERT_SOUND_AUDIO_GAIN=140
MULTIMEDIA_USER=jambula

DEBUG=n # NOTE: 'n' = logging to file | 'y' = logging to stdout



###############
#  FUNCTIONS  #
###############

alert_using_voice () {
if [[ "$SOUNDS_ENABLE" = "1" ]];
then
# Pause music player
$MPD_CLIENT_CMD $MPD_CLIENT_OPTS -h $MPD_SERVER_IP -p $MPD_SERVER_PORT pause > /dev/null 2>&1
# Play alert
$SOUNDS_TOOL alert $1 gain=$ALERT_SOUND_AUDIO_GAIN
# Unpause music player
$MPD_CLIENT_CMD $MPD_CLIENT_OPTS -h $MPD_SERVER_IP -p $MPD_SERVER_PORT play > /dev/null 2>&1
fi
}

notification_not_a_phone () {
$LOGGER_CMD -s -t $(basename $0) "This is not a phone, so backup not necessary. Quitting ..."
}

notification_backup_dir_is_not_accessible () {
$LOGGER_CMD -s -t $(basename $0) "The backup directory [$PHONE_BACKUP_DIR] is not accessible.  Please ensure that the user $(whoami) has sufficient permissions to access it"
}

notification_enable_usb_debugging () {
# Alert using console
$LOGGER_CMD -s -t $(basename $0) "Please enable USB Debugging (Developer options) on your phone ($PHONE_MODEL - $PHONE_SERIAL_NUMBER) before connecting it to the server"
# Alert using voice
alert_using_voice 30
}

notification_authorize_connection () {
# Alert using console
$LOGGER_CMD -s -t $(basename $0) "Please accept the prompt currently displayed on your phone screen. Save it to 'always' allow USB debugging with this specific server"
# Alert using voice
alert_using_voice 32
}

notification_timed_out_waiting_4_input () {
# Alert using console
$LOGGER_CMD -s -t $(basename $0) "Time out - failed to get user input. Quitting ..."
# Alert using voice
alert_using_voice 33
}

notification_start () {
# Alert using console
$LOGGER_CMD -s -t $(basename $0) "Starting backup of $PHONE_MODEL - $PHONE_SERIAL_NUMBER - $PHONE_MANUFACTURER - $PHONE_MAC_ADDRESS - $PHONE_IP_ADDRESS"
# Alert using voice
alert_using_voice 27
}

notification_unlock_confirm () {
# Alert using console
$LOGGER_CMD -s -t $(basename $0) "Please unlock your phone and confirm the backup operation"
# Alert using voice
alert_using_voice 31
}

notification_disconnect_phone () {
# Alert using console
$LOGGER_CMD -s -t $(basename $0) "Feel free to unplug your phone, while we complete the rest of the backup processes"
# Alert using voice
alert_using_voice 29
}

notification_end () {
# Alert using console
$LOGGER_CMD -s -t $(basename $0) "Completed backup of $PHONE_MODEL - $PHONE_SERIAL_NUMBER - $PHONE_MANUFACTURER - $PHONE_MAC_ADDRESS - $PHONE_IP_ADDRESS"
# Alert using voice
alert_using_voice 28
}

start_logging () {
if [[ "$DEBUG" != "y" ]];
then

# If it already exists, make log file writeable by all
[[ -e $PHONE_BACKUP_LOG_FILE ]] && sudo chmod a+w $PHONE_BACKUP_LOG_FILE
# Start logging
cat >> $PHONE_BACKUP_LOG_FILE <<EOF

-----------------------------------------------------------------------
$(date): $PHONE_MODEL $PHONE_SERIAL_NUMBER ($PHONE_MANUFACTURER)
-----------------------------------------------------------------------
EOF
exec 2>> $PHONE_BACKUP_LOG_FILE
fi
}

check_if_a_phone () {
if [[ "x$PHONE_SERIAL_NUMBER" = "x" || "x$PHONE_MODEL" = "x" || "$PHONE_MANUFACTURER" = "$PHONE_MODEL" ]];
then
# Alert if not phone
notification_not_a_phone
# Quit
exit 0
fi
}

check_if_backup_dir_exists_and_is_accessible () {
if [[ ! -d $PHONE_BACKUP_DIR ]];
then
# Create backups directory if non-existent
sudo mkdir -p $PHONE_BACKUP_DIR
#
# Give ownership of backup directory to multimedia user i.e. jambula
sudo chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PHONE_BACKUP_DIR/

elif [[ ! -x $PHONE_BACKUP_DIR ]];
then
# Alert using console if backup directory is not accessible
notification_backup_dir_is_not_accessible
#
# Quit
exit 0
fi
}

start_adb_server () {
ps auxw | grep adb | grep -v grep > /dev/null 2>&1
ADB_STATUS=$?
[[ "$ADB_STATUS" = "0" ]] || $ADB_CMD start-server
}

stop_adb_server () {
ps auxw | grep adb | grep -v grep > /dev/null 2>&1
ADB_STATUS=$?
[[ "$ADB_STATUS" = "0" ]] && $ADB_CMD kill-server
}

query_if_device_is_connected () {
# Check to see if device is connected and USB debugging is enabled
DETECTED_SERIAL_NUMBER=$($ADB_CMD devices | awk "/${PHONE_SERIAL_NUMBER}/ {print \$1}")
#
if [[ -z $DETECTED_SERIAL_NUMBER ]];
then
# Alert to enable USB debugging on phone
notification_enable_usb_debugging
# Stop ADB server if it is running
stop_adb_server
# Quit
exit 0
fi
#
# Check to see if permissions have been granted to access the phone
$ADB_CMD -s "${PHONE_SERIAL_NUMBER}" get-state > /dev/null 2>&1 && \
PHONE_STATE=$($ADB_CMD -s "${PHONE_SERIAL_NUMBER}" get-state)
# Set maximum number of times to check
NO_TIMES_CHECKED_MAX=7
# Set initial number of times checked
NO_TIMES_CHECKED=0
#
while [[ "$PHONE_STATE" != "device" ]];
do
# Alert to authorize connection
notification_authorize_connection
# Pause before retrying
sleep 15
# Re-check permissions
$ADB_CMD -s "${PHONE_SERIAL_NUMBER}" get-state > /dev/null 2>&1 && \
PHONE_STATE=$($ADB_CMD -s "${PHONE_SERIAL_NUMBER}" get-state)
# Set number of times checked
NO_TIMES_CHECKED=$((NO_TIMES_CHECKED + 1))
#
# Quit if it exceeded number of allowable tries
if [[ "$NO_TIMES_CHECKED" -ge "$NO_TIMES_CHECKED_MAX" ]];
then
# Alert when failed to get user input
notification_timed_out_waiting_4_input
# Stop ADB server if it is running
stop_adb_server
# Quit
exit 0
fi
done
}

query_device_params () {
# Query device's MAC address
PHONE_MAC_ADDRESS=$($ADB_CMD -s ${PHONE_SERIAL_NUMBER} shell ip addr show wlan0  | grep 'link/ether '| cut -d' ' -f6)
# Query device's IP address
PHONE_IP_ADDRESS=$($ADB_CMD -s ${PHONE_SERIAL_NUMBER} shell ip addr show wlan0 | grep inet | awk {'print $2'} | cut -d'/' -f1 | head -1)
}

backup_old_archive () {
if [[ -e $PHONE_BACKUP_FILE ]];
then
# Set date of previous archive
DATE_OF_PREVIOUS_ARCHIVE=$($STAT_CMD $PHONE_BACKUP_FILE | awk -F': ' '/Modify/ {print $2}'| awk {'print $1'} | sed 's:-::g')
#
mv -v ${PHONE_BACKUP_FILE} ${PHONE_BACKUP_FILE}_${DATE_OF_PREVIOUS_ARCHIVE}
fi
}

backup_pre_tasks () {
# Start logging to file
start_logging

# Check to see if device is actually a phone.  If not quit
check_if_a_phone

# Create, or if it already exists, make backups directory accessible
check_if_backup_dir_exists_and_is_accessible

# Start ADB server if it is not running
start_adb_server

# Query device existence
query_if_device_is_connected

# Query device parameters
query_device_params

# Backup old android formatted .ab archive
backup_old_archive
}

backup_create_archive () {
# Alert at start of backup
notification_start
# Alert to unlock and confirm backup
notification_unlock_confirm

# Create backup using adb tool
$ADB_CMD -s ${PHONE_SERIAL_NUMBER} backup $ADB_BACKUP_OPTS -f $PHONE_BACKUP_FILE

# Alert to unplug/disconnect the phone
notification_disconnect_phone
}

backup_extract_archive () {
if [[ -e $PHONE_BACKUP_FILE ]];
then
cd $PHONE_BACKUP_DIR && \
	$DD_CMD if=$PHONE_BACKUP_FILE bs=24 skip=1 | \
	$OPENSSL_CMD zlib -d | \
	$TAR_CMD -xvf -
fi
# Change ownership of extracted files to multimedia user i.e. jambula 
sudo chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $PHONE_BACKUP_DIR/*
}

backup_post_tasks () {
# Remove android archive files that are 2 weeks+ old to save space
DAYS_OLD=14
find $PHONE_BACKUP_DIR -type f -name "${PHONE_BACKUP_NAME}*" -mtime +${DAYS_OLD} -exec rm -f {} \;

# Stop ADB server if it is running
stop_adb_server

# Alert at completion of backup
notification_end
}



#################
#  MAIN SCRIPT  #
#################

# Pre-setup tasks
backup_pre_tasks

# Backup and create android formated .ab archive
backup_create_archive

# Unpack archive
backup_extract_archive

# Post-cleanup tasks
backup_post_tasks

exit 0
