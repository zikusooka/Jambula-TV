#!/bin/sh
# This script starts up rtl_fm using SDR dongle, and streams it via vlc
# You need: vlc, rtl_fm
#
# Jambula Labs @copyright 2020-2021 All rights reserved

# Variables
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_FUNCTIONS_FILE=$PROJECT_SYSTEM_CONF_DIR/functions

# Source install functions
. $PROJECT_FUNCTIONS_FILE
#
# Source global settings
. $PROJECT_GLOBAL_SETTINGS_FILE

# Source Geo-location file used in extracting city and country of 
# FM radio playlists
[[ -e $GEOLOCATION_FILE ]] && . $GEOLOCATION_FILE

RTL_FM_CMD=/usr/bin/rtl_fm
RTL_FM_DEV=0
FFMPEG_CMD=/usr/bin/ffmpeg
VLC_CMD=/usr/bin/cvlc
MPLAYER_CMD=/usr/bin/mplayer 
MPC_CMD=/usr/bin/mpc

MPD_PLAYLISTS_DIRECTORY=$PLAYLISTS_DIRECTORY/mpd
MPD_LOCAL_PORT=$MPD_PORT

FMRADIO_STREAMER_NUMBER_OF_ARGS=$#
FMRADIO_STREAMER_TASK=$1
FMRADIO_STREAMER_STATION=$(/bin/echo "$2" | sed -e "s/[^0-9. ]*//g" -e  "s/ \+/ /g")
FMRADIO_STREAMER_CLIENT_LOCATION=${@:$FMRADIO_STREAMER_NUMBER_OF_ARGS}
FMRADIO_STREAMER_MEDIA_INFO="title='JambulaTV-FM-Radio',author=$FMRADIO_STREAMER_STATION-FM,copyright=$COPYRIGHT_YEAR_START-$COPYRIGHT_YEAR_END-$(echo $COMPANY_NAME | sed 's: :-:g')-All-rights-reserved,comment=Broadcasting-Live-FM-Radio-using-$PROJECT_NAME,rating=PG14"



###############
#  FUNCTIONS  #
###############
usage_all () {
clear
cat <<EOF
Usage: ./$(basename $0) [start|stop|restart|playing] [FM_STATION e.g. 93.3] [local (Optional)]
EOF
exit 1
}

usage_start () {
if [ "x$FMRADIO_STREAMER_STATION" = "x" ];
then
clear
cat <<EOF
Usage: ./$(basename $0) $FMRADIO_STREAMER_TASK [FM_STATION e.g. 93.3] [local (Optional)]
EOF
exit 1
fi
}

mpd_check_status () {
# Check status of MPD server
$MPC_CMD -q -h localhost -p $MPD_LOCAL_PORT status > /dev/null 2>&1
MPC_EXIT_STATUS=$?
}

mpd_current_playlist_stop () {
# Stop any running playlist, so we take over
$MPC_CMD -q -h localhost -p $MPD_LOCAL_PORT stop
# Clear previous added playlist
$MPC_CMD -q -h localhost -p $MPD_LOCAL_PORT clear
}

fm_radio_via_mpd_start () {
# Stop and clear current playlist
mpd_current_playlist_stop

# Create FM Radio Playlist
cat > $MPD_PLAYLISTS_DIRECTORY/FM-Radio-$FMRADIO_STREAMER_STATION.m3u <<ET
#EXTM3U
#EXTINF:-1, $PROJECT_NAME FM Radio : $FMRADIO_STREAMER_STATION-FM - $CITY, $COUNTRY
http://127.0.0.1:$FMRADIO_STREAMER_PORT
ET
#
# Add FM Radio feed
$MPC_CMD -q -h localhost -p $MPD_LOCAL_PORT load FM-Radio-$FMRADIO_STREAMER_STATION
#
# Play FM Radio feed
$MPC_CMD -q -h localhost -p $MPD_LOCAL_PORT play
}

fm_radio_via_mpd_stop () {
# Stop and clear current playlist
mpd_current_playlist_stop
}

mpd_now_playing () {
# See if song filename ends with a known music extension i.e. is locally saved
$MPC_CMD -h localhost -p $MPD_LOCAL_PORT search title any | grep -i -e '.m4a$' -e '.wma$' -e '.ogg$' -e '.wav$' -e '.mp3$' -e '.mp4$' > /dev/null 2>&1
SONG_IS_STORED_LOCALLY=$?
#
# Get title and artist
if [[ "$SONG_IS_STORED_LOCALLY" = "0" ]];
then
NAME_OF_STATION=$($MPC_CMD -h localhost -p $MPD_LOCAL_PORT current | cut -d '/' -f2- | rev | cut -d '.' -f2- | rev | sed 's:_: :g' | sed 's:\.: :g' | sed 's:/: :g')
NAME_OF_SONG_ARTIST=$($MPC_CMD -h localhost -p $MPD_LOCAL_PORT current | cut -d '/' -f2- | rev | cut -d '.' -f2- | rev | sed 's:_: :g' | sed 's:\.: :g' | sed 's:/: :g')

else
NAME_OF_STATION=$($MPC_CMD -h localhost -p $MPD_LOCAL_PORT current | awk -F: '{print $1}')
NAME_OF_SONG_ARTIST=$($MPC_CMD -h localhost -p $MPD_LOCAL_PORT current | rev | awk -F' :' '{print $1}' | rev | sed 's: - :#:g' | cut -d"#" -f1- | rev | cut -d '#' -f1-2 | rev | sed 's:^ ::g' | sed 's:[(|)]::g' | sed 's: Radio Edit::g' | sed 's:#: - :g')
fi
}

stream_local () {
case $FMRADIO_STREAMER_CLIENT_LOCATION in
# Play locally if requested
local)
# Check status of MPD server
mpd_check_status
#
# Stream FM Radio over mpd if server is running
if [[ "$MPC_EXIT_STATUS" = "0" ]];
then
fm_radio_via_mpd_start

else
# Stream using CLI tool i.e. mplayer
PULSEAUDIO_USER=$MULTIMEDIA_USER && \
$MPLAYER_CMD -ao $AUDIO_OUTPUT_DRIVER::0 -novideo -nocache -nolirc -prefer-ipv4 http://127.0.0.1:$FMRADIO_STREAMER_PORT > $FMRADIO_STREAMER_LOG_FILE 2>&1 &
fi
;;
esac
}

stream_start () {
# Usage
usage_start
#
$RTL_FM_CMD -d $RTL_FM_DEV -f ${FMRADIO_STREAMER_STATION}M -M fm -s 170k -A std  -l 0 -E deemp -r 44.1k  | $FFMPEG_CMD -nostats -loglevel fatal -f s16le -ac 1 -i pipe:0 -acodec libmp3lame -ab 128k -f mpegts pipe:1 | $VLC_CMD - --sout '#standard{access=http,mux='asf'{'$FMRADIO_STREAMER_MEDIA_INFO'},dst=:'$FMRADIO_STREAMER_PORT'}' > ${FMRADIO_STREAMER_LOG_FILE} 2>&1 &
#
# Quit if rtl_fm process did not start
ps auxw | grep -Ev grep | grep $RTL_FM_CMD > /dev/null 2>&1
RTL_FM_EXIT_STATUS=$?
if [[ "$RTL_FM_EXIT_STATUS" != "0" ]];
then
logger -s -t $(basename $0) "Error: The FM radio process failed to start, check that tuner device exists"
#
# Kill VLC process
VLC_PID=$(ps auxw | grep -Ev grep | grep vlc | grep "sout #standard{access=http,mux=" | awk {'print $2'})
kill $VLC_PID
exit 1
fi
#
# Pause a bit to allow radio to settle
sleep 3
#
# Stream locally if user requested
stream_local
#
# Add process ID (PID) numbers to temp file
MPLAYER_PID=$(ps auxw | grep -Ev grep | grep mplayer| awk {'print $2'})
VLC_PID=$(ps auxw | grep -Ev grep | grep vlc | grep "sout #standard{access=http,mux=" | awk {'print $2'})
FFMPEG_PID=$(ps auxw | grep -Ev grep | grep ffmpeg | grep "f s16le -ac 1 -i pipe:0 -acodec libmp3lame -ab 128k -f mpegts" | awk {'print $2'})
RTLFM_PID=$(ps auxw | grep -Ev grep | grep rtl_fm | grep "M fm -s 170k -A std -l 0 -E deemp -r 44.1k" | awk {'print $2'})
#
cat > $FMRADIO_STREAMER_PID_FILE <<EOF
$MPLAYER_PID $VLC_PID $FFMPEG_PID $RTLFM_PID
EOF
}

stream_stop () {
# Check status of MPD server
mpd_check_status
#
# Stream FM Radio over mpd if server is running
[[ "$MPC_EXIT_STATUS" = "0" ]] && fm_radio_via_mpd_stop

# Kill streamer processes
[[ -e $FMRADIO_STREAMER_PID_FILE ]] && sudo kill -15 $(cat $FMRADIO_STREAMER_PID_FILE) > /dev/null 2>&1 &
# Remove PIDs file
if [[ -e $FMRADIO_STREAMER_PID_FILE ]];
then
sudo rm -f $FMRADIO_STREAMER_PID_FILE
fi
}

stream_restart () {
usage_start
# Stop previous station
$0 stop
# Pause a bit to allow radio to settle
sleep 3
# Stream new station
$0 start $FMRADIO_STREAMER_STATION $FMRADIO_STREAMER_CLIENT_LOCATION
}

station_now_playing () {
# Get age of log file
AGE_OF_FMRADIO_STREAMER_LOG_FILE=$(date -d "now - $(stat -c "%Y" $FMRADIO_STREAMER_LOG_FILE) seconds" +%s)
# Only show 'now playing' if the age of log file is less than 1 minute
if [[ "$AGE_OF_FMRADIO_STREAMER_LOG_FILE" -lt "60" ]];
then
NAME_OF_STATION=$(/usr/bin/awk -F': ' '/title/ {print $2}' $FMRADIO_STREAMER_LOG_FILE | /usr/bin/tail -1 | sed 's:-: :g')
NAME_OF_SONG_ARTIST=$(/usr/bin/grep -i author $FMRADIO_STREAMER_LOG_FILE | sed 's/ author: //g' | /usr/bin/tail -1)
fi
}

playing_now () {
# Check status of MPD server
mpd_check_status
#
# Fetch 'Now Playing' info if MPD server is running
if [[ "$MPC_EXIT_STATUS" = "0" ]];
then
mpd_now_playing

else
# Get 'Now Playing' info 
station_now_playing
fi

# Print name of station, song, and artist if found
if [[ "$NAME_OF_STATION" = "$NAME_OF_SONG_ARTIST" ]];
then
cat <<PLAYING
$NAME_OF_SONG_ARTIST
PLAYING

elif [[ "x$NAME_OF_STATION" != "x" && "x$NAME_OF_SONG_ARTIST" != "x" ]];
then
cat <<PLAYING
$NAME_OF_STATION - $NAME_OF_SONG_ARTIST
PLAYING

else
cat <<PLAYING
$NAME_OF_STATION
PLAYING
fi
}



#################
#  MAIN SCRIPT  #
#################

trap stream_stop SIGTERM

case $FMRADIO_STREAMER_TASK in

start)
stream_start
;;

stop)
stream_stop
;;

restart)
stream_restart
;;

playing)
playing_now
;;

*)
usage_all
;;

esac
