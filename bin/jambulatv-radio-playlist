#!/bin/sh
# This script prints Internet/jTV/FM radio song currently playing
#
# Jambula Labs @copyright 2022-2023 All rights reserved
# 
# ---

# Source global settings
PROJECT_NAME=MY_PROJECT_NAME
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_GLOBAL_SETTINGS_FILE=$PROJECT_SYSTEM_CONF_DIR/global-settings.cfg
. $PROJECT_GLOBAL_SETTINGS_FILE

# Variables
INPUT=$1



###############
#  FUNCTIONS  #
###############
usage () {
# Quit if there are missing CLI arguments
if [[ "x$INPUT" = "x" ]];
then
clear
cat <<EOT
Usage: ./$(basename $0) [INPUT]

Example: 
./$(basename $0) [fmradio|webradio|jtvradio]

EOT
exit 1
fi
}

set_log_files () {
# Set log files for the different inputs
case $INPUT in
fmradio)
STREAMER_LOG_FILE=$FMRADIO_STREAMER_LOG_FILE
;;
webradio|jtvradio)
STREAMER_LOG_FILE=$WEBRADIO_STREAMER_LOG_FILE
;;
esac
}

mpd_check_status () {
# Check status of MPD server
$MPD_CLIENT_CMD $MPD_CLIENT_OPTS -h $MPD_SERVER_IP -p $MPD_SERVER_PORT status > /dev/null 2>&1
MPC_EXIT_STATUS=$?
# Check if anything is playing
MPC_CURRENTLY_PLAYING=$($MPD_CLIENT_CMD $MPD_CLIENT_OPTS -h $MPD_SERVER_IP -p $MPD_SERVER_PORT current)
}

mpd_now_playing () {
# See if song filename ends with a known music extension i.e. is locally saved
$MPD_CLIENT_CMD -h $MPD_SERVER_IP -p $MPD_SERVER_PORT playlist | grep -i -e '.m4a$' -e '.wma$' -e '.ogg$' -e '.wav$' -e '.mp3$' -e '.mp4$' > /dev/null 2>&1
SONG_IS_STORED_LOCALLY=$?
#
# Get title and artist
if [[ "$SONG_IS_STORED_LOCALLY" = "0" ]];
then
NAME_OF_STATION=$($MPD_CLIENT_CMD -h $MPD_SERVER_IP -p $MPD_SERVER_PORT current | sed 's: Radio Edit::g' | sed 's:(Lyrics Video)::g' | sed 's:(Official video)::g' | sed 's:\.mp3::g' | sed 's:\.wmv::g' | cut -d '/' -f2- | awk -F'[.|-]' {'print $1'} | sed 's:[_|\.|/]: :g' | sed 's:^[_|-]::g' | sed 's:[_|-]$::g' | sed 's:^ ::g' | sed 's: $::g' | sed 's:^  ::g' | sed 's:  $::g')
NAME_OF_SONG_ARTIST=$($MPD_CLIENT_CMD -h $MPD_SERVER_IP -p $MPD_SERVER_PORT current | sed -r ':a; s/\b([[:alnum:]]+)\b(.*)\b\1\b/\1\2/g; ta; s/(, )+/, /g; s/, *$//' | cut -d'/' -f2- | sed 's: Radio Edit::g' | sed 's:(Lyrics Video)::g' | sed 's:(Official video)::g' | sed 's:\.mp3::g' | sed 's:\.wmv::g' | rev | awk -F' [:|.|-]' '{print $1 $2 $3 $4}' | rev | sed 's: - :#:g' | cut -d"#" -f1- | rev | cut -d '#' -f1-2 | rev | sed 's:#: - :g' | sed 's:[_|\.|/]: :g' | sed "s:$NAME_OF_STATION::g" | sed 's:^[_|-]::g' | sed 's:[_|-]$::g' | sed 's:^ ::g' | sed 's: $::g' | sed 's:^  ::g' | sed 's:  $::g')
GENRE=$($MPD_CLIENT_CMD -h $MPD_SERVER_IP -p $MPD_SERVER_PORT -f %file% current | awk -F'/' '{print $1}') 

else
NAME_OF_STATION=$($MPD_CLIENT_CMD -h $MPD_SERVER_IP -p $MPD_SERVER_PORT -f '%artist%' current)
[[ "x$NAME_OF_STATION" = "x" ]] && \
NAME_OF_STATION=$($MPD_CLIENT_CMD -h $MPD_SERVER_IP -p $MPD_SERVER_PORT current -f '%name%' | sed 's:^/::')
#
NAME_OF_SONG_ARTIST=$($MPD_CLIENT_CMD -h $MPD_SERVER_IP -p $MPD_SERVER_PORT -f '%title%' current | rev | awk -F' :' '{print $1}' | rev | sed 's: - :#:g' | cut -d"#" -f1- | rev | cut -d '#' -f1-2 | rev | sed 's:^ ::g' | sed 's:[(|)]::g' | sed 's: Radio Edit::g' | sed 's:#: - :g' | sed 's/text=//' | awk -F'song_spot=' '{print $1}' | sed 's:"::g')
GENRE=$($MPD_CLIENT_CMD -h $MPD_SERVER_IP -p $MPD_SERVER_PORT -f '%genre%' current)
fi
}

music_now_playing () {
# Set log files for the different inputs
set_log_files
#
# Get age of log file
AGE_OF_STREAMER_LOG_FILE=$(date -d "now - $(stat -c "%Y" $STREAMER_LOG_FILE) seconds" +%s)
# Only show 'now playing' if the age of log file is less than 1 minute
if [[ "$AGE_OF_STREAMER_LOG_FILE" -lt "60" ]] && [[ "$INPUT" = "webradio" ]];
then
NAME_OF_STATION=$(/usr/bin/awk '/Name   : / {print $3}' $STREAMER_LOG_FILE | /usr/bin/head -1 | /usr/bin/sort -u)
NAME_OF_SONG_ARTIST=$(/usr/bin/grep -a -oP "(?<=ICY Info: StreamTitle=').+?(?=';)" $STREAMER_LOG_FILE | /usr/bin/tail -1)

elif [[ "$AGE_OF_STREAMER_LOG_FILE" -lt "60" ]] && [[ "$INPUT" = "fmradio" ]];
then
NAME_OF_STATION=$(/usr/bin/awk -F': ' '/title/ {print $2}' $STREAMER_LOG_FILE | /usr/bin/tail -1 | sed 's:-: :g')
NAME_OF_SONG_ARTIST=$(/usr/bin/grep -i author $STREAMER_LOG_FILE | sed 's/ author: //g' | /usr/bin/tail -1)
fi
}

playing_now () {
# Check status of MPD server
mpd_check_status
#
# Fetch 'Now Playing' info if MPD server is running
if [[ "$MPC_EXIT_STATUS" = "0" ]];
then
mpd_now_playing

else
# Get 'Now Playing' info 
music_now_playing
fi

# Quit if nothing is playing and webradio is selected
if [[ "$INPUT" = "webradio" ]] && [[ "x$MPC_CURRENTLY_PLAYING" = "x" ]];
then
exit 0
fi

# Print name of station, song, and artist if found
if [[ "$NAME_OF_STATION" = "$NAME_OF_SONG_ARTIST" && "x$NAME_OF_SONG_ARTIST" != "x" ]] || [[ "x$NAME_OF_STATION" = "x" && "x$NAME_OF_SONG_ARTIST" != "x" ]];
then
[[ "x$GENRE" != "x" ]] && echo "$NAME_OF_SONG_ARTIST [$GENRE]"
[[ "x$GENRE" = "x" ]] && echo "$NAME_OF_SONG_ARTIST"

elif [[ "x$NAME_OF_STATION" != "x" && "x$NAME_OF_SONG_ARTIST" != "x" ]];
then
[[ "x$GENRE" != "x" ]] && echo "$NAME_OF_STATION - $NAME_OF_SONG_ARTIST [$GENRE]"
[[ "x$GENRE" = "x" ]] && echo "$NAME_OF_STATION - $NAME_OF_SONG_ARTIST"

else
[[ "x$GENRE" != "x" ]] && echo "$NAME_OF_STATION [$GENRE]"
[[ "x$GENRE" = "x" ]] && echo "$NAME_OF_STATION"
fi
}



#################
#  MAIN SCRIPT  #
#################

usage

playing_now
