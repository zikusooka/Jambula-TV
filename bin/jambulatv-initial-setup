#!/bin/sh
# This is the first time user setup tool for JambulaTV 
# Jambula Labs @copyright 2018-2019 All rights reserved
#
# Variables
PROJECT_NAME=JambulaTV
SOURCESDIR=/opt
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_FUNCTIONS_FILE=$PROJECT_SYSTEM_CONF_DIR/functions

# Source functions file
. $PROJECT_FUNCTIONS_FILE

PRODUCT=$(grep -i Product $PROJECT_RELEASE_FILE | cut -d : -f2)
VERSION=$(grep -i Version $PROJECT_RELEASE_FILE | cut -d : -f2)
SERIAL=$(grep -i Serial $PROJECT_RELEASE_FILE | cut -d : -f2)

KODI_GUI_SETTINGS=$KODI_USER_DATA/guisettings.xml

FLEXGET_CONFIG_DIR=$PROJECT_SYSTEM_CONF_DIR/flexget
ASTERISK_AGI_BIN_DIR=/var/lib/asterisk/agi-bin

QRCODE_DIR=$PROJECT_SYSTEM_SHARE_DIR/images/qrcodes
QRCODE_FILE=setup_url.png

SETUP_INTERNET_CONFIG_FILE=$PROJECT_SYSTEM_SHARE_DIR/html/setup/.internet-settings.txt
SETUP_MAC_ADDRESSES_FILE=$PROJECT_SYSTEM_SHARE_DIR/html/setup/.wifi_devices.txt
SETUP_COMPLETED_FILE=$PROJECT_SYSTEM_SHARE_DIR/html/setup/.initial-setup-completed
SETUP_DVBT_CONFIG_FILE=$PROJECT_SYSTEM_SHARE_DIR/html/setup/.dvbt-settings.txt
CCTV_HTML_OUTPUT_FILE=$PROJECT_SYSTEM_SHARE_DIR/html/setup/.cctv-settings.txt

SETUP_LAN_DEVICE=$(/usr/sbin/ip link | grep '2: ' | cut -d : -f2 | head -1 | sed -e 's/ //g')
SETUP_3_4G_DONGLE_FILE=$PROJECT_SYSTEM_CONF_DIR/internet-mobile-usb.cfg
SETUP_MIFI_ROUTER_FILE=$PROJECT_SYSTEM_CONF_DIR/internet-mobile-wifi.cfg
SETUP_WIFI_DEVICES_FILE=$PROJECT_SYSTEM_CONF_DIR/my-wifi-devices.cfg
SETUP_NEWS_RSS_FILE=$PROJECT_SYSTEM_CONF_DIR/rss-feeds.cfg

JAMBULATV_CCTV_SETTINGS_FILE=$PROJECT_SYSTEM_CONF_DIR/cctv-settings.cfg

EMAIL_CREDENTIALS_CONFIG=$PROJECT_SYSTEM_CONF_DIR/messaging-email.cfg
EMAIL_GMAIL_CONFIG=$PROJECT_SYSTEM_CONF_DIR/email-gmail.cfg
TELEGRAM_CREDENTIALS_CONFIG=$PROJECT_SYSTEM_CONF_DIR/messaging-telegram.cfg
WHATSAPP_CREDENTIALS_CONFIG=$PROJECT_SYSTEM_CONF_DIR/messaging-whatsapp.cfg

SETUP_LAN_SYSCONFIG_FILE=/etc/sysconfig/network-scripts/ifcfg-${SETUP_LAN_DEVICE}

JAMBULATV_SSID=$(grep ^ssid= /etc/hostapd/hostapd.conf | cut -d '=' -f2)

OSDRUNFILE=$(grep ^OSDRUNFILE $OSD_TOOL | cut -d '=' -f2 | head -1 | awk {'print $1'} | sed "s/'//g")

OSD_MSG_TURN_ON_SPEAKERS="Please turn on your speakers for a voice assisted setup process"

QRCODE_OSD_MSG_4_SETUP="To begin setup, please use the QR Code Reader App on your smartphone to scan this code.  Alternatively, you may manually open the following link using a browser on your smart phone: http://172.16.0.1:8502  This QR code will only be removed once setup has been completed."

QRCODE_PREFERRED_PLAYER=ffplay
#
case $QRCODE_PREFERRED_PLAYER in
ffplay)
QRCODE_PLAYER_CMD="/usr/bin/ffplay"
QRCODE_WIDTH=570
QRCODE_HEIGHT=570
QRCODE_PLAYER_OPTIONS="-hide_banner -nostats -loglevel error -an -noborder -vf scale=${QRCODE_WIDTH}x${QRCODE_HEIGHT}"
;;
vlc)
QRCODE_PLAYER_CMD="/usr/bin/vlc"
QRCODE_WIDTH=320
QRCODE_HEIGHT=240
QRCODE_PLAYER_OPTIONS="--daemon -I dummy -V x11 --quiet --no-audio --width $QRCODE_WIDTH --height $QRCODE_HEIGHT --loop --meta-title=SETUP --video-title-timeout=300000000000000"
;;
esac

SETUP_ICINGA2_PRESENCE_HOSTS=no #yes
ICINGA2_JAMBULATV_HOSTS_FILE=/etc/icinga2/conf.d/JambulaTV/hosts.conf

JAMBULATV_SETUP_DB_NAME=MY_JAMBULATV_SETUP_DB_NAME
JAMBULATV_SETUP_DB_USER=MY_JAMBULATV_SETUP_DB_USER
JAMBULATV_SETUP_DB_PASS=MY_JAMBULATV_SETUP_DB_PASS
JAMBULATV_SETUP_DB_TABLE=MY_JAMBULATV_SETUP_DB_TABLE

PVR_STATUS_FILE=$(grep ^PVR_STATUS_FILE $KODI_CONTROLLER_TOOL | cut -d '=' -f2 | head -1 | awk {'print $1'})

INITIAL_SETUP_LOG=$HOME/$PROJECT_NAME-initial-setup.log



###############
#  FUNCTIONS  #
###############

check_if_setup_completed () {
# Quit if setup completed
[ -e $SETUP_COMPLETED_FILE ] && exit 0
}

jambula_addons_enable () {
# Enable our custom addons
if [[ ! -e $KODI_USER_DATA/Database/.jambula_addons_enabled && \
	-x $KODI_USER_DATA/Database/jambula_addons.sh ]];
then
sh $KODI_USER_DATA/Database/jambula_addons.sh
# Create enabled file, for query purposes later
touch $KODI_USER_DATA/Database/.jambula_addons_enabled
fi
}

clear_logfile () {
# Remove nginx setup log file
sudo rm -f $PROJECT_SYSTEM_LOG_DIR/setup-nginx.log
# Restart nginx
sudo systemctl restart nginx.service
}

remove_previous_osd_message () {
# Set PID of current OSD tool process
EXISTING_OSD_PID=$(ps auxw | grep -Ev grep | grep ${OSD_TOOL##*/} | grep python | awk {'print $2'})
[ "x$EXISTING_OSD_PID" = "x" ] || sudo kill -15 $EXISTING_OSD_PID
# Remove OSD run file if it exists
[[ -e $OSDRUNFILE ]] && sudo rm -f $OSDRUNFILE
}

remove_previous_qrcode () {
# Kill existing QR Code player process
QRCODE_PLAYER_PID=$(ps auxw | grep -Ev grep | grep ${QRCODE_PLAYER_CMD##*/} | grep qrcodes/setup_url.png | awk {'print $2'})
[ "x$QRCODE_PLAYER_PID" != "x" ] && kill $QRCODE_PLAYER_PID
}

stop_voice_assistant () {
# Set PID of current voice assistant process
PID_SOUNDS_TOOL=$(ps auxw | grep -Ev grep | grep setup-.*wav | awk {'print $2'})
#
# Kill current voice assistant process
[ "x$PID_SOUNDS_TOOL" = "x" ] || kill -15 $PID_SOUNDS_TOOL
}

osd_turn_on_speakers () {
# Kill current OSD tool processes
remove_previous_osd_message
# Display 'Turn on speakers' OSD message
$OSD_TOOL -m "$OSD_MSG_TURN_ON_SPEAKERS"
}

voice_assist_thanks_4_purchase () {
# Voice Assist - Thank you for purchase
$SOUNDS_TOOL setup 1
}

voice_assist_setup_scan_qrcode () {
$SOUNDS_TOOL setup 4
}

voice_assist_setup_completed () {
# Voice Assist - Setup completed
$SOUNDS_TOOL setup 5
}

voice_assist_setup_completed_tutor_channel () {
# Voice Assist - Setup completed + Mention Tutor channel
$SOUNDS_TOOL setup 6
}

display_qrcode_4_setup () {
# Display QR Code since setup not yet done
export DISPLAY=:0.0 && $QRCODE_PLAYER_CMD $QRCODE_PLAYER_OPTIONS $QRCODE_DIR/$QRCODE_FILE &
}

run_auto_wifi_provision () {
sudo $AUTO_WIFI_PROVISION_TOOL 
}

display_and_play_setup_message () {
# Pause a bit so previous voice assistant message completes
sleep 5
# Set Webserver Setup Page accessed to 'Not-Yet-accessed', so we can display OSD & QRcode
SERVER_ACCESSED=255
while [[ "$SERVER_ACCESSED" != "0" ]];
do
# Voice Assist - Scan QR code
voice_assist_setup_scan_qrcode &

# Kill current OSD tool processes
remove_previous_osd_message
# Display setup OSD Message
$OSD_TOOL -m "$QRCODE_OSD_MSG_4_SETUP"

# Check to see if setup web server has been accessed, so we can display OSD
grep form_01.php $PROJECT_SYSTEM_LOG_DIR/setup-nginx.log > /dev/null 2>&1
SERVER_ACCESSED=$?
done
}

configure_internet_connection () {
# Check for Internet settings file
while [ ! -e $SETUP_INTERNET_CONFIG_FILE ];
do
# Wait
sleep 1
done
# Source variables file
. $SETUP_INTERNET_CONFIG_FILE
# Configure internet based on device type selected
case $TYPE in
3_4g_dongle)
[ -e $SETUP_3_4G_DONGLE_FILE ] && sudo chown $MULTIMEDIA_USER $SETUP_3_4G_DONGLE_FILE
cat > $SETUP_3_4G_DONGLE_FILE <<EOF
TYPE='3_4g_dongle'
ISP_NAME=$ISP_NAME
USERNAME=$USERNAME
PASSWORD=$PASSWORD
APN=$APN
EOF
# Trigger 3/4G Internet connect
sudo $PPP_DIAL_TOOL $ISP_NAME $USERNAME $PASSWORD 1 &
;;
mifi_router)
[ -e $SETUP_MIFI_ROUTER_FILE ] && sudo chown $MULTIMEDIA_USER $SETUP_MIFI_ROUTER_FILE
cat > $SETUP_MIFI_ROUTER_FILE <<EOF
ISP_NAME=$ISP_NAME
SSID="$WIFI_SSID"
SECURITY_KEY="$WIFI_SECURITY_KEY"
EOF
# Trigger MiFi Internet connect
sudo $CONNECT_WIFI_AP_TOOL UP &
;;
lan_dhcp)
[ -e $SETUP_LAN_SYSCONFIG_FILE ] && sudo chown $MULTIMEDIA_USER $SETUP_LAN_SYSCONFIG_FILE
cat > $SETUP_LAN_SYSCONFIG_FILE <<EOF
# IP/DNS settings for ${SETUP_LAN_DEVICE}
DEVICE="${SETUP_LAN_DEVICE}"
TYPE="Ethernet"
BOOTPROTO="dhcp"
ONBOOT="yes"
NM_CONTROLLED="no"
EOF
# Restart network
sudo systemctl restart network.service
;;
lan_static)
[ -e $SETUP_LAN_SYSCONFIG_FILE ] && sudo chown $MULTIMEDIA_USER $SETUP_LAN_SYSCONFIG_FILE
cat > $SETUP_LAN_SYSCONFIG_FILE <<EOF
# IP/DNS settings for ${SETUP_LAN_DEVICE}
DEVICE="${SETUP_LAN_DEVICE}"
TYPE="Ethernet"
BOOTPROTO="static"
ONBOOT="yes"
NM_CONTROLLED="no"
IPADDR0="$NETWORK_IP_ADDRESS"
PREFIX0="24"
GATEWAY="$NETWORK_GATEWAY_ADDRESS"
DNS1="$NETWORK_DNS_1"
DNS2="$NETWORK_DNS_2"
DNS3=8.8.4.4
DNS4=208.67.222.222
EOF
# Restart network
sudo systemctl restart network.service
;;
esac
# Remove Internet configure file
sudo rm -f $SETUP_INTERNET_CONFIG_FILE
}

configure_icinga2_presence_detection () {
# Change permissions so we can write to icinga2 hosts file
[ -e $ICINGA2_JAMBULATV_HOSTS_FILE ] && sudo chown $MULTIMEDIA_USER $ICINGA2_JAMBULATV_HOSTS_FILE
# Add to icinga2 hosts file
cat >> $ICINGA2_JAMBULATV_HOSTS_FILE <<EOF

/** 
* Detect presence of $NICKNAME
*/
object Host "$NICKNAME" {
  import "jambula-01-wifi-device"
  vars.macaddress="$MAC_DOTTED"
}
EOF
# Restart icinga2 service
sudo systemctl restart icinga2.service

# Copy presence script used by icinga2, if it does not exist in bin directory
[[ -e $BINARY_PREFIX/jambulatv-presence-detection-via-icinga2 ]] || cp -v $PROJECT_BIN_DIR/jambulatv-presence-detection-via-icinga2 $SCRIPT $BINARY_PREFIX/
}

configure_wifi_mac_addresses () {
# MAC Addresses
while [ ! -e $SETUP_MAC_ADDRESSES_FILE ];
do
# Wait
sleep 1
done
# Change permissions so we can write to My WiFi devices file
[ -e $SETUP_WIFI_DEVICES_FILE ] && sudo chown $MULTIMEDIA_USER $SETUP_WIFI_DEVICES_FILE
# Copy MAC Addresses to JambulaTV WiFi devices file
cat $SETUP_MAC_ADDRESSES_FILE | while read LINE 
do
NICKNAME=$(echo $LINE | cut -d ',' -f1)
MAC_DASHED=$(echo $LINE | cut -d ',' -f2 | sed 's/:/-/g')
MAC_DOTTED=$(echo $LINE | cut -d ',' -f2 )
if [ "x$MAC_DASHED" != "x" ];
then
# Add to My-WiFi devices file
echo "$MAC_DASHED | $NICKNAME | no" >> $SETUP_WIFI_DEVICES_FILE
#
# Set up icinga2 hosts for user presence detections if requested
[ "$SETUP_ICINGA2_PRESENCE_HOSTS" = "yes" ] && configure_icinga2_presence_detection
# 
else
break
fi
done
# Remove MAC set up file
sudo rm -f $SETUP_MAC_ADDRESSES_FILE
}

configure_live_tv () {
# Wait for dvbt config file to show up first
while [ ! -e $SETUP_DVBT_CONFIG_FILE  ];
do
# Wait
sleep 1
done
#
# Source DVBT settings
[ -e $SETUP_DVBT_CONFIG_FILE ] && . $SETUP_DVBT_CONFIG_FILE
#
# Configure TVHeadend
if [[ ! -e $TVHEADEND_CONFIG_DIR/.dvbt_configured && "$TVH_DVBT_CONFIG_REQUESTED" = "y" ]];
then

# Source Live TV variables
dvbt_set_variables

# Create, configure DVB-T network, then Scan and Map all available channels
sudo $TVHEADEND_CONTROLLER_TOOL dvb all

# Since DVBT configure was requested, enable PVR functions in kodi 
# ----------------------------------------------------------------
#
# 1) Check status of pvr.hts addon, and enable it if false
$KODI_CONTROLLER_TOOL addon_status pvr.hts > /dev/null 2>&1
# Source PVR status temp file
[ -e $PVR_STATUS_FILE ] && . $PVR_STATUS_FILE
# If status is disabled - Enable it! i.e. Toggle to true
[ "$ADDON_STATUS" = "true" ] || $KODI_CONTROLLER_TOOL addon_switch pvr.hts > /dev/null 2>&1
# Let other runs know, we did this already
touch $KODI_USER_DATA/.pvrmanager_enabled 

# 2) Add Jambula customized guisettings file with support for Live TV - Overrides previous install setting
KODI_GUISETTINGS_FILE=$PROJECT_CONFIGS_DIR/kodi/guisettings.with.pvr.xml
#
cat $KODI_GUISETTINGS_FILE | \
	sed -e "s:KODI_HTTP_USER:$KODI_HTTP_USER:g" | \
   	sed -e "s:KODI_HTTP_PASS:$KODI_HTTP_PASS:g" | \
	sed -e "s:KODI_HTTP_PORT:$KODI_HTTP_PORT:g" | \
   	sed -e "s:SMB_WORKGROUP:$SMB_WORKGROUP:g" \
	> $KODI_USER_DATA/guisettings.xml

fi
}

remove_current_qrcode () {
# Wait for setup to complete successfully
while [ ! -e $SETUP_COMPLETED_FILE ];
do
sleep 1
echo "Waiting for Setup to complete"
done
# Remove QR Code since setup completed
QRCODE_PID=$(ps auxw | grep -Ev grep | grep $QRCODE_FILE | awk {'print $2'})
kill -15 $QRCODE_PID || kill -9 $QRCODE_PID
}

query_mysql_db () {
mysql -s -u ${JAMBULATV_SETUP_DB_USER} -p${JAMBULATV_SETUP_DB_PASS} 2> /dev/null << EOF
USE ${JAMBULATV_SETUP_DB_NAME};
SELECT $@ FROM ${JAMBULATV_SETUP_DB_TABLE} WHERE id = (SELECT MAX(id) FROM ${JAMBULATV_SETUP_DB_TABLE});
EOF
}

extract_setup_variables () {
# Set All variables
CONTACT_NAME=$(query_mysql_db contact_name)
CONTACT_EMAIL=$(query_mysql_db contact_email)
CONTACT_PHONE=$(query_mysql_db contact_phone)
CONTACT_BIRTHDAY=$(query_mysql_db contact_birthday)
CONTACT_ADDRESS1=$(query_mysql_db contact_address1)
CONTACT_ADDRESS2=$(query_mysql_db contact_address2)
CONTACT_CITY=$(query_mysql_db contact_city)
CONTACT_COUNTRY=$(query_mysql_db contact_country)
SYSTEM_PASSWORD=$(query_mysql_db system_password)
ISP_NAME=$(query_mysql_db isp_name)
INTERNET_DEVICE=$(query_mysql_db internet_device)
WIFI_NICKNAME_1=$(query_mysql_db wifi_nickname_1)
WIFI_MAC_1=$(query_mysql_db wifi_mac_1)
WIFI_NICKNAME_2=$(query_mysql_db wifi_nickname_2)
WIFI_MAC_2=$(query_mysql_db wifi_mac_2)
WIFI_NICKNAME_3=$(query_mysql_db wifi_nickname_3)
WIFI_MAC_3=$(query_mysql_db wifi_mac_3)
WIFI_NICKNAME_4=$(query_mysql_db wifi_nickname_4)
WIFI_MAC_4=$(query_mysql_db wifi_mac_4)
WIFI_NICKNAME_5=$(query_mysql_db wifi_nickname_5)
WIFI_MAC_5=$(query_mysql_db wifi_mac_5)
NETWORK_APN=$(query_mysql_db network_apn)
MIFI_SSID=$(query_mysql_db mifi_ssid)
MIFI_PASS=$(query_mysql_db mifi_pass)
LAN_IP_ADDR=$(query_mysql_db lan_ip_addr)
LAN_IP_GATE=$(query_mysql_db lan_ip_gate)
LAN_DNS_1=$(query_mysql_db lan_dns_1)
LAN_DNS_2=$(query_mysql_db lan_dns_2)
TVH_DVBT_CONFIG_REQUESTED=$(query_mysql_db tvh_dvbt_config_requested)
TV_MARKET=$(query_mysql_db tv_market)
DVBT_TUNER_NAME=$(query_mysql_db dvbt_tuner_name)
SCHEDULE_TVSERIES=$(query_mysql_db schedule_tvseries)
SCHEDULE_PODCASTS=$(query_mysql_db schedule_podcasts)
SCHEDULE_MOVIES=$(query_mysql_db schedule_movies)
TRAKTV_USERNAME=$(query_mysql_db traktv_username)
TRAKTV_WATCHLIST=$(query_mysql_db traktv_watchlist)
TELEGRAM_BOT_ID=$(query_mysql_db telegram_bot_id)
TELEGRAM_CHAT_ID=$(query_mysql_db telegram_chat_id)
TELEGRAM_USERNAME=$(query_mysql_db telegram_username)
WHATSAPP_NO_RECIPIENT=$(query_mysql_db whatsapp_no_recipient)
WHATSAPP_NO_SENDER=$(query_mysql_db whatsapp_no_sender)
NOTIFICATION_EMAIL_ADDRESS=$(query_mysql_db notification_email_address)
GMAIL_ADDRESS=$(query_mysql_db gmail_address)
GMAIL_PASSWORD=$(query_mysql_db gmail_password)
NEWS_SOURCES=$(query_mysql_db news_sources | sed 's:,: :g')
}

gmail_smtp_setup () {
[ -e $EMAIL_GMAIL_CONFIG ] && sudo chown $MULTIMEDIA_USER $EMAIL_GMAIL_CONFIG
# Add usernames, passwords credentials to Gmail config
cat >> $EMAIL_GMAIL_CONFIG << EOF
# GMail username and password
EMAIL_SMTP_AUTH_USERNAME="$GMAIL_ADDRESS"
EMAIL_SMTP_AUTH_ENCRYPT="$(echo $GMAIL_PASSWORD | openssl enc -base64 -e)"
EOF
}

email_messaging_setup () {
[ -e $EMAIL_CREDENTIALS_CONFIG ] || sudo touch $EMAIL_CREDENTIALS_CONFIG
[ -e $EMAIL_CREDENTIALS_CONFIG ] && sudo chown $MULTIMEDIA_USER $EMAIL_CREDENTIALS_CONFIG
cat > $EMAIL_CREDENTIALS_CONFIG << EOF
EMAIL_TO_ADDRESS="$NOTIFICATION_EMAIL_ADDRESS"
EMAIL_CC_ADDRESS=""
EOF
}

telegram_messaging_setup () {
[ -e $TELEGRAM_CREDENTIALS_CONFIG ] && sudo chown $MULTIMEDIA_USER $TELEGRAM_CREDENTIALS_CONFIG
cat >> $TELEGRAM_CREDENTIALS_CONFIG << EOF
TELEGRAM_API_BOT="$TELEGRAM_BOT_ID"
TELEGRAM_CHAT_ID="$TELEGRAM_CHAT_ID"
TELEGRAM_USERNAME="$TELEGRAM_USERNAME"
EOF
}

whatsapp_messaging_setup () {
[ -e $WHATSAPP_CREDENTIALS_CONFIG ] && sudo chown $MULTIMEDIA_USER $WHATSAPP_CREDENTIALS_CONFIG
cat > $WHATSAPP_CREDENTIALS_CONFIG << EOF
# TIP: Run the script $WHATSAPP_TOOL to generate the rest of whatsapp settings
WHATSAPP_TOOL=$WHATSAPP_TOOL
WHATSAPP_PHONE_NUMBER_SENDER=$WHATSAPP_NO_SENDER
WHATSAPP_PHONE_NUMBER_RECIPIENT=$WHATSAPP_NO_RECIPIENT
EOF
}

messaging_services_setup () {
# Extract variables from mysql
extract_setup_variables
# GMail smtp setup
gmail_smtp_setup
# Regular email
email_messaging_setup
# Telegram
telegram_messaging_setup
# WhatsApp
whatsapp_messaging_setup
}

flexget_secrets_setup () {
# Extract variables from mysql
extract_setup_variables
# Split into Hour, Minute. Use expr to remove leading zeros
FLEXGET_SCHEDULE_TVSHOWS_HR=$(expr $(echo $SCHEDULE_TVSERIES | cut -d : -f1) + 0)
FLEXGET_SCHEDULE_TVSHOWS_MIN=$(expr $(echo $SCHEDULE_TVSERIES | cut -d : -f2) + 0)
#
FLEXGET_SCHEDULE_PODCASTS_HR=$(expr $(echo $SCHEDULE_PODCASTS | cut -d : -f1) + 0)
FLEXGET_SCHEDULE_PODCASTS_MIN=$(expr $(echo $SCHEDULE_PODCASTS | cut -d : -f2) + 0)
#
FLEXGET_SCHEDULE_MOVIES_HR=$(expr $(echo $SCHEDULE_MOVIES | cut -d : -f1) + 0)
FLEXGET_SCHEDULE_MOVIES_MIN=$(expr $(echo $SCHEDULE_MOVIES | cut -d : -f2) + 0)
#
# Copy original flexget secrets file
cp -v $FLEXGET_CONFIG_DIR/variables.yml $FLEXGET_CONFIG_DIR/variables.yml.b4.setup
# Replace variables
cat $FLEXGET_CONFIG_DIR/variables.yml.b4.setup | \
   sed -e "s:EMAIL_TO_ADDRESS:$NOTIFICATION_EMAIL_ADDRESS:g" | \
   sed -e "s:TRAKT_USERNAME:$TRAKTV_USERNAME:g" | \
   sed -e "s:TRAKT_WATCHLIST:$TRAKTV_WATCHLIST:g" | \
   sed -e "s:GOOGLE_SERVICES_USERNAME:$GMAIL_ADDRESS:g" | \
   sed -e "s:GOOGLE_SERVICES_PASSWORD:$GMAIL_PASSWORD:g" | \
   sed -e "s/TELEGRAM_API_BOT/$TELEGRAM_BOT_ID/g" | \
   sed -e "s:TELEGRAM_USERNAME:$TELEGRAM_USERNAME:g" | \
   sed -e "s:FLEXGET_SCHEDULE_TVSHOWS_HR:$FLEXGET_SCHEDULE_TVSHOWS_HR:g" | \
   sed -e "s:FLEXGET_SCHEDULE_TVSHOWS_MIN:$FLEXGET_SCHEDULE_TVSHOWS_MIN:g" | \
   sed -e "s:FLEXGET_SCHEDULE_PODCASTS_HR:$FLEXGET_SCHEDULE_PODCASTS_HR:g" | \
   sed -e "s:FLEXGET_SCHEDULE_PODCASTS_MIN:$FLEXGET_SCHEDULE_PODCASTS_MIN:g" | \
   sed -e "s:FLEXGET_SCHEDULE_MOVIES_HR:$FLEXGET_SCHEDULE_MOVIES_HR:g" | \
   sed -e "s:FLEXGET_SCHEDULE_MOVIES_MIN:$FLEXGET_SCHEDULE_MOVIES_MIN:g" \
	> $FLEXGET_CONFIG_DIR/variables.yml
# Restart Flexget
sudo systemctl restart flexget.service
}

asterisk_google_xmpp_setup() {
# Extract variables from mysql
extract_setup_variables
# Add google credentials
sudo sed -i "s:GOOGLE_SERVICES_USERNAME:$GMAIL_ADDRESS:g" $ASTERISK_AGI_BIN_DIR/include_xmpp_providers.sh
sudo sed -i "s:GOOGLE_SERVICES_PASSWORD:$GMAIL_PASSWORD:g" $ASTERISK_AGI_BIN_DIR/include_xmpp_providers.sh
}

cctv_alarm_setup () {
# CCTV Alarm settings
while [ ! -e $CCTV_HTML_OUTPUT_FILE ];
do
# Wait
sleep 1
done

# Change permissions so we can write to JambulaTV CCTV settings file
[ -e $JAMBULATV_CCTV_SETTINGS_FILE ] && sudo chown $MULTIMEDIA_USER $JAMBULATV_CCTV_SETTINGS_FILE
# Copy CCTV HTML output to JambulaTV CCTV settings file
cat $CCTV_HTML_OUTPUT_FILE > $JAMBULATV_CCTV_SETTINGS_FILE
#
# Change permissions to multimedia user
sudo chown $MULTIMEDIA_USER $JAMBULATV_CCTV_SETTINGS_FILE
#
# Remove MAC set up file
sudo rm -f $CCTV_HTML_OUTPUT_FILE
}

news_headlines_setup() {
# Extract variables from mysql
extract_setup_variables

# Change permissions of RSS file if one already exists
[ -e $SETUP_NEWS_RSS_FILE ] && sudo chown $MULTIMEDIA_USER $SETUP_NEWS_RSS_FILE

# Empty existing file
echo "" > $SETUP_NEWS_RSS_FILE

# Cycle through user chosen sources
for SOURCE in $NEWS_SOURCES;
do

case $SOURCE in

bbc_world)
# BBC World
cat >> $SETUP_NEWS_RSS_FILE <<FEEDS
# BBC World
World Political | http://feeds.bbci.co.uk/news/world/rss.xml
World Business | http://feeds.bbci.co.uk/news/business/rss.xml
World Technology | http://feeds.bbci.co.uk/news/technology/rss.xml
World Sports | http://feeds.bbci.co.uk/sport/rss.xml

FEEDS
;;

daily_monitor_ug)
# Daily Monitor Uganda
cat >> $SETUP_NEWS_RSS_FILE <<FEEDS
# Daily Monitor Uganda
Uganda Political | http://www.monitor.co.ug/News/688324-688324-view-asFeed-1116p1pz/index.xml
Uganda Business | http://www.monitor.co.ug/Business/688322-688322-view-asFeed-ey54eez/index.xml
Uganda Sports | http://www.monitor.co.ug/Sports/690254-690254-view-asFeed-rknahxz/index.xml

FEEDS
;;

allafrica)
# All Africa
cat >> $SETUP_NEWS_RSS_FILE <<FEEDS
# All Africa
Africa Political | http://allafrica.com/tools/headlines/rdf/latest/headlines.rdf
Africa Business | http://allafrica.com/tools/headlines/rdf/business/headlines.rdf
Africa Sports | http://allafrica.com/tools/headlines/rdf/sport/headlines.rdf
Africa Technology | http://allafrica.com/tools/headlines/rdf/ict/headlines.rdf

FEEDS
;;

observer_ug)
# Observer - Uganda
cat >> $SETUP_NEWS_RSS_FILE <<FEEDS
# Observer - Uganda
Uganda Political | http://www.observer.ug/news/headlines/?format=feed&type=rss

FEEDS
;;

chimpreports_ug)
# Chimp Reports - Uganda
cat >> $SETUP_NEWS_RSS_FILE <<FEEDS
# Chimp Reports - Uganda
Uganda Political | http://www.chimpreports.com/feed/

FEEDS
;;

esac

done
}

reset_system_password () {
# Extract variables from mysql
extract_setup_variables
echo "root:$SYSTEM_PASSWORD" | sudo /usr/sbin/chpasswd
echo "$MULTIMEDIA_USER:$SYSTEM_PASSWORD" | sudo /usr/sbin/chpasswd
}

email_system_info () {
# Extract variables from mysql
extract_setup_variables

# Email system info and passwords for storage
$SEND_EMAIL_TOOL $CONTACT_EMAIL "[JambulaTV] Setup completed" "Dear $CONTACT_NAME, 

Congratulations! The initial setup of your JambulaTV completed successfully.

Please store the following system information in a safe place.

In case you need assistance, our support team may ask you for this!

Product:	$PRODUCT
Version:	$VERSION
Serial No:	$SERIAL

User credentials
----------------
[root]
$SYSTEM_PASSWORD

[$MULTIMEDIA_USER]
$SYSTEM_PASSWORD

"
}

create_video_music_db () {
sudo $KODI_LIBRARY_TOOL create
}

scan_video_music_db () {
sudo $KODI_LIBRARY_TOOL scan
}



#################
#  MAIN SCRIPT  #
#################

check_if_setup_completed

# Start logging to file
exec 2>> $INITIAL_SETUP_LOG
logger -s -t $(basename $0) "JambulaTV Setup: START"

osd_turn_on_speakers

voice_assist_thanks_4_purchase

jambula_addons_enable

clear_logfile

run_auto_wifi_provision

display_qrcode_4_setup

display_and_play_setup_message

configure_internet_connection
configure_wifi_mac_addresses

messaging_services_setup

configure_live_tv # Run after setting up messaging services

remove_current_qrcode

flexget_secrets_setup
asterisk_google_xmpp_setup

cctv_alarm_setup

news_headlines_setup

reset_system_password

email_system_info

# End
logger -s -t $(basename $0) "JambulaTV Setup: END"

voice_assist_setup_completed_tutor_channel

# Scan library
create_video_music_db
scan_video_music_db

# Enable icinga2 systemd unit 
systemctl enable icinga2.service
