#!/bin/sh
# This is a web scraper tool for fetching planned power outage
# reports from Uganda's Electricity distributor - UMEME
#
# Prerequisites:
# Install catdoc i.e. yum install catdoc
# Install poppler-utils i.e. yum install poppler-utils
# Install pdfgrep i.e. yum install pdfgrep
#
# Disclaimer: We do not work for UMEME, neither do I have direct access# to their servers, so this script may break should there be changes 
# to their website
#
# Jambula Labs @copyright 2020-2021 All rights reserved

# Source global settings
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_GLOBAL_SETTINGS_FILE=$PROJECT_SYSTEM_CONF_DIR/global-settings.cfg
. $PROJECT_GLOBAL_SETTINGS_FILE

# Variables
DEBUG=n #y|n - set to 'n' when in production 

DATE_TOMORROW_DAY_FORMAT=$(date --date='1 day' +'%A')
DATE_AFTER_TOMORROW_DAY_FORMAT=$(date --date='2 day' +'%A')

THIS_YEAR=$(date +%Y)
THIS_MONTH_NAME_FULL=$(date +%B)
THIS_MONTH_DIGIT=$(date +%m)
THIS_MONTH_LAST_TODAY=$(date -d "-$(date +%d) days  month" +%d)
THIS_MONTH_LAST_TODAY_DAY_OF_YEAR=$(date -d "${THIS_MONTH_NAME_FULL} ${THIS_MONTH_LAST_TODAY} ${THIS_YEAR}" +%_j)
THIS_MONTH_TODAY_DAY_OF_YEAR=$(date +%_j)
THIS_MONTH_DAYS_LEFT=$((${THIS_MONTH_LAST_TODAY_DAY_OF_YEAR} - ${THIS_MONTH_TODAY_DAY_OF_YEAR} -3))

DATE_DIGIT_TODAY=$(date +'%d')
DATE_DIGIT_TOMORROW=$(date --date='1 day' +'%d')
DATE_DIGIT_AFTER_TOMORROW=$(date --date='2 day' +'%d')

CURL_CMD="/usr/bin/curl"
CURL_OPTS="-s -S -L"

USER_AGENT="Mozilla/5.0 (X11; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0"

TERM=xterm

UMEME_HOME_WEB_PAGE="https://www.umeme.co.ug"
UMEME_USING_JS=yes
# If sites uses javascript
if [[ "$UMEME_USING_JS" = "yes" ]];
then
UMEME_OUTAGES_WEB_PAGE=$UMEME_HOME_WEB_PAGE/umeme_api/wp-json/wp/v2/planned_shutdown_sch
else
UMEME_OUTAGES_WEB_PAGE=$UMEME_HOME_WEB_PAGE/outages
fi
#
UMEME_OUTAGES_OUTPUT=/tmp/umeme-outages.html
UMEME_OUTAGES_FILE_FORMAT=pdf
# UMEME variables based on input file
case $UMEME_OUTAGES_FILE_FORMAT in
pdf)
DATE_AFTER_TOMORROW_UMEME_FORMAT=$(date --date='2 day' +'%d %B')
DATE_TOMORROW_UMEME_FORMAT=$(date --date='1 day' +'%d %B')
DATE_TODAY_UMEME_FORMAT=$(date +'%d %B')
UMEME_OUTAGES_PLANNED_FILE=/JambulaTV/Downloads/UMEME-planned-outages-${THIS_YEAR}-${THIS_MONTH_DIGIT}.pdf
;;
xls)
DATE_AFTER_TOMORROW_UMEME_FORMAT=$(date --date='2 day' +'%A,%d')
DATE_TOMORROW_UMEME_FORMAT=$(date --date='1 day' +'%A,%d')
DATE_TODAY_UMEME_FORMAT=$(date +'%A,%d')
UMEME_OUTAGES_PLANNED_FILE=/JambulaTV/Downloads/UMEME-planned-outages-${THIS_YEAR}-${THIS_MONTH_DIGIT}.xls
;;
esac

# Maximum age of outages file - NOTE: 1 day in seconds = 86400
MAXIMUM_AGE_OF_UMEME_OUTAGES_PLANNED_FILE=$((${THIS_MONTH_DAYS_LEFT} * 86400))

# Our output file
UMEME_OUTAGES_PLANNED_FILE_CSV=/JambulaTV/Downloads/UMEME-planned-outages-${THIS_YEAR}-${THIS_MONTH_DIGIT}.csv

PING_COUNT=1 #9
PING_IP_ADDRESS=$PING_IP_ADDRESS

OUTAGE_DAY="$1"
LIST_OF_AREAS="${@:2}"



###############
#  FUNCTIONS  #
###############

usage () {
if [[ "x$OUTAGE_DAY" = "x" ]];
then
# Print usage help and quit
echo "Usage: $(basename $0) [today|tomorrow|ongoing|after_tomorrow] [AREA1, AREA2, AREA3, ...]"
exit 0

elif [[ "$OUTAGE_DAY" = "ongoing" ]];
then
echo "Sorry, not yet supported.  Please try the API based tool"
exit 0

elif [[ "x$LIST_OF_AREAS" = "x" ]];
then
# Print usage help and quit
echo "Usage: $(basename $0) $OUTAGE_DAY [AREA1, AREA2, AREA3, ...]"
exit 0
fi
}

set_logging_level () {
if [[ "$DEBUG" = "y" ]];
then
LOGGER_CMD="/usr/bin/logger -s -t $(basename $0)"
#
$LOGGER_CMD "Debugging is enabled, please disable while in production"
else
LOGGER_CMD="/usr/bin/logger -t $(basename $0)"
fi
}

check_internet_access () {
# Check for internet connectivity - IMPORTANT: Don't use DNS to ping use actual IP address
ping -c $PING_COUNT $PING_IP_ADDRESS > /dev/null 2>&1
INTERNET_ALIVE=$?
#
# Quit if no Internet
if [[ "$INTERNET_ALIVE" != "0" ]];
then
$LOGGER_CMD $(basename $0) "Error: You are not connected to the Internet. Please check your router and try again later!"
# Before quiting, print 'none' 
echo none
exit 0
fi
}

DaySuffix() {
  case $DATE_DIGIT_OF_SPECIFIED_DAY in
    1|21|31) echo "st";;
    2|22)    echo "nd";;
    3|23)    echo "rd";;
    *)       echo "th";;
  esac
}

download_outages_webpage () {
# Check if Internet connection is up
check_internet_access

# Download latest outages web page from UMEME website
$LOGGER_CMD $(basename $0) "Downloading UMEME outages web page:  $UMEME_OUTAGES_WEB_PAGE ..."
#
$CURL_CMD $CURL_OPTS -A "$USER_AGENT" -o $UMEME_OUTAGES_OUTPUT $UMEME_OUTAGES_WEB_PAGE
}

extract_outages_file_link () {
# Skip if no outages file was found
[[ -s $UMEME_OUTAGES_OUTPUT ]] || continue
#
if [[ "$UMEME_USING_JS" = "yes" ]];
then
UMEME_OUTAGES_URL=$(cat $UMEME_OUTAGES_OUTPUT | jq -r .[].acf.file)

else
UMEME_OUTAGES_URL=$(sed -n 's/.*href="\([^"]*\).*/\1/p' $UMEME_OUTAGES_OUTPUT | grep -i -e $THIS_MONTH_NAME_FULL -e shutdown)
fi
}

download_outages_file_if_found () {
# Quit if no links related to planned outages were found
if [[ "x$UMEME_OUTAGES_URL" = "x" ]];
then
clear
cat <<EOF
Error: Am sorry I did not find any UMEME link to ${THIS_MONTH_NAME_FULL}'s planned power outages. 
Please visit $UMEME_OUTAGES_WEB_PAGE to find out why its missing.
EOF
#
# Before quiting, print 'none' if outages file is missing 
echo none
exit 1

else
# Check if Internet connection is up
check_internet_access

# Remove old planned outages file
[[ -e $UMEME_OUTAGES_PLANNED_FILE ]] && sudo rm -f $UMEME_OUTAGES_PLANNED_FILE
# Fetch planned outages file
$LOGGER_CMD $(basename $0) "Downloading UMEME Planned outages file for ${THIS_MONTH_NAME_FULL}:  $UMEME_OUTAGES_URL ..."
wget -q -O $UMEME_OUTAGES_PLANNED_FILE $UMEME_OUTAGES_URL > /dev/null 2>&1
fi
}

get_outages_file () {
# If UMEME output file is still fresh, set variable to yes
[[ -e "$UMEME_OUTAGES_PLANNED_FILE" && "$(date -d "now - $(stat -c "%Z" $UMEME_OUTAGES_PLANNED_FILE) seconds" +%s)" -lt "$MAXIMUM_AGE_OF_UMEME_OUTAGES_PLANNED_FILE" ]] && UMEME_OUTAGES_PLANNED_FILE_IS_FRESH=yes
#
# See what sort of file exists
file $UMEME_OUTAGES_PLANNED_FILE | grep -i -e 'PDF document' -e 'Composite Document' -e 'OpenDocument Text' > /dev/null 2>&1
FILE_FORMAT_VALIDITY=$?

if [[ ! -e "$UMEME_OUTAGES_PLANNED_FILE" ]] || [[ "x$UMEME_OUTAGES_PLANNED_FILE_IS_FRESH" = "x" || "$UMEME_OUTAGES_PLANNED_FILE_IS_FRESH" != "yes" ]];
then
# Download outages web page
download_outages_webpage
# Extract outages link if any
extract_outages_file_link
# Download outages file if found
download_outages_file_if_found

elif [[ "$UMEME_OUTAGES_PLANNED_FILE_IS_FRESH" = "yes" && ! -s "$UMEME_OUTAGES_PLANNED_FILE" ]] || [[ "$UMEME_OUTAGES_PLANNED_FILE_IS_FRESH" = "yes" && "$FILE_FORMAT_VALIDITY" != "0" ]];
then
# No valid file, and no Internet, so quit
clear
$LOGGER_CMD $(basename $0) "The file $UMEME_OUTAGES_PLANNED_FILE is either empty or not usable. Please run this tool again to download a fresh copy.  You can also manually fetch this file from:

$UMEME_OUTAGES_WEB_PAGE

"
# Remove corrupted file
[[ -e $UMEME_OUTAGES_PLANNED_FILE ]] && rm -f $UMEME_OUTAGES_PLANNED_FILE
#
# Before quiting, print 'none' if outages file is missing 
echo none
exit 1
fi
}

prepare_outages_file () {
# Covert xls to csv
[[ "$UMEME_OUTAGES_FILE_FORMAT" = "xls" ]] && \
	xls2csv -x $UMEME_OUTAGES_PLANNED_FILE -s cp1252 -d 8859-1 | sed "s:\"::g"> $UMEME_OUTAGES_PLANNED_FILE_CSV

# Convert PDF to txt # NOT Needed - use 'pdfgrep'
#[ "$UMEME_OUTAGES_FILE_FORMAT" = "pdf" ] && \
#	pdftotext -layout $UMEME_OUTAGES_PLANNED_FILE $UMEME_OUTAGES_PLANNED_FILE_CSV
}

outage_ongoing () {
:
}

outage_today () {
# Add ordinal suffix
DATE_DIGIT_OF_SPECIFIED_DAY=${DATE_DIGIT_TODAY}
# Set outage coming flag if date is found in outages file
case "$UMEME_OUTAGES_FILE_FORMAT" in
pdf)
pdfgrep -i "\b${VILLAGE}\b" $UMEME_OUTAGES_PLANNED_FILE | grep -Ei "$DATE_DIGIT_TODAY$(DaySuffix).*${THIS_MONTH_NAME_FULL}" > /dev/null 2>&1
OUTAGE_COMING_TODAY=$?
;;
xls)
grep -i $DATE_TODAY_UMEME_FORMAT $UMEME_OUTAGES_PLANNED_FILE_CSV | grep -i "\b${VILLAGE}\b" > /dev/null 2>&1
OUTAGE_COMING_TODAY=$?
;;
esac
}

outage_tomorrow () {
# Add ordinal suffix
DATE_DIGIT_OF_SPECIFIED_DAY=${DATE_DIGIT_TOMORROW}
# Set outage coming flag if date is found in outages file
case "$UMEME_OUTAGES_FILE_FORMAT" in
pdf)
pdfgrep -i "\b${VILLAGE}\b" $UMEME_OUTAGES_PLANNED_FILE | grep -Ei "$DATE_DIGIT_TOMORROW$(DaySuffix).*${THIS_MONTH_NAME_FULL}" > /dev/null 2>&1
OUTAGE_COMING_TOMORROW=$?
;;
xls)
grep -i $DATE_TOMORROW_UMEME_FORMAT $UMEME_MONTHLY_FILE | grep -i "\b${VILLAGE}\b" > /dev/null 2>&1
OUTAGE_COMING_TOMORROW=$?
;;
esac
}

outage_in_two_days_time () {
# Add ordinal suffix
DATE_DIGIT_OF_SPECIFIED_DAY=${DATE_DIGIT_AFTER_TOMORROW}
# Set outage coming flag if date is found in outages file
case "$UMEME_OUTAGES_FILE_FORMAT" in
pdf)
pdfgrep -i "\b${VILLAGE}\b" $UMEME_OUTAGES_PLANNED_FILE | grep -Ei "$DATE_DIGIT_AFTER_TOMORROW$(DaySuffix).*${THIS_MONTH_NAME_FULL}" > /dev/null 2>&1
OUTAGE_COMING_TWO_DAYS=$?
;;
xls)
grep -i $DATE_AFTER_TOMORROW_UMEME_FORMAT $UMEME_OUTAGES_PLANNED_FILE_CSV | grep -i "\b${VILLAGE}\b" > /dev/null 2>&1
OUTAGE_COMING_TWO_DAYS=$?
;;
esac
}



#################
#  MAIN SCRIPT  #
#################

# Usage
usage

# Notify if logging is enabled
set_logging_level

# Get and prepare outages file
get_outages_file
prepare_outages_file

# Check for selected power outage areas
IFS="," MY_VILLAGES=($LIST_OF_AREAS)
for VILLAGE in ${MY_VILLAGES[@]};
do
VILLAGE=$(echo "$VILLAGE" | sed "s:^ ::g" | sed "s:$ ::g")
case $OUTAGE_DAY in
ongoing)
outage_ongoing
;;

today)
outage_today
[[ "$OUTAGE_COMING_TODAY" = "0" ]] && echo $VILLAGE || echo none
;;

tomorrow)
outage_tomorrow
[[ "$OUTAGE_COMING_TOMORROW" = "0" ]] && echo $VILLAGE || echo none
;;

after_tomorrow)
outage_in_two_days_time
[[ "$OUTAGE_COMING_TWO_DAYS" = "0" ]] && echo $VILLAGE || echo none
;;

any|*)
outage_today
outage_tomorrow
outage_in_two_days_time
#
[[ "$OUTAGE_COMING_TODAY" = "0" ]] && echo "Today: $VILLAGE" || echo none
[[ "$OUTAGE_COMING_TOMORROW" = "0" ]] && echo "$DATE_TOMORROW_DAY_FORMAT: $VILLAGE" || echo none
[[ "$OUTAGE_COMING_TWO_DAYS" = "0" ]] && echo "$DATE_AFTER_TOMORROW_DAY_FORMAT: $VILLAGE" || echo none
;;
esac

done
