#!/bin/sh
# This is the text-to-speech tool used for JambulaTV services.
# Use it to read time, weather, etc
# Jambula Labs @copyright 2018-2019 All rights reserved

# Variables
TTS_PLAY_CMD="/usr/bin/ffplay"
TTS_QUIT_CMD=""
TTS_PLAY_CMD_OPTS="-loglevel quiet -vn -nodisp -autoexit"

TTS_OUTPUT_FILE=/var/tmp/tts_output.wav # IMPORTANT: Must be on 'ext4' partition i.e. /var
TTS_API=$1
TTS_ACTION=$2
TTS_CUSTOM_MESSAGE=$3

PING_TIMEOUT=2 #9
PING_IP_ADDRESS=8.8.8.8

JAMBULATV_SOUNDS_DIR="/usr/share/JambulaTV/sounds"
SOUND_EFFECTS_WAITING="$JAMBULATV_SOUNDS_DIR/waiting-4-online-response.wav"
SOUND_EFFECTS_TEMP_SCRIPT=/tmp/sound_effects.sh
SOUND_EFFECTS_TEMP_SCRIPT_PID=$(ps auxw | grep -v grep | grep $(basename $SOUND_EFFECTS_WAITING) | awk {'print $2'})

MULTIMEDIA_USER=MY_MULTIMEDIA_USER

USER_AGENT="MY_USER_AGENT"

CURL_CMD="/usr/bin/curl"



###############
#  FUNCTIONS  #
###############
usage () {
# TTS Action
if [[ "x$TTS_ACTION" = "x" ]];
then

clear
cat <<EOT
Usage:  
./`basename $0` [Speech API] time
./`basename $0` [Speech API] weather [Period] [Weather API] [Debugging]
./`basename $0` [Speech API] custom [Message]

EOT
exit 1

elif [[ "$TTS_ACTION" = "custom" && "x$TTS_CUSTOM_MESSAGE" = "x" ]];
then
clear
cat <<EOT
Usage:  
./`basename $0` [Speech API] custom [Message]

EOT
exit 1

fi
}

check_internet_access () {
# Check for internet connectivity - IMPORTANT: Don't use DNS to ping use actual IP address
ping -w $PING_TIMEOUT $PING_IP_ADDRESS > /dev/null 2>&1
INTERNET_ALIVE=$?
export INTERNET_ALIVE
#
# Add bogus sound effects file to stop beep if there's No Internet 
[ "$INTERNET_ALIVE" = "0" ] || touch $TTS_OUTPUT_FILE
}

tts_waiting_sound_effects () {
# Add bogus sound effects file to stop beep if No action specified
[ "x$TTS_ACTION" = "x" ] && touch $TTS_OUTPUT_FILE
#
# Play waiting for api sound effects
jambulatv-sounds api $TTS_OUTPUT_FILE
}

text2speech_pico () {
# Run pico2wave command
/usr/bin/pico2wave --lang=en-US --wave=$TTS_OUTPUT_FILE "$@"
}

text2speech_acapela () {
$CURL_CMD $CURL_OPTS $($CURL_CMD $CURL_OPTS -A "$USER_AGENT" -H "Keep-Alive:300" -H "Connection:keep-alive" -H "Content-type:application/x-www-form-urlencoded" -d MyLanguages=sonid10 -d MySelectedVoice=Sharon -d MyTextForTTS="$(echo "$1" | sed -e "s: :%20:g" | sed -e "s:'::g")" -d t=1 -d SendToVaaS="" "http://www.acapela-group.com/demo-tts/DemoHTML5Form_V2.php" | grep -o "http.*mp3") > $TTS_OUTPUT_FILE
}

text2speech_google () {
$CURL_CMD $CURL_OPTS -A "$USER_AGENT" -o $TTS_OUTPUT_FILE "http://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&q="$(echo "$1" | sed -e "s: :%20:g" | sed -e "s:'::g")"&tl=En-us"
}

text2speech_watson () {
$CURL_CMD $CURL_OPTS -A "$USER_AGENT" -u "6aa3bbba-a513-42fe-954a-f6c23b7a5f8e":"DNAjnRVn5btV" -H "Content-Type: application/json" -H "Accept: audio/wav" -d "{\"text\":\"$1\"}" -o $TTS_OUTPUT_FILE "https://stream.watsonplatform.net/text-to-speech/api/v1/synthesize?voice=en-US_AllisonVoice"
}

query_text2speech_engine () {
# Use PicoTTS or local TTS service if there is NO Internet 
if [ "$INTERNET_ALIVE" != "0" ];
then
text2speech_pico "$TTS_TEXT_MESSAGE"

else

# Set default API used > 1=acapella 2=google 3=watson
API_SERVICE=$TTS_API
if [[ "x$API_SERVICE" = "x" ]];
then
API=1
else
API=$API_SERVICE
fi

# Set curl options - Keep here to avoid settings from sourced tools
CURL_OPTS="-s -S -L -m 60"

# Select Internet TTS service to use
case $API in
1)
# TTS using acapela
text2speech_acapela "$TTS_TEXT_MESSAGE"
;;

2)
# TTS using google
text2speech_google "$(echo $TTS_TEXT_MESSAGE | fold -s -w 200 | head -1)"
;;

3)
# TTS using watson
text2speech_watson "$TTS_TEXT_MESSAGE" 
;;

*)
text2speech_acapela "$TTS_TEXT_MESSAGE"
;;
esac

fi
}


# --------------
# Tell-the-Time
# --------------
say_time() {
# Get current hour and min
TIME_HOUR=$(date +%-I)
TIME_MIN=$(date +%M)

# Manipulate time format depending on availability of Internet
if [ "$INTERNET_ALIVE" = "0" ];
then
# Time AM/PM format when using cloud TTS service e.g. google
TIME_AMPM="$(date +%p | cut -c 1)+$(date +%p | cut -c 2)"
else
# Time AM/PM format when using - Use local TTS service i.e. PicoTTS
TIME_AMPM="$(date +%p | cut -c 1) $(date +%p | cut -c 2)"
fi

# TTS text message
TTS_TEXT_MESSAGE="The time now is $TIME_HOUR $TIME_MIN $TIME_AMPM"

# convert text to audio speech
query_text2speech_engine
}

# ----------------
# Tell-the-Weather
# ----------------
say_weather() {
# weather variables
#WEATHER_PERIOD=current #today #current #later
#WEATHER_API=1 #1=WeatherUnderground #2=OpenWeatherMap #3=DarkSky
#WEATHER_DEBUG= #debug 
WEATHER_PERIOD=$3
WEATHER_API=$4
WEATHER_DEBUG=$5
#
# Source weather functions
if [[ "$WEATHER_DEBUG" = "debug" ]];
then
# Debugging enabled
. /usr/bin/jambulatv-weather-api "" "" $WEATHER_PERIOD $WEATHER_API debug
else
# Debugging disabled
. /usr/bin/jambulatv-weather-api "" "" $WEATHER_PERIOD $WEATHER_API
fi
# 
# TTS text message
TTS_TEXT_MESSAGE=$WEATHER_FORECAST_DESCRIPTION
# convert text to audio speech
query_text2speech_engine
}

# -----------------------
# Tell-the-Custom-message
# -----------------------
say_custom() {
TTS_TEXT_MESSAGE="$2"
query_text2speech_engine
}



#################
#  MAIN SCRIPT  #
#################

# Usage
usage

# Remove previously saved TTS audio
sudo rm -f $TTS_OUTPUT_FILE

# Add sound effects while waiting script
tts_waiting_sound_effects

# Check for Internet connectivity
check_internet_access

# Run selected action
case $TTS_ACTION in 

time)
say_time
;;

weather)
say_weather "$API" "$TTS_ACTION" "$3" "$4" "$5"
;;

custom)
say_custom "$API" "$3"
;;

*)
clear
cat <<EOT
Usage:  
./`basename $0` [Speech API] time
./`basename $0` [Speech API] weather [Period] [Weather API] [Debugging]
./`basename $0` [Speech API] custom [Message]

EOT
# Sound error
touch $TTS_OUTPUT_FILE
$(basename $0) $TTS_API custom "I do not recognize that command.  Please try again"
touch $TTS_OUTPUT_FILE
exit 1
;;

esac

# Kill waiting sound effects 
[ "x$SOUND_EFFECTS_TEMP_SCRIPT_PID" = "x" ] || kill $SOUND_EFFECTS_TEMP_SCRIPT_PID

# Play saved TTS audio
[[ -e $TTS_OUTPUT_FILE ]] && $TTS_PLAY_CMD $TTS_PLAY_CMD_OPTS $TTS_OUTPUT_FILE

# Add bogus sound effects file to stop beep if no TTS audio file found
[[ -e $TTS_OUTPUT_FILE ]] || touch $TTS_OUTPUT_FILE
