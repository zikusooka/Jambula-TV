#!/bin/sh
# This is the text-to-speech tool used for JambulaTV services.
# Use it to read time, weather, etc
#
# Jambula Labs @copyright 2020-2021 All rights reserved

# Variables
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_GLOBAL_SETTINGS_FILE=$PROJECT_SYSTEM_CONF_DIR/global-settings.cfg

# Source global settings
. $PROJECT_GLOBAL_SETTINGS_FILE

# Play TTS audio using MPlayer
TTS_PLAY_CMD="/usr/bin/mpv"
TTS_AUDIO_DRIVER="$AUDIO_OUTPUT_DRIVER"
TTS_PLAY_CMD_AUDIO_GAIN=$(echo $@ | awk -F'=' '/gain/ {print $2}')
#
if [[ "x$TTS_PLAY_CMD_AUDIO_GAIN" = "x" ]];
then
# No audio gain
TTS_PLAY_CMD_OPTS="--really-quiet -ao $TTS_AUDIO_DRIVER --no-video --pulse-allow-suspended=yes"

else
# With audio gain
TTS_PLAY_CMD_OPTS="--really-quiet -ao $TTS_AUDIO_DRIVER --no-video --volume=$TTS_PLAY_CMD_AUDIO_GAIN --pulse-allow-suspended=yes"
fi

TTS_OUTPUT_FILE=/var/tmp/tts_output.wav # IMPORTANT: Must be on 'ext4' partition i.e. /var
#
if [[ "x$1" = "x" ]];
then
TTS_API=$TTS_PROVIDER_API
else
TTS_API=$1
fi
#
TTS_ACTION=$2
TTS_CUSTOM_MESSAGE=$3

PING_TIMEOUT=2 #9
PING_IP_ADDRESS=$PING_IP_ADDRESS

JAMBULATV_SOUNDS_DIR="/usr/share/JambulaTV/sounds"
SOUND_EFFECTS_WAITING="$JAMBULATV_SOUNDS_DIR/waiting-4-online-response.wav"
SOUND_EFFECTS_TEMP_SCRIPT=/tmp/sound_effects.sh
SOUND_EFFECTS_TEMP_SCRIPT_PID=$(ps auxw | grep -v grep | grep ${SOUND_EFFECTS_WAITING##*/} | awk {'print $2'})

MULTIMEDIA_USER=MY_MULTIMEDIA_USER

USER_AGENT="MY_USER_AGENT"

CURL_CMD="/usr/bin/curl"

SPEAKER_VOLUME_TOOL=MY_SPEAKER_VOLUME_TOOL



###############
#  FUNCTIONS  #
###############
usage () {
# TTS Action
if [[ "x$TTS_ACTION" = "x" ]];
then

clear
cat <<EOT
Usage:
-----
./`basename $0` [Speech API] time
./`basename $0` [Speech API] weather [Period] [Weather API] [Debugging]
./`basename $0` [Speech API] custom [Message]

	Speech API Engines
	******************
	1 - iSpeech (API key required)
	2 - Google
	3 - IBM Watson (API key required)

For increase in audio volume, add 'gain=level' to the CLI arguments: 
e.g. gain=0.2

EOT
exit 1

elif [[ "$TTS_ACTION" = "custom" && "x$TTS_CUSTOM_MESSAGE" = "x" ]];
then
clear
cat <<EOT
Usage:  
./`basename $0` [Speech API] custom [Message]

EOT
exit 1

fi
}

query_mysql_db () {
mysql -s -u ${JAMBULATV_SETUP_DB_USER} -p${JAMBULATV_SETUP_DB_PASS} 2> /dev/null << EOF
USE ${JAMBULATV_SETUP_DB_NAME};
SELECT $@ FROM ${JAMBULATV_SETUP_DB_TABLE} WHERE id = (SELECT MAX(id) FROM ${JAMBULATV_SETUP_DB_TABLE});
EOF
}

check_internet_access () {
# Check for internet connectivity - IMPORTANT: Don't use DNS to ping use actual IP address
ping -w $PING_TIMEOUT $PING_IP_ADDRESS > /dev/null 2>&1
INTERNET_ALIVE=$?
export INTERNET_ALIVE
#
# Add bogus sound effects file to stop beep if there's No Internet 
[ "$INTERNET_ALIVE" = "0" ] || touch $TTS_OUTPUT_FILE
}

tts_waiting_sound_effects () {
# Add bogus sound effects file to stop beep if No action specified
[ "x$TTS_ACTION" = "x" ] && touch $TTS_OUTPUT_FILE
#
# Play waiting for api sound effects
jambulatv-sounds api $TTS_OUTPUT_FILE
}

text2speech_pico () {
# Run pico2wave command
/usr/bin/pico2wave --lang=en-US --wave=$TTS_OUTPUT_FILE "$@"
}

text2speech_ispeech () {
# API Key
ISPEECH_API_KEY=$(query_mysql_db ispeech_tts_api_key)
# Connect to API Endpoint
$CURL_CMD $CURL_OPTS -A "$USER_AGENT" -d apikey=$ISPEECH_API_KEY -d text="$1" -d voice=usenglishfemale -d format=mp3 -d frequency=44100 -d bitrate=128 -d speed=1 -d startpadding=1 -d endpadding=1 -d pitch=110 -d filename=$TTS_OUTPUT_FILE "http://api.ispeech.org/api/rest?action=convert"
}

text2speech_google () {
# API Key
GOOGLE_API_KEY=$(query_mysql_db google_tts_api_key)
# Connect to API Endpoint
$CURL_CMD $CURL_OPTS -A "$USER_AGENT" -o $TTS_OUTPUT_FILE "http://translate.google.com/translate_tts?ie=UTF-8&client=tw-ob&q="$(echo "$1" | sed -e "s: :%20:g" | sed -e "s:'::g")"&tl=En-us"
}

text2speech_ibm () {
# API Key
IBM_API_KEY=$(query_mysql_db watson_tts_api_key)
IBM_API_ENDPOINT="https://api.eu-gb.text-to-speech.watson.cloud.ibm.com/instances/0d2c8590-15ed-4065-9774-3d681d9a47ee"
# Connect to API Endpoint
$CURL_CMD $CURL_OPTS -A "$USER_AGENT" -u "apikey:$IBM_API_KEY" -H "Content-Type: application/json" -H "Accept: audio/wav" -d "{\"text\":\"$1\"}" -o $TTS_OUTPUT_FILE "$IBM_API_ENDPOINT/v1/synthesize?voice=en-US_AllisonVoice"
}

query_text2speech_engine () {
# Use PicoTTS or local TTS service if there is NO Internet 
if [ "$INTERNET_ALIVE" != "0" ];
then
text2speech_pico "$TTS_TEXT_MESSAGE"

else

# Set default API used > 1=iSpeech 2=google 3=watson
API_SERVICE=$TTS_API
if [[ "x$API_SERVICE" = "x" ]];
then
# Use default API provided in global settings file
API=$TTS_PROVIDER_API
else
API=$API_SERVICE
fi

# Set curl options - Keep here to avoid settings from sourced tools
CURL_OPTS="-s -S -L -m 60"

# Select Internet TTS service to use
case $API in
1)
# TTS using iSpeech
TTS_CHARACTER_LIMIT=337
text2speech_ispeech "$(echo $TTS_TEXT_MESSAGE | cut -c1-$TTS_CHARACTER_LIMIT)"
;;

2)
# TTS using google
TTS_CHARACTER_LIMIT=200
text2speech_google "$(echo $TTS_TEXT_MESSAGE | cut -c1-$TTS_CHARACTER_LIMIT)"
;;

3)
# TTS using ibm
TTS_CHARACTER_LIMIT=337
text2speech_ibm "$(echo $TTS_TEXT_MESSAGE | cut -c1-$TTS_CHARACTER_LIMIT)"
;;

*)
# TTS using google
TTS_CHARACTER_LIMIT=200
text2speech_google "$(echo $TTS_TEXT_MESSAGE | cut -c1-$TTS_CHARACTER_LIMIT)"
;;
esac

fi
}


# --------------
# Tell-the-Time
# --------------
say_time() {
# Get current hour
TIME_HOUR=$(date +%-I)
# Get current minute
if [[ "$(date +%M)" = "00" ]];
then
TIME_MIN=""
else
TIME_MIN=$(date +%M)
fi

# Manipulate time format depending on availability of Internet
if [ "$INTERNET_ALIVE" = "0" ];
then
# Time AM/PM format when using cloud TTS service e.g. google
TIME_AMPM="$(date +%p | cut -c 1) $(date +%p | cut -c 2)"
else
# Time AM/PM format when using - Use local TTS service i.e. PicoTTS
TIME_AMPM="$(date +%p | cut -c 1) $(date +%p | cut -c 2)"
fi

# TTS text message
TTS_TEXT_MESSAGE="The time now is $TIME_HOUR $TIME_MIN $TIME_AMPM"

# convert text to audio speech
query_text2speech_engine
}

# ----------------
# Tell-the-Weather
# ----------------
say_weather() {
# weather variables
#WEATHER_PERIOD=current #today #current #later
#WEATHER_API=1 #1=WeatherUnderground #2=OpenWeatherMap #3=DarkSky
#WEATHER_DEBUG= #debug 
WEATHER_PERIOD=$3
WEATHER_API=$4
WEATHER_DEBUG=$5
#
# Source weather functions
if [[ "$WEATHER_DEBUG" = "debug" ]];
then
# Debugging enabled
. /usr/bin/jambulatv-weather-api "" "" $WEATHER_PERIOD $WEATHER_API debug
else
# Debugging disabled
. /usr/bin/jambulatv-weather-api "" "" $WEATHER_PERIOD $WEATHER_API
fi
# 
# TTS text message
TTS_TEXT_MESSAGE=$WEATHER_FORECAST_DESCRIPTION
# convert text to audio speech
query_text2speech_engine
}

# -----------------------
# Tell-the-Custom-message
# -----------------------
say_custom() {
TTS_TEXT_MESSAGE="$2"
query_text2speech_engine
}



#################
#  MAIN SCRIPT  #
#################
# Usage
usage

# Remove previously saved TTS audio
sudo rm -f $TTS_OUTPUT_FILE

# Add sound effects while waiting script
tts_waiting_sound_effects

# Check for Internet connectivity
check_internet_access

# Run selected action
case $TTS_ACTION in 

time)
say_time
;;

weather)
say_weather "$API" "$TTS_ACTION" "$3" "$4" "$5"
;;

custom)
say_custom "$API" "$3"
;;

*)
clear
cat <<EOT
Usage:
-----
./`basename $0` [Speech API] time
./`basename $0` [Speech API] weather [Period] [Weather API] [Debugging]
./`basename $0` [Speech API] custom [Message]

	Speech API Engines
	******************
	1 - iSpeech (API key required)
	2 - Google
	3 - IBM Watson (API key required)

EOT
# Sound error
touch $TTS_OUTPUT_FILE
$(basename $0) $TTS_API custom "I do not recognize that command.  Please try again"
touch $TTS_OUTPUT_FILE
exit 1
;;

esac

# Kill waiting sound effects 
[ "x$SOUND_EFFECTS_TEMP_SCRIPT_PID" = "x" ] || kill $SOUND_EFFECTS_TEMP_SCRIPT_PID

# Begin announcement
if [[ -e $TTS_OUTPUT_FILE ]];
then
# Mute speaker volume
$SPEAKER_VOLUME_TOOL all localhost mute
#
# Play saved TTS audio
$TTS_PLAY_CMD $TTS_PLAY_CMD_OPTS $TTS_OUTPUT_FILE
#
# Unmute speaker volume
$SPEAKER_VOLUME_TOOL all localhost unmute

else
# Add bogus sound effects file to stop beep if no TTS audio file found
touch $TTS_OUTPUT_FILE
fi
