#!/bin/sh
#
# This is a general helper script used by other tools to generate 
# sounds at certain points of processing
#
# Jambula Labs @copyright 2019-2020 All rights reserved

# Variables
SOUND_TYPE=$1
JAMBULATV_SOUNDS_DIR="/usr/share/JambulaTV/sounds"
DEFAULT_SOUND_EFFECTS_FILE="waiting-4-online-response.wav"
#
# If third CLI argument is used, set it as sound effects file.  For others, use default sound effects file
if [ "x$3" = "x" ] || [ ! -e "$JAMBULATV_SOUNDS_DIR/$3" ];
then
SOUND_EFFECTS_WAITING_PATH="$JAMBULATV_SOUNDS_DIR/$DEFAULT_SOUND_EFFECTS_FILE"
else
SOUND_EFFECTS_WAITING_PATH="$JAMBULATV_SOUNDS_DIR/$3"
fi
#
SOUND_EFFECTS_TEMP_SCRIPT=/tmp/sound_effects.sh
SOUND_EFFECTS_TEMP_SCRIPT_PID=$(ps auxw | grep -v grep | grep ${SOUND_EFFECTS_WAITING_PATH##*/} | awk {'print $2'}
)
SOUND_PLAYER_CMD="/usr/bin/cvlc"
ALERT_SOUND_AUDIO_GAIN=$(echo $@ | awk -F'=' '/gain/ {print $2}')
# 
if [[ "x$ALERT_SOUND_AUDIO_GAIN" = "x" ]];
then
# No audio gain
SOUND_PLAYER_OPTS="--quiet --nodaemon --play-and-exit --aout pulse --no-video --no-sout-display-video"

else
# With audio gain
SOUND_PLAYER_OPTS="--quiet --nodaemon --play-and-exit --aout pulse --gain $ALERT_SOUND_AUDIO_GAIN --no-video --no-sout-display-video"
fi

BEEP_CMD=/usr/bin/beep

MULTIMEDIA_USER=jambula

SPEAKER_VOLUME_TOOL=/usr/bin/jambulatv-speaker-volume



###############
#  FUNCTIONS  #
###############
waiting_4_online_response () {
if [ "x$1" = "x" ];
then
clear
cat <<EOF
Usage: $(basename $0) [PATH_2_FILE_YOU_ARE_WAITING_FOR] [SOUND_EFFECTS_FILE e.g. waiting-4-online-response-003.wav(optional)]

Note: Sounds will stop when that file is detected.

EOF
exit 1
fi
# Change permissions of sound effects script file
[ -e $SOUND_EFFECTS_TEMP_SCRIPT ] && sudo chown $MULTIMEDIA_USER $SOUND_EFFECTS_TEMP_SCRIPT
#
# Generate sound effects script file
cat > $SOUND_EFFECTS_TEMP_SCRIPT <<EOF
#!/bin/sh
# File to wait for before quiting sound
WAITED_FOR_FILE=$1
# Remove previous waited for temp file
[ -e \$WAITED_FOR_FILE ] && sudo rm -f \$WAITED_FOR_FILE
# Play sound while waiting
while [ ! -e \$WAITED_FOR_FILE ];
do

# Play beeps only if there's NO audio running on local speakers
$SPEAKER_VOLUME_TOOL all localhost status | grep -i Active > /dev/null 2>&1
SPEAKER_AUDIO_STATUS=\$?
if [[ "\$SPEAKER_AUDIO_STATUS" != "0" ]] && [[ -e $SOUND_EFFECTS_WAITING_PATH ]];
then
$SOUND_PLAYER_CMD $SOUND_PLAYER_OPTS $SOUND_EFFECTS_WAITING_PATH
fi

sleep 2

done
EOF
# Make script executable
chmod 755 $SOUND_EFFECTS_TEMP_SCRIPT
# Run script
$SOUND_EFFECTS_TEMP_SCRIPT > /dev/null 2>&1 &
}

check_for_beep_command () {
# Quit if no beep
[ -e $BEEP_CMD ] || exit 0
}

initial_setup_sounds () {
SETUP_SOUND_NUMBER=$1
case $SETUP_SOUND_NUMBER in
1)
SETUP_SOUND_FILE=setup-purchase-thankyou.wav
;;
2)
SETUP_SOUND_FILE=setup-download-qrcode-app.wav
;;
3)
SETUP_SOUND_FILE=setup-connected-2-jambulatv.wav
;;
4)
SETUP_SOUND_FILE=setup-scan-qrcode.wav
;;
5)
SETUP_SOUND_FILE=setup-completed-restarting.wav
;;
6)
SETUP_SOUND_FILE=setup-completed-tutor-channel-restarting.wav
;;
7)
SETUP_SOUND_FILE=setup-error-no-dvbt-tuner.wav
;;
*)
clear
cat <<EOT
Usage: `basename $0` $SOUND_TYPE [number e.g. 1]"
EOT
exit 1
;;
esac

# Play sound file if it exists
[[ -e $JAMBULATV_SOUNDS_DIR/$SETUP_SOUND_FILE ]] && $SOUND_PLAYER_CMD $SOUND_PLAYER_OPTS $JAMBULATV_SOUNDS_DIR/$SETUP_SOUND_FILE
}

alert_sounds () {
ALERT_SOUND_NUMBER=$1
#
case $ALERT_SOUND_NUMBER in
1)
ALERT_SOUND_FILE=attention-motion-detected-00.wav
;;
2)
ALERT_SOUND_FILE=attention-motion-detected-01.mp3
;;
3)
ALERT_SOUND_FILE=attention-motion-detected-02.mp3
;;
4)
ALERT_SOUND_FILE=attention-motion-detected-03.mp3
;;
5)
ALERT_SOUND_FILE=attention-mifi-battery-low-recharge-01.wav
;;
6)
ALERT_SOUND_FILE=attention-mifi-battery-full-unplug-01.wav
;;
7)
ALERT_SOUND_FILE=battery_low_01.mp3
;;
8)
ALERT_SOUND_FILE=battery_charging_01.mp3
;;
9)
ALERT_SOUND_FILE=phone_one_ring_01.mp3
;;
10)
ALERT_SOUND_FILE=rain_heavy_01.mp3
;;
11)
ALERT_SOUND_FILE=thunder_rain_01.mp3
;;
12)
ALERT_SOUND_FILE=wake_alarm_clock_gentle_01.mp3
;;
14)
ALERT_SOUND_FILE=incoming-phone-call-for.mp3
;;
15)
ALERT_SOUND_FILE=phone_battery_recharge_for.mp3
;;
16)
ALERT_SOUND_FILE=phone_battery_charging_complete_for.mp3
;;
17)
ALERT_SOUND_FILE=thunderstorms_observed_rainfall_likely.mp3
;;
18)
ALERT_SOUND_FILE=flash_briefing.mp3
;;
19)
ALERT_SOUND_FILE=coming-flash-briefing-today.wav
;;
20)
DAY=$(date +%A) 
# Select sound based on day of week
if [[ "$DAY" = "Monday" ]];
then
ALERT_SOUND_FILE=happy_monday.mp3
elif [[ "$DAY" = "Tuesday" ]];
then
ALERT_SOUND_FILE=happy_tuesday.mp3
elif [[ "$DAY" = "Wednesday" ]];
then
ALERT_SOUND_FILE=happy_wednesday.mp3
elif [[ "$DAY" = "Thursday" ]];
then
ALERT_SOUND_FILE=happy_thursday.mp3
elif [[ "$DAY" = "Friday" ]];
then
ALERT_SOUND_FILE=happy_friday.mp3
elif [[ "$DAY" = "Saturday" ]];
then
ALERT_SOUND_FILE=happy_saturday.mp3
elif [[ "$DAY" = "Sunday" ]];
then
ALERT_SOUND_FILE=happy_sunday.mp3
fi
;;
21)
HOUR=$(date +%-H) 
# Select greeting sound based on the time of day
if [[ "$HOUR" -lt "5" ]];
then
ALERT_SOUND_FILE=goodnight.mp3
elif [[ "$HOUR" -lt "12" ]];
then
ALERT_SOUND_FILE=goodmorning.mp3
elif [[ "$HOUR" -lt "18" ]];
then
ALERT_SOUND_FILE=goodafternoon.mp3
elif [[ "$HOUR" -ge "18" ]];
then
ALERT_SOUND_FILE=goodevening.mp3
fi
;;
22)
ALERT_SOUND_FILE=chime_big_ben.mp3
;;

[Aa-Zz]*)
if [[ -e $JAMBULATV_SOUNDS_DIR/${ALERT_SOUND_NUMBER}.mp3 ]];
then
ALERT_SOUND_FILE=${ALERT_SOUND_NUMBER}.mp3
elif [[ -e $JAMBULATV_SOUNDS_DIR/${ALERT_SOUND_NUMBER}.wav ]];
then
ALERT_SOUND_FILE=${ALERT_SOUND_NUMBER}.wav
else
ALERT_SOUND_FILE=$ALERT_SOUND_NUMBER
fi
;;
*)
clear
cat <<EOT
Usage: `basename $0` $SOUND_TYPE [number|pattern] [audio gain (optional)]
EOT
exit 1
esac

# Play sound file if it exists
if [[ -e $JAMBULATV_SOUNDS_DIR/$ALERT_SOUND_FILE ]];
then
$SOUND_PLAYER_CMD $SOUND_PLAYER_OPTS $JAMBULATV_SOUNDS_DIR/$ALERT_SOUND_FILE

else
clear
cat <<ET
Error: No applicable sound format was found for [$ALERT_SOUND_FILE]
ET
fi
}



#################
#  MAIN SCRIPT  #
#################

if [[ "$SOUND_TYPE" = "beep" ]];
then
check_for_beep_command

# Get argument to beeps
case $2 in
online)
$BEEP_CMD -f 500 -l 155 -n -f 400 -l 155 -n -f 600 -l 155 -n -f 800 -l 155 -n -f 800 -l 1
;;
offline)
$BEEP_CMD -f 500 -n -f 500 -n -f 500 -n -f 500 -n -f 500 -n -f 500
;;
dhclient)
$BEEP_CMD -f 1000 -r 5 -n -r 5 -l 10
;;
beethoven)
$BEEP_CMD -f 659 -l 460 -n -f 784 -l 340 -n -f 659 -l 230 -n -f 659 -l 110 -n -f 880 -l 230 -n -f 659 -l 230 -n -f 587 -l 230 -n -f 659 -l 460 -n -f 988 -l 340 -n -f 659 -l 230 -n -f 659 -l 110 -n -f 1047-l 230 -n -f 988 -l 230 -n -f 784 -l 230 -n -f 659 -l 230 -n -f 988 -l 230 -n -f 1318 -l 230 -n -f 659 -l 110 -n -f 587 -l 230 -n -f 587 -l 110 -n -f 494 -l 230 -n -f 740 -l 230 -n -f 659 -l 460
;;
alert)
$BEEP_CMD -f 1000 -l 500 -n 200 -r 2
;;
start)
$BEEP_CMD -f 65.4064 -l 100 -n -f 130.813 -l 100 -n -f 261.626 -l 100 -n -f 523.2
;;
stop)
$BEEP_CMD -f 523.251 -l 100 -D 100 -n -f 391.995 -l 100 -D 100 -n -f 329.628 -l 10
;;
poweroff)
$BEEP_CMD -f 330 -l 137 -n -f 330 -l 275 -n -f 330 -l 137 -d 137 -n -f 262 -l 137 -n -f 330 -l 275
;;
misc)
$BEEP_CMD -f 600 -l 155 -n -f 800 -l 155 -n -f 500 -l 155 -n -f 400 -l 155 -n -f 400 -l 1
;;
*)
# Usage - beep types
clear
cat <<EOT
Usage: `basename $0` $SOUND_TYPE [online|offline|dhclient|alert|start|stop|beethoven|misc]
EOT
exit 1
;;
esac

# API sounds
elif [[ "$SOUND_TYPE" = "api" ]];
then
waiting_4_online_response $2

# Setup sounds
elif [[ "$SOUND_TYPE" = "setup" ]];
then
initial_setup_sounds $2

# Alert sounds
elif [[ "$SOUND_TYPE" = "alert" ]];
then
alert_sounds $2

else
# Usage - all types
clear
cat <<EOT
Usage: `basename $0` [beep|api|setup|alert]
EOT
exit 1
fi
