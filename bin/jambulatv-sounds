#!/bin/sh
#
# This is a general helper script used by other tools to generate 
# sounds at certain points of processing
#
# Jambula Labs @copyright 2020-2021 All rights reserved
#
#
# Source global settings
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_GLOBAL_SETTINGS_FILE=$PROJECT_SYSTEM_CONF_DIR/global-settings.cfg
. $PROJECT_GLOBAL_SETTINGS_FILE

# Variables
SOUND_TYPE=$1
JAMBULATV_SOUNDS_DIR="/usr/share/JambulaTV/sounds"
TEMP_SOUNDS_DIR="/tmp"
DEFAULT_SOUND_EFFECTS_FILE="waiting-4-online-response.wav"
#
# If third CLI argument is used, set it as sound effects file.  For others, use default sound effects file
if [[ "x$3" = "x" ]] || [[ ! -e "$JAMBULATV_SOUNDS_DIR/$3" ]];
then
SOUND_EFFECTS_WAITING_PATH="$JAMBULATV_SOUNDS_DIR/$DEFAULT_SOUND_EFFECTS_FILE"
else
SOUND_EFFECTS_WAITING_PATH="$JAMBULATV_SOUNDS_DIR/$3"
fi
#
SOUND_EFFECTS_TEMP_SCRIPT=/tmp/sound_effects.sh
SOUND_EFFECTS_TEMP_SCRIPT_PID=$(ps auxw | grep -v grep | grep ${SOUND_EFFECTS_WAITING_PATH##*/} | awk {'print $2'}
)
SOUND_PLAYER_CMD="/usr/bin/mpv"
SOUND_AUDIO_DRIVER="$AUDIO_OUTPUT_DRIVER"

ALERT_SOUND_AUDIO_GAIN=$(echo $@ | awk -F'=' '/gain/ {print $2}')
# 
if [[ "x$ALERT_SOUND_AUDIO_GAIN" = "x" ]];
then
# No audio gain
SOUND_PLAYER_OPTS="--really-quiet -ao $SOUND_AUDIO_DRIVER --no-video --pulse-allow-suspended=yes"
else
# With audio gain
SOUND_PLAYER_OPTS="--really-quiet -ao $SOUND_AUDIO_DRIVER --no-video --volume=$ALERT_SOUND_AUDIO_GAIN --pulse-allow-suspended=yes"
fi

BEEP_CMD=/usr/bin/beep

MULTIMEDIA_USER=jambula

SPEAKER_VOLUME_TOOL=/usr/bin/jambulatv-speaker-volume

MQTT_TOPIC_STATUS_MIXER_VOICE_ALERTS="JambulaTV/house/status/mixer_voice_alerts"

PROCESS_INSTANCE_LOCK_FILE=/tmp/sounds_process_instance.lock



###############
#  FUNCTIONS  #
###############

mixer_voice_alerts_status_in_use () {
$MQTT_PUBLISH_CMD $MQTT_PUBLISH_OPTS -t "$MQTT_TOPIC_STATUS_MIXER_VOICE_ALERTS" -m "on"
}

mixer_voice_alerts_status_not_in_use () {
$MQTT_PUBLISH_CMD $MQTT_PUBLISH_OPTS -t "$MQTT_TOPIC_STATUS_MIXER_VOICE_ALERTS" -m "off"
}

music_pause_if_playing () {
$MPD_CLIENT_CMD $MPD_CLIENT_OPTS -h $MPD_SERVER_IP -p $MPD_SERVER_PORT pause-if-playing > /dev/null 2>&1
MPC_PLAYER_PLAYING=$?
}

music_play_if_paused () {
[[ "$MPC_PLAYER_PLAYING" = "0" ]] && \
$MPD_CLIENT_CMD $MPD_CLIENT_OPTS -h $MPD_SERVER_IP -p $MPD_SERVER_PORT play
}

create_lock_file () {
[[ -e $PROCESS_INSTANCE_LOCK_FILE ]] || \
touch $PROCESS_INSTANCE_LOCK_FILE
sudo chown $MULTIMEDIA_USER:audio $PROCESS_INSTANCE_LOCK_FILE
}

lock_sounds_process () {
exec {lock_fd}>$PROCESS_INSTANCE_LOCK_FILE 
flock -x -n "$lock_fd" 
PROCESS_INSTANCE_LOCK_STATUS=$?
}

wait_if_another_process_instance_is_running () {
# Create lock file if it does not exist
create_lock_file
#
# Check process instance lock status initially
lock_sounds_process
# Wait for running process instance lock file to clear
while [[ "$PROCESS_INSTANCE_LOCK_STATUS" != 0 ]]; 
do
# Notification - another instance is running
logger -s -t $(basename $0) "Another instance of this tool is running. Will proceed shortly after it completes ..."
# Pause a bit
sleep 5
# Check process instance lock status again
lock_sounds_process
done
}

waiting_4_online_response () {
if [ "x$1" = "x" ];
then
clear
cat <<EOF
Usage: $(basename $0) [PATH_2_FILE_YOU_ARE_WAITING_FOR] [SOUND_EFFECTS_FILE e.g. waiting-4-online-response-003.wav(optional)]

Note: Sounds will stop when that file is detected.

EOF
exit 1
fi
# Change permissions of sound effects script file
[ -e $SOUND_EFFECTS_TEMP_SCRIPT ] && sudo chown $MULTIMEDIA_USER $SOUND_EFFECTS_TEMP_SCRIPT
#
# Generate sound effects script file
cat > $SOUND_EFFECTS_TEMP_SCRIPT <<EOF
#!/bin/sh
# File to wait for before quiting sound
WAITED_FOR_FILE=$1
# Remove previous waited for temp file
[ -e \$WAITED_FOR_FILE ] && sudo rm -f \$WAITED_FOR_FILE
# Play sound while waiting
while [ ! -e \$WAITED_FOR_FILE ];
do

# Play beeps only if there's NO audio running on local speakers
$SPEAKER_VOLUME_TOOL all localhost status | grep -i Active > /dev/null 2>&1
SPEAKER_AUDIO_STATUS=\$?
if [[ "\$SPEAKER_AUDIO_STATUS" != "0" ]] && [[ -e $SOUND_EFFECTS_WAITING_PATH ]];
then
$SOUND_PLAYER_CMD $SOUND_PLAYER_OPTS $SOUND_EFFECTS_WAITING_PATH
fi

sleep 2

done
EOF
# Make script executable
chmod 755 $SOUND_EFFECTS_TEMP_SCRIPT
# Run script
$SOUND_EFFECTS_TEMP_SCRIPT > /dev/null 2>&1 &
}

check_for_beep_command () {
# Quit if no beep
[ -e $BEEP_CMD ] || exit 0
}

initial_setup_sounds () {
SETUP_SOUND_NUMBER=$1
case $SETUP_SOUND_NUMBER in
1)
SETUP_SOUND_FILE=setup-purchase-thankyou.wav
;;
2)
SETUP_SOUND_FILE=setup-download-qrcode-app.wav
;;
3)
SETUP_SOUND_FILE=setup-connected-2-jambulatv.wav
;;
4)
SETUP_SOUND_FILE=setup-scan-qrcode.wav
;;
5)
SETUP_SOUND_FILE=setup-completed-restarting.wav
;;
6)
SETUP_SOUND_FILE=setup-completed-tutor-channel-restarting.wav
;;
7)
SETUP_SOUND_FILE=setup-error-no-dvbt-tuner.wav
;;
*)
clear
cat <<EOT
Usage: `basename $0` $SOUND_TYPE [number e.g. 1]"
EOT
exit 1
;;
esac

# Play sound file if it exists
[[ -e $JAMBULATV_SOUNDS_DIR/$SETUP_SOUND_FILE ]] && $SOUND_PLAYER_CMD $SOUND_PLAYER_OPTS $JAMBULATV_SOUNDS_DIR/$SETUP_SOUND_FILE
}

alert_sounds () {
ALERT_SOUND_NUMBER=$1
#
case $ALERT_SOUND_NUMBER in
1)
ALERT_SOUND_FILE=chime_small.mp3
;;
2)
ALERT_SOUND_FILE=attention-motion-detected-01.mp3
;;
3)
ALERT_SOUND_FILE=attention-motion-detected-02.mp3
;;
4)
ALERT_SOUND_FILE=attention-motion-detected-03.mp3
;;
5)
ALERT_SOUND_FILE=attention-mifi-battery-low-recharge-01.mp3
;;
6)
ALERT_SOUND_FILE=attention-mifi-battery-full-unplug-01.mp3
;;
7)
ALERT_SOUND_FILE=battery_low_01.mp3
;;
8)
ALERT_SOUND_FILE=battery_charging_01.mp3
;;
9)
ALERT_SOUND_FILE=phone_one_ring_01.mp3
;;
10)
ALERT_SOUND_FILE=rain_heavy_01.mp3
;;
11)
ALERT_SOUND_FILE=thunder_rain_01.mp3
;;
12)
ALERT_SOUND_FILE=wake_alarm_clock_gentle_01.mp3
;;
14)
ALERT_SOUND_FILE=incoming-phone-call-for.mp3
;;
15)
ALERT_SOUND_FILE=phone_battery_recharge_for.mp3
;;
16)
ALERT_SOUND_FILE=phone_battery_charging_complete_for.mp3
;;
17)
ALERT_SOUND_FILE=thunderstorms_observed_rainfall_likely.mp3
;;
18)
ALERT_SOUND_FILE=flash_briefing.mp3
;;
19)
ALERT_SOUND_FILE=coming-flash-briefing-today.mp3
;;
20)
DAY=$(date +%A) 
# Select sound based on day of week
if [[ "$DAY" = "Monday" ]];
then
ALERT_SOUND_FILE=happy_monday.mp3
elif [[ "$DAY" = "Tuesday" ]];
then
ALERT_SOUND_FILE=happy_tuesday.mp3
elif [[ "$DAY" = "Wednesday" ]];
then
ALERT_SOUND_FILE=happy_wednesday.mp3
elif [[ "$DAY" = "Thursday" ]];
then
ALERT_SOUND_FILE=happy_thursday.mp3
elif [[ "$DAY" = "Friday" ]];
then
ALERT_SOUND_FILE=happy_friday.mp3
elif [[ "$DAY" = "Saturday" ]];
then
ALERT_SOUND_FILE=happy_saturday.mp3
elif [[ "$DAY" = "Sunday" ]];
then
ALERT_SOUND_FILE=happy_sunday.mp3
fi
;;
21)
HOUR=$(date +%-H) 
# Select greeting sound based on the time of day
if [[ "$HOUR" -lt "0" ]];
then
ALERT_SOUND_FILE=goodnight.mp3
elif [[ "$HOUR" -lt "12" ]];
then
ALERT_SOUND_FILE=goodmorning.mp3
elif [[ "$HOUR" -lt "18" ]];
then
ALERT_SOUND_FILE=goodafternoon.mp3
elif [[ "$HOUR" -ge "18" ]];
then
ALERT_SOUND_FILE=goodevening.mp3
fi
;;
22)
ALERT_SOUND_FILE=chime_big_ben.mp3
;;
23)
ALERT_SOUND_FILE=internet_has_gone_off.mp3
;;
24)
ALERT_SOUND_FILE=internet_is_back_on.mp3
;;
25)
ALERT_SOUND_FILE=internet_data_saver_enabled.mp3
;;
26)
ALERT_SOUND_FILE=internet_data_saver_disabled.mp3
;;
27)
ALERT_SOUND_FILE=phone_backup_starting.mp3
;;
28)
ALERT_SOUND_FILE=phone_backup_completed.mp3
;;
29)
ALERT_SOUND_FILE=phone_backup_feel_free_2_unplug.mp3
;;
30)
ALERT_SOUND_FILE=phone_backup_enable_usb_debug.mp3
;;
31)
ALERT_SOUND_FILE=phone_backup_unlock_confirm.mp3
;;
32)
ALERT_SOUND_FILE=phone_backup_accept_prompt_save.mp3
;;
33)
ALERT_SOUND_FILE=phone_backup_failed_2_get_input_quit.mp3
;;
34)
ALERT_SOUND_FILE=night_mode_activating.mp3
;;
35)
ALERT_SOUND_FILE=night_mode_deactivated.mp3
;;
36)
ALERT_SOUND_FILE=vacation_holiday_mode_activating.mp3
;;
37)
ALERT_SOUND_FILE=vacation_holiday_mode_deactivated.mp3
;;
38)
ALERT_SOUND_FILE=guest_visitor_mode_activating.mp3
;;
39)
ALERT_SOUND_FILE=guest_visitor_mode_deactivated.mp3
;;
40)
ALERT_SOUND_FILE=its_time_4_news.mp3
;;
41)
HOUR=$(date +%-I) 
AMPM=$(date +%-P) 
# Select sound based on hour and AM/PM
ALERT_SOUND_FILE=time_now_is_${HOUR}_${AMPM}.mp3
;;
42)
ALERT_SOUND_FILE=planned_power_outage_tomorrow.mp3
;;
43)
ALERT_SOUND_FILE=unplanned_emergency_power_outage_currently.mp3
;;
44)
ALERT_SOUND_FILE=there_is_a_birthday_today.mp3
;;
45)
ALERT_SOUND_FILE=laptop_battery_is_discharging.mp3
;;
46)
ALERT_SOUND_FILE=laptop_battery_is_charging.mp3
;;
[Aa-Zz]*)
# MP3 format
if [[ -e $JAMBULATV_SOUNDS_DIR/${ALERT_SOUND_NUMBER}.mp3 ]] || [[ -e $TEMP_SOUNDS_DIR/${ALERT_SOUND_NUMBER}.mp3 ]];
then
ALERT_SOUND_FILE=${ALERT_SOUND_NUMBER}.mp3
# Wave format
elif [[ -e $JAMBULATV_SOUNDS_DIR/${ALERT_SOUND_NUMBER}.wav ]] || [[ -e $TEMP_SOUNDS_DIR/${ALERT_SOUND_NUMBER}.wav ]];
then
ALERT_SOUND_FILE=${ALERT_SOUND_NUMBER}.wav
# Other formats
else
ALERT_SOUND_FILE=$ALERT_SOUND_NUMBER
fi
;;
*)
clear
cat <<EOT
Usage: `basename $0` $SOUND_TYPE [number|pattern] [audio gain (optional)]
EOT
exit 1
esac

# Play sound file if it exists in JambulaTV sounds directory
if [[ -e $JAMBULATV_SOUNDS_DIR/$ALERT_SOUND_FILE ]];
then
$SOUND_PLAYER_CMD $SOUND_PLAYER_OPTS $JAMBULATV_SOUNDS_DIR/$ALERT_SOUND_FILE

# Play sound file if it exists in temporary sounds directory
elif [[ -e $TEMP_SOUNDS_DIR/$ALERT_SOUND_FILE ]];
then
$SOUND_PLAYER_CMD $SOUND_PLAYER_OPTS $TEMP_SOUNDS_DIR/$ALERT_SOUND_FILE

else
clear
cat <<ET
Error: No applicable sound format was found for [$ALERT_SOUND_FILE]
ET
fi
}



#################
#  MAIN SCRIPT  #
#################

# Prevent another instance of this tool from running at the same time
wait_if_another_process_instance_is_running

# Alert via MQTT: Mixer is being used
mixer_voice_alerts_status_in_use

# Pause music player
music_pause_if_playing

if [[ "$SOUND_TYPE" = "beep" ]];
then
check_for_beep_command

# Get argument to beeps
case $2 in
online)
$BEEP_CMD -f 500 -l 155 -n -f 400 -l 155 -n -f 600 -l 155 -n -f 800 -l 155 -n -f 800 -l 1
;;
offline)
$BEEP_CMD -f 500 -n -f 500 -n -f 500 -n -f 500 -n -f 500 -n -f 500
;;
dhclient)
$BEEP_CMD -f 1000 -r 5 -n -r 5 -l 10
;;
beethoven)
$BEEP_CMD -f 659 -l 460 -n -f 784 -l 340 -n -f 659 -l 230 -n -f 659 -l 110 -n -f 880 -l 230 -n -f 659 -l 230 -n -f 587 -l 230 -n -f 659 -l 460 -n -f 988 -l 340 -n -f 659 -l 230 -n -f 659 -l 110 -n -f 1047-l 230 -n -f 988 -l 230 -n -f 784 -l 230 -n -f 659 -l 230 -n -f 988 -l 230 -n -f 1318 -l 230 -n -f 659 -l 110 -n -f 587 -l 230 -n -f 587 -l 110 -n -f 494 -l 230 -n -f 740 -l 230 -n -f 659 -l 460
;;
alert)
$BEEP_CMD -f 1000 -l 500 -n 200 -r 2
;;
start)
$BEEP_CMD -f 65.4064 -l 100 -n -f 130.813 -l 100 -n -f 261.626 -l 100 -n -f 523.2
;;
stop)
$BEEP_CMD -f 523.251 -l 100 -D 100 -n -f 391.995 -l 100 -D 100 -n -f 329.628 -l 10
;;
poweroff)
$BEEP_CMD -f 330 -l 137 -n -f 330 -l 275 -n -f 330 -l 137 -d 137 -n -f 262 -l 137 -n -f 330 -l 275
;;
misc)
$BEEP_CMD -f 600 -l 155 -n -f 800 -l 155 -n -f 500 -l 155 -n -f 400 -l 155 -n -f 400 -l 1
;;
*)
# Usage - beep types
clear
cat <<EOT
Usage: `basename $0` $SOUND_TYPE [online|offline|dhclient|alert|start|stop|beethoven|misc]
EOT
exit 1
;;
esac

# API sounds
elif [[ "$SOUND_TYPE" = "api" ]];
then
waiting_4_online_response $2

# Setup sounds
elif [[ "$SOUND_TYPE" = "setup" ]];
then
initial_setup_sounds $2

# Alert sounds
elif [[ "$SOUND_TYPE" = "alert" ]];
then
alert_sounds $2

else
# Usage - all types
clear
cat <<EOT
Usage: `basename $0` [beep|api|setup|alert]
EOT
exit 1
fi

# Unpause music player
music_play_if_paused

# Alert via MQTT: Mixer is NOT being used
mixer_voice_alerts_status_not_in_use
