#!/usr/bin/env python
# Display Announcements on JambulaTV Screen
#
# Import modules
import json
import httplib
import base64
import sys
import argparse
import os
import commands
import warnings
import xml.etree.ElementTree as ET


# Variables
JAMBULATV_VIRTUAL_TERMINAL = 'tty2'
KODI_GUI_SETTINGS = '/JambulaTV/.kodi/userdata/guisettings.xml'
TIME = 15000  # ms
ICON = '/usr/share/kodi/addons/Aeon-Nox/media/DefaultIconInfo.png'

# Copyright
__author__ = 'Joseph Zikusooka.  Jambula Labs @copyright 2015-2016 All rights reserved'


# Quit if active screen console is not running kodi
status, active_virtual_terminal = commands.getstatusoutput("cat /sys/class/tty/tty0/active")
if active_virtual_terminal != (JAMBULATV_VIRTUAL_TERMINAL):
  sys.exit("Error: JambulaTV is not running on active terminal");


#################
#  MAIN SCRIPT  #
#################
#
# Get Kodi web server variables
tree = ET.parse(KODI_GUI_SETTINGS)
root = tree.getroot()
for services in root.findall('services'):
   username = services.find('webserverusername').text
   password = services.find('webserverpassword').text
   xbmc_title = services.find('devicename').text
   xbmc_port = services.find('webserverport').text
   xbmc_host=['127.0.0.1']

# Parse arguments/ message
parser = argparse.ArgumentParser(description='Display Announcements on JambulaTV Screen')
parser.add_argument('-m','--message', help='The message you want displayed.  Wrap it in quotes',required=True)
args = parser.parse_args()

MESSAGE = args.message



# Main Script 
# -----------
def send_json_command(xbmc_host, xbmc_port, method, params=None, id=1, username=username, password=password):
    command = {'jsonrpc': '2.0', 'id': id, 'method': method}
    if params is not None: command['params'] = params
    payload = json.dumps(command, ensure_ascii=False, sort_keys=True)
    payload.encode('utf-8')
    headers = {'Content-Type': 'application/json'}
    if password != '':
        userpass = base64.encodestring('%s:%s' % (username, password))[:-1]
        headers['Authorization'] = 'Basic %s' % userpass
    conn = httplib.HTTPConnection(xbmc_host, xbmc_port)
    data = None
    try:
        conn.request('POST', '/jsonrpc', payload, headers)
        response = conn.getresponse()
        if response.status == 200: data = json.loads(response.read())['result']
        else: data = 'Response Error'
    except:
        data = 'Connection Error'
    conn.close()
    return data


# De-activate screensaver
def xbmc_poke_screen(xbmc_host, xbmc_port=xbmc_port):
    for x in range(0, len(xbmc_host)):                                                  
	screenSaverStatus = send_json_command(xbmc_host[x], xbmc_port, 'XBMC.GetInfoBooleans', params={'booleans':['System.ScreenSaverActive']})
        if screenSaverStatus == {u'System.ScreenSaverActive': True}:
	  send_json_command(xbmc_host[x], xbmc_port, "Input.Select")

# Display message on screen
def xbmc_osd_message(xbmc_host, xbmc_port=xbmc_port):
    for x in range(0, len(xbmc_host)):
        result = send_json_command(xbmc_host[x], xbmc_port, 'GUI.ShowNotification', params={'title':xbmc_title, 'message':MESSAGE, 'displaytime':TIME, 'image':ICON})


# Poke screen if screensaver is active
xbmc_poke_screen(xbmc_host)

# Display message on screen
xbmc_osd_message(xbmc_host)
