#!/usr/local/bin/python3
# Display Announcements on JambulaTV Screen
# Jambula Labs @copyright 2018-2019 All rights reserved
#
# Import modules
import json
import http.client
import base64
import sys
import argparse
import os
import subprocess
import time
import threading 
from threading import Timer
import xml.etree.ElementTree as ET
from pyxmpp2.simple import send_message
from pyxmpp2.settings import XMPPSettings
from textwrap import wrap


# Who called this script
PPID = os.getppid()
PID = os.getpid()
with open('/proc/%d/cmdline' % PPID, 'r') as CALLER_FILE:
  CALLER = CALLER_FILE.read().split('-', 1)[1]

# Variables
JAMBULATV_VIRTUAL_TERMINAL = 'tty7'
KODI_HTTP_IP = 'MY_KODI_HTTP_IP'
KODI_HTTP_USER = 'MY_KODI_HTTP_USER'
KODI_HTTP_PASS = 'MY_KODI_HTTP_PASS'
KODI_HTTP_PORT = MY_KODI_HTTP_PORT
KODI_PRODUCT_NAME = 'MY_PROJECT_NAME'
ICON = 'MY_KODI_SYSTEM_ADDONS/skin.estouchy/media/DefaultIconInfo.png'
OSDRUNFILE = 'MY_TMPDIR/osd_process_running' 

# Copyright
__author__ = 'Joseph Zikusooka.  Jambula Labs @copyright 2018-2019 All rights reserved'

# Parse arguments/ message
parser = argparse.ArgumentParser(description='Display Announcements on JambulaTV Screen')
parser.add_argument('-m','--message', help='The message you want displayed.  Wrap it in quotes',required=True)
parser.add_argument('-t','--duration', help='How long in milliseconds you want the message displayed',type=int,required=False)
args = parser.parse_args()

MESSAGE = args.message
MESSAGE_WRAPPED = wrap(args.message, 106)

# XMPP credentials
XMPP_TOOL = 'MY_XMPP_TOOL'
XMPP_JID = 'USER_001_XMPP_USERNAME@USER_001_XMPP_HOST'
XMPP_PASSWORD = 'USER_001_XMPP_PASSWORD'
XMPP_RESOURCE = 'USER_001_XMPP_RESOURCE'
XMPP_RECIPIENT = XMPP_JID

# Set duration
if args.duration is None:
    TIME = 35000
else:
    TIME = args.duration



# Functions
# ---------
#
# Quit if active screen console is not running kodi
def quit_if_screen_not_running ():
        status, active_virtual_terminal = subprocess.getstatusoutput("cat /sys/class/tty/tty0/active")
        if active_virtual_terminal != (JAMBULATV_VIRTUAL_TERMINAL):
          sys.exit("Error: JambulaTV is not running on active terminal")

# Wait to run this script if already running
def wait_if_already_running ():
        while os.path.exists(OSDRUNFILE):
          print ("Another OSD process is running, please wait ...")
          time.sleep(10)

# Open, write, close a temporary file to prevent others from calling this script until done
def create_run_file ():
        processfile = open(OSDRUNFILE, 'w')
        processfile.write(CALLER)
        processfile.close()

# Send xmpp message with notice
def send_xmpp_message ():
        subprocess.check_call([XMPP_TOOL, "-q", "-j", XMPP_JID, "-p", XMPP_PASSWORD, "-t", XMPP_RECIPIENT, "-m", "[JambulaTV] OSD Notice: " +MESSAGE])

# Connect to Kodi
def send_json_command(KODI_HTTP_IP, KODI_HTTP_PORT, method, params=None, id=1, username=KODI_HTTP_USER, password=KODI_HTTP_PASS):
    command = {'jsonrpc': '2.0', 'id': id, 'method': method}
    if params is not None: command['params'] = params
    payload = json.dumps(command, ensure_ascii=False, sort_keys=True)
    payload.encode('utf-8')
    headers = {'Content-Type': 'application/json'}
    if password != '':
        #userpass = base64.encodestring('%s:%s' % (username, password))[:-1] # Python2
        userpass = base64.encodestring(('%s:%s' % (username,password)).encode()).decode().replace('\n', '')
        headers['Authorization'] = 'Basic %s' % userpass
    #conn = httplib.HTTPConnection(KODI_HTTP_IP, KODI_HTTP_PORT) # Python 2
    conn = http.client.HTTPConnection(KODI_HTTP_IP, KODI_HTTP_PORT)
    data = None
    try:
        conn.request('POST', '/jsonrpc', payload, headers)
        response = conn.getresponse()
        if response.status == 200: data = json.loads(response.read())['result']
        else: data = 'Response Error'
    except:
        data = 'Connection Error'
    conn.close()
    return data

# De-activate screensaver
def xbmc_poke_screen(KODI_HTTP_IP, KODI_HTTP_PORT=KODI_HTTP_PORT):
        screenSaverStatus = send_json_command(KODI_HTTP_IP, KODI_HTTP_PORT, 'XBMC.GetInfoBooleans', params={'booleans':['System.ScreenSaverActive']})
        if screenSaverStatus == {u'System.ScreenSaverActive': True}:
          send_json_command(KODI_HTTP_IP, KODI_HTTP_PORT, "Input.Select")

# Check if current PID still exists
def check_pid(pid):        
    """ Check For the existence of a unix pid. """
    try:
        os.kill(pid, 0)
    except OSError:
        return False
    else:
        return True

# Display message on screen
def xbmc_osd_message(KODI_HTTP_IP, KODI_HTTP_PORT=KODI_HTTP_PORT):
    for OSD_STRING in MESSAGE_WRAPPED:
        check_pid (PID)    
        send_json_command(KODI_HTTP_IP, KODI_HTTP_PORT, 'GUI.ShowNotification', params={'title':KODI_PRODUCT_NAME, 'message':OSD_STRING, 'displaytime':TIME, 'image':ICON})
        time.sleep(10)



#################
#  MAIN SCRIPT  #
#################

# Pre process tasks
quit_if_screen_not_running()
wait_if_already_running()
create_run_file()

# Poke screen if screensaver is active
#xbmc_poke_screen(KODI_HTTP_IP)

# Display message on screen
xbmc_osd_message(KODI_HTTP_IP)

# Send XMPP message in background mode
send_xmpp_message ()

# Remove run file created earlier to prevent others from using me
if os.path.exists(OSDRUNFILE):
    os.remove(OSDRUNFILE)

# Exit
sys.exit(0)
