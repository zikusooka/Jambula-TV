#!/bin/sh
# This script is used to extract manifest URLs from youtube videos using CLI. Use it to for example:
# - Play videos using kodi youtube addon
# - Add TV channels in IPTV m3u8 playlists
#
# Jambula Labs @copyright 2018-2019 All rights reserved

# Variables
YOUTUBE_DEBUG=no #no|yes
YOUTUBE_USER_URL="https://www.youtube.com/user"
YOUTUBE_CHANNEL_URL="https://www.youtube.com/channel"
YOUTUBE_WATCH_URL="https://www.youtube.com/watch?v"
YOUTUBE_DL_CMD="/usr/bin/youtube-dl"
YOUTUBE_DL_OPTS="-q -4 -i --ignore-config --prefer-insecure --no-check-certificate --geo-bypass --hls-prefer-ffmpeg"
YOUTUBE_VARIABLES_TEMP_FILE="/tmp/youtube_variables"
YOUTUBE_FETCH_IN_PROGRESS_FILE="/tmp/youtube_fetch_in_progress"
YOUTUBE_VIDEO_FORMAT=93
# Video Quality definitions according to format selected 
case $YOUTUBE_VIDEO_FORMAT in
91)
YOUTUBE_VIDEO_QUALITY="mp4   256x144   HLS   197k    avc1.4d400c   mp4a.40.5@ 48k   (91)"
;;
92)
YOUTUBE_VIDEO_QUALITY="mp4   426x240   HLS   338k    avc1.4d4015   mp4a.40.5@ 48k   (92)"
;;
93)
YOUTUBE_VIDEO_QUALITY="mp4   640x360   HLS   829k    avc1.4d401e   mp4a.40.2@128k   (93)"
;;
94)
YOUTUBE_VIDEO_QUALITY="mp4   854x480   HLS   1380k   avc1.4d401f   mp4a.40.2@128k   (94)"
;;
esac

TVHEADEND_LOG_FILE=MY_TVHEADEND_LOG_FILE
KODI_LOG_FILE=MY_KODI_LOG_FILE
OSDRUNFILE=$(grep ^OSDRUNFILE $(which jambulatv-osd) | cut -d '=' -f2 | head -1 | awk {'print $1'} | sed "s/[\"|']//g")

CURL_CMD="/usr/bin/curl"
CURL_OPTS="-s -S -L -m 60"

HTTP_BROWSER_USERAGENT="MY_USER_AGENT"
HTTP_BROWSER_COMMAND="$CURL_CMD $CURL_OPTS"

STREAM_NAME=$(echo $@ | sed 's:"::g')
STREAM_PRETTY_NAME=$(echo $STREAM_NAME | tr '[:lower:]' '[:upper:]')

JAMBULATV_SETUP_DB_NAME=MY_JAMBULATV_SETUP_DB_NAME
JAMBULATV_SETUP_DB_USER=MY_JAMBULATV_SETUP_DB_USER
JAMBULATV_SETUP_DB_PASS=MY_JAMBULATV_SETUP_DB_PASS
JAMBULATV_SETUP_DB_TABLE=MY_JAMBULATV_SETUP_DB_TABLE



###############
#  FUNCTIONS  #
###############
# Usage
usage () {
if [ "x$STREAM_NAME" = "x" ];
then
clear
cat <<EOF
Usage:  $(basename $0) [STREAM NAME] 

Supported Youtube streams:
--------------------------
ntv uganda
sparktv uganda
bukeddetv uganda
citizentv kenya 
ktn news kenya
ktn home kenya
ntv kenya
learn swahili 
inooro tv kenya
joy news ghana
adom tv ghana
tvc news nigeria
channels tv nigeria
ann7 south africa
africanews
cnbc africa
bloomberg
fox news
cnn
pbs newshour
nbc2
aljazeera
twit live

EOF
exit 1
fi
}

check_who_called_tool () {
# Check if an HTSP client called me
[ -e $TVHEADEND_LOG_FILE ] && \
tail -38 $TVHEADEND_LOG_FILE | grep -m 1 "$STREAM_NAME" | grep "profile=\"htsp\"" > /dev/null 2>&1
CALLED_BY_HTSP=$?
#
# Check if Kodi API called me
[ -e $KODI_LOG_FILE ] && \
tail -1 $KODI_LOG_FILE | grep -m 1 "webserver: request received for /jsonrpc" > /dev/null 2>&1
CALLED_BY_JSONRPC=$?
}

remove_previous_osd_message () {
# Kill any lingering OSD message scrolls
OSD_PID=$(ps auxw | grep -Ev grep | grep jambulatv-osd | grep python | awk {'print $2'})
[ "x$OSD_PID" = "x" ] || sudo kill -15 $OSD_PID
# Remove OSD run file if it exists
[ ! -e $OSDRUNFILE ] || sudo rm -f $OSDRUNFILE
}

osd_notification_fetching () {
# Kill any lingering OSD message scrolls
remove_previous_osd_message
#
# OSD notification if called by htsp client or jsonrpc
if [ "$CALLED_BY_HTSP" = "0" ] || [ "$CALLED_BY_JSONRPC" = "0" ];
then
jambulatv-osd -m "$STREAM_PRETTY_NAME  ::  Please wait while I fetch and buffer this stream" -t 20000 &
fi
}

osd_notification_streaming () {
# Kill any lingering OSD message scrolls
remove_previous_osd_message
#
# OSD notification if called by htsp client or jsonrpc
if [ "$CALLED_BY_HTSP" = "0" ] || [ "$CALLED_BY_JSONRPC" = "0" ];
then
jambulatv-osd -m "$STREAM_PRETTY_NAME  ::  Streaming" -t 7000 &
fi
}

osd_notification_failed () {
# Kill any lingering OSD message scrolls
remove_previous_osd_message
#
# OSD notification if called by htsp client or jsonrpc
if [ "$CALLED_BY_HTSP" = "0" ] || [ "$CALLED_BY_JSONRPC" = "0" ];
then
jambulatv-osd -m "$STREAM_PRETTY_NAME  ::  Am sorry this stream was not found.  Please try again later" -t 10000 &
fi
}

search_waiting_sound_effects () {
# Dont play sound effects if tvheadend iptv {scan|map} running. Play if called by HTSP or json RPC calls
[[ -e $TVHEADEND_IPTV_SCAN_IN_PROGRESS_TEMP_FILE || -e $TVHEADEND_IPTV_MAP_IN_PROGRESS_TEMP_FILE ]] && \
	export CALLED_BY_JSONRPC=1 CALLED_BY_HTSP=1 
#
# Play sound effects if tool was called by HTSP or json RPC calls
[[ "$CALLED_BY_HTSP" = "0" || "$CALLED_BY_JSONRPC" = "0" ]] && \
	jambulatv-sounds api $YOUTUBE_FETCH_IN_PROGRESS_FILE
}

query_mysql_db () {
mysql -s -u ${JAMBULATV_SETUP_DB_USER} -p${JAMBULATV_SETUP_DB_PASS} 2> /dev/null << EOF
USE ${JAMBULATV_SETUP_DB_NAME};
SELECT $@ FROM ${JAMBULATV_SETUP_DB_TABLE} WHERE id = (SELECT MAX(id) FROM ${JAMBULATV_SETUP_DB_TABLE});
EOF
}

query_db_4_youtube_api () {
# Query DB for custom variables
GOOGLE_YOUTUBE_API_KEY=$(query_mysql_db youtube_api_key)
GOOGLE_YOUTUBE_CLIENT_ID=$(query_mysql_db youtube_client_id)
GOOGLE_YOUTUBE_CLIENT_SECRET=$(query_mysql_db youtube_client_secret)
}

youtube_search_video_id_via_api () {
# Youtube search variables
YOUTUBE_SEARCH_URL=https://www.googleapis.com/youtube/v3/search
YOUTUBE_API_KEY="$GOOGLE_YOUTUBE_API_KEY"
YOUTUBE_SEARCH_PHRASE="$@"
YOUTUBE_SEARCH_TEXT="$(echo "$YOUTUBE_SEARCH_PHRASE" | sed -s "s: :+:g")"
YOUTUBE_MAX_RESULTS=3
YOUTUBE_SEARCH_OUTPUT_FILE=/tmp/youtube_search_results
YOUTUBE_PLAYLIST_FILE=/tmp/youtube_video_ids_found
#
# Remove previous youtube search results
[ -e $YOUTUBE_SEARCH_OUTPUT_FILE ] && sudo rm -f $YOUTUBE_SEARCH_OUTPUT_FILE
# Remove previous youtube playlist file
[ -e $YOUTUBE_PLAYLIST_FILE ] && sudo rm -f $YOUTUBE_PLAYLIST_FILE
#
# Search for Youtube IDs using API
# NOTE: Do not use curl --data/ or -d option to post - Youtube search fails if done
$HTTP_BROWSER_COMMAND -A "$HTTP_BROWSER_USERAGENT" -o $YOUTUBE_SEARCH_OUTPUT_FILE ${YOUTUBE_SEARCH_URL}?part=snippet'&'sp="$YOUTUBE_SEARCH_FILTER"'&'key="$YOUTUBE_API_KEY"'&'type=video'&'eventType="$YOUTUBE_EVENT_TYPE"'&'maxResults=$YOUTUBE_MAX_RESULTS'&'q="$YOUTUBE_SEARCH_TEXT"
#
# Generate Youtube playlist containing video Ids
cat $YOUTUBE_SEARCH_OUTPUT_FILE | jq -r '.items[]' | grep videoId | awk {'print $2'} | sed 's:["|,]::g' > $YOUTUBE_PLAYLIST_FILE
#
# Get the first Youtube ID from the playlist
YOUTUBE_VIDEO_ID=$(head -1 $YOUTUBE_PLAYLIST_FILE)
#
# Export Youtube ID
export YOUTUBE_VIDEO_ID
}

youtube_search_video_id_via_scraper () {
# Youtube search variables
YOUTUBE_SEARCH_URL=https://www.youtube.com/results
YOUTUBE_SEARCH_PHRASE="$@"
YOUTUBE_SEARCH_TEXT="$(echo "$YOUTUBE_SEARCH_PHRASE" | sed -s "s: :+:g")"
YOUTUBE_SEARCH_FILTER="CAMSBAgCQAFQFA%253D%253D"
YOUTUBE_SEARCH_OUTPUT_FILE=/tmp/youtube_search_results
YOUTUBE_SEARCH_SITE_LINKS_FILE=/tmp/youtube_links_found
#
# Remove previous youtube search results
[ -e $YOUTUBE_SEARCH_OUTPUT_FILE ] && sudo rm -f $YOUTUBE_SEARCH_OUTPUT_FILE
#
# Search for Youtube IDs using scraped data with filters: Live, Today, View Count
$HTTP_BROWSER_COMMAND -A "$HTTP_BROWSER_USERAGENT" -o $YOUTUBE_SEARCH_OUTPUT_FILE \
	${YOUTUBE_SEARCH_URL}?q=$YOUTUBE_SEARCH_TEXT -d sp="$YOUTUBE_SEARCH_FILTER"
#
# Filter out HTML tags from search output. Strip out Youtube links
YOUTUBE_VIDEO_ID=$(grep -i "$YOUTUBE_SEARCH_PHRASE" $YOUTUBE_SEARCH_OUTPUT_FILE | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
#
# Export Youtube ID
export YOUTUBE_VIDEO_ID
}

set_youtube_search_method () {
query_db_4_youtube_api
#
# Method of search depending on availability of Youtube API Key
if [ "x$GOOGLE_YOUTUBE_API_KEY" != "x" ];
then
# API available
youtube_search_method=youtube_search_video_id_via_api
else
# No API
youtube_search_method=youtube_search_video_id_via_scraper
fi
}

# -----------------------------------------------------------
# a) PRE-DEFINED CHANNELS: Extract and Set Youtube video IDs
# -----------------------------------------------------------
youtube_video_id_ntv_uganda () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/ntvuganda | grep -i -e "NTV Uganda Livestream" -e "NTV Uganda Live Stream" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_sparktv_uganda () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/ntvuganda | grep -i -e "Spark TV LiveStream" -e "Spark TV Live Stream" -e "Spark TV Uganda Livestream"  -e "SparkTV Uganda Live Stream" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_bukeddetv_uganda () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/bukeddetv | grep -i -e "Bukedde TV Live Stream" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_citizentv_kenya () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/kenyacitizentv | grep -i "Citizen TV Live" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_ktn_news_kenya () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/standardgroupkenya | grep -i -e "KTN News Live Stream (Nairobi Kenya)" -e "KTN News Live Stream" -e "KTN Kenya Live Stream" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_ktn_home_kenya () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/KTNClassics | grep -i -e "KTN Home Livestream (Nairobi Kenya)" -e "KTN Home Live Stream" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_ntv_kenya () {
YOUTUBE_LIVE_CHANNEL_PAGE_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/qtvkenya/channels | awk -F: '/title="Live"/ { print $0 }' | grep -oP '(?<=href="/channel/).+?(?=".*>Live)' | uniq)
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_CHANNEL_URL/$YOUTUBE_LIVE_CHANNEL_PAGE_ID | grep -i -e "NTV Kenya Live Stream" -e "shows Live on NTV Kenya" -e "LIVE: \"NTV Today\"" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_learn_swahili () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/SwahiliPod101 | grep -i -e "Learn Swahili in 24 Hours with SwahiliPod101 TV" -e "Learn Swahili 24/7 with SwahiliPod101 TV" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_inooro_tv_kenya () {
YOUTUBE_LIVE_CHANNEL_PAGE_ID=UCZlNMLTVNxzwB0axilK-rDw
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_CHANNEL_URL/$YOUTUBE_LIVE_CHANNEL_PAGE_ID | awk -F: '/title="iNooro TV Live"/ { print $0 }' | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_joy_news_ghana () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/myjoyonlinetube | grep -i -e "Joy News live" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_adom_tv_ghana () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/adomtvtube | grep -i -e "Adom TV Live" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_tvc_news_nigeria () {
YOUTUBE_LIVE_CHANNEL_PAGE_ID=UCgp4A6I8LCWrhUzn-5SbKvA
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_CHANNEL_URL/$YOUTUBE_LIVE_CHANNEL_PAGE_ID | awk -F: '/title="TVC News Nigeria Live"/ { print $0 }' | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_channels_tv_nigeria () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/channelsweb | grep -i -e "Channels Television - Live" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_ann7_south_africa () {
YOUTUBE_LIVE_CHANNEL_PAGE_ID=UC6gciFMFztxlRrO5f4K1xbQ
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_CHANNEL_URL/$YOUTUBE_LIVE_CHANNEL_PAGE_ID | grep -B20 -i "LIVE NOW" | grep -i "ANN7 TV Live Stream" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_africanews () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_CHANNEL_URL/UC1_E8NeF5QHY2dtdLRBCCLA | grep "africanews Live" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_cnbc_africa () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/ABNDigital | grep -i "Africa Business News - Live" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_bloomberg () {
YOUTUBE_VIDEO_ID=$($HTTP_BROWSER_COMMAND $YOUTUBE_USER_URL/Bloomberg | grep -i -e "Bloomberg TV LIVE" -e "Bloomberg Global News LIVE" -e "Bloomberg Global News" | grep -oP '(?<=href="/watch\?v=).+?(?=")' | uniq | head -1)
}

youtube_video_id_fox_news () {
$youtube_search_method "Fox News Live"
YOUTUBE_VIDEO_ID=$YOUTUBE_VIDEO_ID
}

youtube_video_id_cnn () {
$youtube_search_method "CNN Live"
YOUTUBE_VIDEO_ID=$YOUTUBE_VIDEO_ID
}

youtube_video_id_pbs_newshour () {
$youtube_search_method "PBS NewsHour"
YOUTUBE_VIDEO_ID=$YOUTUBE_VIDEO_ID
}

youtube_video_id_nbc2 () {
$youtube_search_method "NBC2 Live"
YOUTUBE_VIDEO_ID=$YOUTUBE_VIDEO_ID
}

youtube_video_id_aljazeera () {
$youtube_search_method "Al Jazeera English"
YOUTUBE_VIDEO_ID=$YOUTUBE_VIDEO_ID
}

youtube_video_id_twit_live () {
$youtube_search_method "Twit Live"
YOUTUBE_VIDEO_ID=$YOUTUBE_VIDEO_ID
}

# -------------------------------------------------------------------------
# b) PRE-DEFINED CHANNELS: Match Youtube video IDs based on user's request
# -------------------------------------------------------------------------
set_youtube_video_id () {
# Set youtube event type flag to 'live' for TV channels
YOUTUBE_EVENT_TYPE=live
#
case "$STREAM_NAME" in
# NTV Uganda
[Nn][Tt][Vv]*[Uu][Gg][Aa][Nn][Dd][Aa])
youtube_video_id_ntv_uganda
;;
# SparkTV Uganda
[Ss][Pp][Aa][Rr][Kk][Tt][Vv]*[Uu][Gg][Aa][Nn][Dd][Aa])
youtube_video_id_sparktv_uganda
;;
# BukeddeTV Uganda
[Bb][Uu][Kk][Ee][Dd][Dd][Ee][Tt][Vv]*[Uu][Gg][Aa][Nn][Dd][Aa])
youtube_video_id_bukeddetv_uganda
;;
# CitizenTV Kenya 
[Cc][Ii][Tt][Ii][Zz][Ee][Nn][Tt][Vv]*[Kk][Ee][Nn][Yy][Aa])
youtube_video_id_citizentv_kenya
;;
# KTN News Kenya 
[Kk][Tt][Nn]*[Nn][Ee][Ww][Ss]*[Kk][Ee][Nn][Yy][Aa])
youtube_video_id_ktn_news_kenya
;;
# KTN Home Kenya 
[Kk][Tt][Nn]*[Hh][Oo][Mm][Ee]*[Kk][Ee][Nn][Yy][Aa])
youtube_video_id_ktn_home_kenya
;;
# NTV Kenya 
[Nn][Tt][Vv]*[Kk][Ee][Nn][Yy][Aa])
youtube_video_id_ntv_kenya
;;
# Learn Swahili in 24 Hours with SwahiliPod101 TV 
[Ll][Ee][Aa][Rr][Nn]*[Ss][Ww][Aa][Hh][Ii][Ll][Ii])
youtube_video_id_learn_swahili 
;;
# iNooro TV Live (Kenya - Kikuyu)
[Ii][Nn][Oo][Oo][Rr][Oo]*[Tt][Vv]*[Kk][Ee][Nn][Yy][Aa])
youtube_video_id_inooro_tv_kenya
;;
# Joy News live (Ghana)
[Jj][Oo][Yy]*[Nn][Ee][Ww][Ss]*[Gg][Hh][Aa][Nn][Aa])
youtube_video_id_joy_news_ghana
;;
# Adom TV Live (Ghana)
[Aa][Dd][Oo][Mm]*[Tt][Vv]*[Gg][Hh][Aa][Nn][Aa])
youtube_video_id_adom_tv_ghana
;;
# TVC News Nigeria
[Tt][Vv][Cc]*[Nn][Ee][Ww][Ss]*[Nn][Ii][Gg][Ee][Rr][Ii][Aa])
youtube_video_id_tvc_news_nigeria
;;
# Channels TV Nigeria
[Cc][Hh][Aa][Nn][Nn][Ee][Ll][Ss]*[Tt][Vv]*[Nn][Ii][Gg][Ee][Rr][Ii][Aa])
youtube_video_id_channels_tv_nigeria
;;
# ANN7 South Africa
[Aa][Nn][Nn][7]*[Ss][Oo][Uu][Tt][Hh]*[Aa][Ff][Rr][Ii][Cc][Aa])
youtube_video_id_ann7_south_africa
;;
# Africanews
[Aa][Ff][Rr][Ii][Cc][Aa][Nn][Ee][Ww][Ss])
youtube_video_id_africanews 
;;
# CNBC Africa
[Cc][Nn][Bb][Cc]*[Aa][Ff][Rr][Ii][Cc][Aa])
youtube_video_id_cnbc_africa
;;
# Bloomberg
[Bb][Ll][Oo][Oo][Mm][Bb][Ee][Rr][Gg])
youtube_video_id_bloomberg
;;
# Fox News
[Ff][Oo][Xx]*[Nn][Ee][Ww][Ss])
youtube_video_id_fox_news
;;
# CNN
[Cc][Nn][Nn])
youtube_video_id_cnn
;;
# PBS NewsHour
[Pp][Bb][Ss]*[Nn][Ee][Ww][Ss][Hh][Oo][Uu][Rr])
youtube_video_id_pbs_newshour
;;
# NBC2
[Nn][Bb][Cc]2)
youtube_video_id_nbc2
;;
# Al Jazeera
[Aa][Ll][Jj][Aa][Zz][Ee][Ee][Rr][Aa])
youtube_video_id_aljazeera
;;
# TWit
[Tt][Ww][Ii][Tt]*[Ll][Ii][Vv][Ee])
youtube_video_id_twit_live
;;
# Other search phrases
*)
# Set youtube event type flag to blank for Non - TV channels
YOUTUBE_EVENT_TYPE=""
#
IS_NOT_PREDEFINED_TV_CHANNEL=y
$youtube_search_method "$STREAM_NAME"
YOUTUBE_VIDEO_ID=$YOUTUBE_VIDEO_ID
;;
esac
}

stop_waiting_sound_effects () {
sudo touch $YOUTUBE_FETCH_IN_PROGRESS_FILE
}

get_youtube_manifest () {
YOUTUBE_MANIFEST_URL=$($YOUTUBE_DL_CMD $YOUTUBE_DL_OPTS -f $YOUTUBE_VIDEO_FORMAT -g --youtube-skip-dash-manifest "$YOUTUBE_WATCH_URL=$YOUTUBE_VIDEO_ID" | grep http | head -1)
}

youtube_failed_actions () {
# Add Youtube fetch-in-progress temp file - Stop waiting sounds effect
stop_waiting_sound_effects
# Failure notification on OSD IF script was called by htsp client
osd_notification_failed
# Pause a bit - really needed, for beeps to stop
sleep 2
#
# Check if there is a Live TV channel playing
TYPE_OF_VIDEO_PLAYING=$(/usr/bin/jambulatv-kodi-controller active_video_type | cut -d '=' -f2- | sed "s:^ ::g" | sed "s:\[::g" | sed "s:\]::g")
# If there is a Live TV channel that is a) Active and b) was called by either
# i)htsp client or ii) jsonrpc: STOP that channel
if [[ "$TYPE_OF_VIDEO_PLAYING" = "Live TV" ]] && \
	[[ "$CALLED_BY_HTSP" = "0" || "$CALLED_BY_JSONRPC" = "0" ]];
	then
	jambulatv-kodi-controller tv_play_stop &
fi
#
# Remove Youtube temp variables file in case of next run
[ -e $YOUTUBE_VARIABLES_TEMP_FILE ] && sudo rm -f $YOUTUBE_VARIABLES_TEMP_FILE
# Add log message to systemd journal if No Youtube ID was found
if [[ "x$YOUTUBE_VIDEO_ID" = "x" ]];
then
logger -s -t $(basename $0) "Error: The Youtube ID for $STREAM_NAME was NOT found.  Quitting ..."
# Add log message to systemd journal if No Manifest ID was found
elif [[ "x$YOUTUBE_MANIFEST_URL" = "x" ]];
then
logger -s -t $(basename $0) "Error: The Youtube ID for $STREAM_NAME was found i.e. $YOUTUBE_VIDEO_ID.  However, the Manifest URL was not fetched.  Please upgrade youtube-dl and try again.  Quitting ..."
fi
# Quit
exit 1
}

quit_if_no_video_id_or_manifest_is_found () {
# If No Manifest URL and this tool was called for the purpose of watching predefined Youtube video i.e. Live TV
if [[ "x$YOUTUBE_MANIFEST_URL" = "x" && "$IS_NOT_PREDEFINED_TV_CHANNEL" != "y" ]];
then
youtube_failed_actions
# If No Video ID and this tool was called for the purpose of watching NON-predefined Youtube video i.e. Videos
elif [[ "x$YOUTUBE_VIDEO_ID" = "x" && "$IS_NOT_PREDEFINED_TV_CHANNEL" = "y" ]];
then
youtube_failed_actions
fi
}

save_youtube_variables () {
# Remove Youtube variables temp file if it exists
[ -e $YOUTUBE_VARIABLES_TEMP_FILE ] && sudo rm -f $YOUTUBE_VARIABLES_TEMP_FILE
#
# Create a Youtube variables temp file for other tools to use
cat > $YOUTUBE_VARIABLES_TEMP_FILE <<EOF
YOUTUBE_VIDEO_ID=${YOUTUBE_VIDEO_ID}
YOUTUBE_VIDEO_URL=${YOUTUBE_WATCH_URL}=${YOUTUBE_VIDEO_ID}
YOUTUBE_VIDEO_QUALITY=${YOUTUBE_VIDEO_QUALITY}
YOUTUBE_MANIFEST_URL=${YOUTUBE_MANIFEST_URL}
EOF
#
# Export set Youtube variables
export YOUTUBE_VIDEO_ID YOUTUBE_VIDEO_URL YOUTUBE_VIDEO_QUALITY YOUTUBE_MANIFEST_URL
}

print_debug_info () {
if [[ "$YOUTUBE_DEBUG" = "yes" ]] && [[ -e $YOUTUBE_VARIABLES_TEMP_FILE ]];
then
cat $YOUTUBE_VARIABLES_TEMP_FILE
fi
}



#################
#  MAIN SCRIPT  #
#################
# Usage
usage

# Check if an HTSP client or Kodi API called me
check_who_called_tool

# Fetching notification on OSD while we wait IF script was called by htsp client
osd_notification_fetching

# Play waiting sound effects i.e. beeps 
search_waiting_sound_effects 

# Set search method
set_youtube_search_method

# Set Youtube Video ID
set_youtube_video_id

# Get Youtube Manifest URL
get_youtube_manifest

# Quit if no Youtube ID is found 
quit_if_no_video_id_or_manifest_is_found

# Add Youtube fetch-in-progress temp file - Stop waiting sounds effect
stop_waiting_sound_effects 

# Save Youtube variables
save_youtube_variables

# Streaming notification on OSD while we wait IF script was called by htsp client
osd_notification_streaming

# Print Youtube variables to screen if debugging is enables
print_debug_info
