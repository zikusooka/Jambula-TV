#!/bin/sh
# Display Picture-in-Picture (PIP) of your favorite TV channels at JambulaTV
# Jambula Labs @copyright 2017-2018 All rights reserved

# Variables
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_FUNCTIONS_FILE=$PROJECT_SYSTEM_CONF_DIR/functions

# Source install functions
. $PROJECT_FUNCTIONS_FILE

PIP_ACTION=$@
PIP_WIDTH=$(echo "$(xrandr -q | grep Screen | grep current | cut -d , -f2 | awk {'print $2'})/2" | bc)
PIP_HEIGHT=$(echo "$(xrandr -q | grep Screen | grep current | cut -d , -f2 | awk {'print $4'})/2.7" | bc)
PIP_X_COORDINATE="100%"
PIP_Y_COORDINATE="100%"
PIP_ASPECT_RATIO="16:9" #4:3
PIP_PLAYLIST=$STATEDIR/tmp/pip_playlist
PIP_STATE_FILE=$STATEDIR/tmp/pip_status
PIP_FIFO_FILE=$TMPDIR/picture_in_picture_fifo
PIP_LOGFILE=$PROJECT_SYSTEM_LOG_DIR/pip-vlc.log
PIP_PLAYER_CMD=/usr/bin/mplayer
PIP_PLAYER_OPTIONS="-benchmark -slave -input file=$PIP_FIFO_FILE -framedrop -autoq 100 -autosync 100 -display $DISPLAY -ontop -noconfig all -really-quiet -nocache -nolirc -prefer-ipv4 -vo x11 -nosound -ao null -zoom -x $PIP_WIDTH -y $PIP_HEIGHT -geometry $PIP_X_COORDINATE:$PIP_Y_COORDINATE -aspect $PIP_ASPECT_RATIO"

# Notices
OSD_NOTICE_TIMEOUT=9000
OSD_NOTICE_PIP_ACTIVATED="Picture in Picture :: Player activated"
OSD_NOTICE_PIP_DEACTIVATED="Picture in Picture :: Player deactivated"
OSD_NOTICE_PIP_ALREADY_ON="Picture in Picture :: Player is already active"
OSD_NOTICE_PIP_NEXT="Picture in Picture :: Next item in playlist selected"
OSD_NOTICE_PIP_PREVIOUS="Picture in Picture :: Previous item in playlist selected"
OSD_NOTICE_PIP_PAUSED="Picture in Picture :: Player paused"
OSD_NOTICE_PIP_UNPAUSED="Picture in Picture :: Player resumed"
OSD_NOTICE_PIP_STATUS="Picture in Picture :: Current status is: "
OSD_NOTICE_PIP_PLAYLIST_NOT_FOUND="Picture in Picture :: Playlist file not found.  For this feature to work, please add some channels to FAVOURITES"

TVHEADEND_API_URL="http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api"
TVHEADEND_PLAY_STREAM_URL="http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/play/stream"
TVHEADEND_CHANNELS_URL=$TVHEADEND_API_URL/channel/list
TVHEADEND_SUBSCRIPTIONS_URL=$TVHEADEND_API_URL/status/subscriptions
TVHEADEND_CHANNELS_RAW_FILE=$TMPDIR/tvheadend_channel_list
TVHEADEND_SUBSCRIPTIONS_RAW_FILE=$TMPDIR/tvheadend_subscribed

KODI_FAVOURITES=$KODI_USER_DATA/favourites.xml



###############
#  FUNCTIONS  #
###############

pip_notices () {
# Notices - OSD
$OSD_TOOL -m "$@" -t $OSD_NOTICE_TIMEOUT
# Notices - CLI
logger -s -t $(basename $0) "$@"
}

pip_status () {
# Ensure status file exists, and its size is greater than 0 
[ -s "$PIP_STATE_FILE" ] || echo -n "OFF" > $PIP_STATE_FILE
# Set current state variable                                                
PIP_STATE=$(cat $PIP_STATE_FILE)
}

pip_toggle_fullscreen () {
# Get PIP status
pip_status 
# Toggle to Window or Fullscreen modes depending on PIP status
[[ "$PIP_STATE" = "ON" ]] && jambulatv-kodi-controller fullscreen_toggle
}

get_current_live_tv_channel () {
CURRENT_TV_CHANNEL=$(curl -sS $TVHEADEND_SUBSCRIPTIONS_URL | jq '.entries[] |.channel' | sed -e "s:\"::g" | tail -1)
}

display_osd_current_channel () {
# Wait for channel change to occur
sleep 5
# Query TVHeadend server for name of Live TV channel currently playing
get_current_live_tv_channel
# Display channel name on OSD screen
echo "osd_show_text '$CURRENT_TV_CHANNEL' 10000 0" > $PIP_FIFO_FILE &
}

pip_generate_playlist_live_tv () {
# Remove existing playlist
[ ! -f $PIP_PLAYLIST ] || sudo rm -f $PIP_PLAYLIST
# Query TVHeadend server for name of Live TV channel currently playing
get_current_live_tv_channel
# Query Kodi favourites list
grep -i pvr $KODI_FAVOURITES | grep favourite | while read FAVORITE
do
#
# Set channel variables
CHANNEL_NAME="$(echo $FAVORITE | cut -d '"' -f2)"
CHANNEL_UUID=$(curl -sS $TVHEADEND_CHANNELS_URL | jq '.entries[] | select(.val=="'"$CHANNEL_NAME"'") | .key' | sed 's:"::g' | tail -1)
CHANNEL_URL="$TVHEADEND_PLAY_STREAM_URL/channel/$CHANNEL_UUID?title=$CHANNEL_NAME"
#
# If TV channel matches the one running now or does not have a UUID i.e. No channel - SKIP
if [[ $CHANNEL_NAME = $CURRENT_TV_CHANNEL || "x$CHANNEL_UUID" = "x" ]];
then
# Exclude currently playing TV channel OR Non-Existent channels
continue
else
# Add all favorite channels to playlist
echo "$CHANNEL_URL" >> $PIP_PLAYLIST
fi
#
done

# Test if PIP playlist is valid i.e. not blank.  If not found or blank, QUIT
if [[ ! -s $PIP_PLAYLIST ]];
then
pip_notices "$OSD_NOTICE_PIP_PLAYLIST_NOT_FOUND"
exit 1
fi
}

pip_play () {
# Get PIP status
pip_status 
# Quit if PIP is already running
if [[ "$PIP_STATE" != "OFF" ]];
then
# Notices 
pip_notices "$OSD_NOTICE_PIP_ALREADY_ON"
# Quit
exit 1
fi
#
# Generate playlist - Live TV
pip_generate_playlist_live_tv
#
# Create PIP status file and set to 'ON'
echo -n "ON" > $PIP_STATE_FILE
# Notices 
pip_notices "$OSD_NOTICE_PIP_ACTIVATED"
# Make FiFo file if it does not exist
[[ -e $PIP_FIFO_FILE ]] || mkfifo $PIP_FIFO_FILE
# PiP player
$PIP_PLAYER_CMD $PIP_PLAYER_OPTIONS -playlist $PIP_PLAYLIST > /dev/null 2>&1 &
# Display channel name on OSD screen
display_osd_current_channel
# Toggle full screen to windowed mode
pip_toggle_fullscreen
}

pip_stop () {
# Get PIP status
pip_status 
# Kill PIP player process
PID_PIP_PLAYER=$(ps auxw | grep -Ev grep | grep `basename $PIP_PLAYER_CMD` | grep picture_in_picture | awk {'print $2'})
[ "x$PID_PIP_PLAYER" = "x" ] || kill -15 $PID_PIP_PLAYER
# Toggle full screen to fullscreen mode
pip_toggle_fullscreen
# Notices
[[ "$PIP_STATE" = "ON" ]] && pip_notices "$OSD_NOTICE_PIP_DEACTIVATED"
# Create PIP status file
echo -n "OFF" > $PIP_STATE_FILE
}

pip_pause () {
# Get PIP status
pip_status 
# Pause
[[ "$PIP_STATE" = "ON" ]] && echo "pause" > $PIP_FIFO_FILE
# Notices
[[ "$PIP_STATE" = "ON" ]] && pip_notices "$OSD_NOTICE_PIP_PAUSED"
}

pip_unpause () {
# Get PIP status
pip_status 
# Pause
[[ "$PIP_STATE" = "ON" ]] && echo "pause" > $PIP_FIFO_FILE
# Notices
[[ "$PIP_STATE" = "ON" ]] && pip_notices "$OSD_NOTICE_PIP_UNPAUSED"
}

pip_next () {
# Get PIP status
pip_status 
# Next 
[[ "$PIP_STATE" = "ON" ]] && echo "pt_step 1" > $PIP_FIFO_FILE
# Display channel name on OSD screen
display_osd_current_channel
# Notices
[[ "$PIP_STATE" = "ON" ]] && pip_notices "$OSD_NOTICE_PIP_NEXT"
}

pip_previous () {
# Get PIP status
pip_status 
# Previous 
[[ "$PIP_STATE" = "ON" ]] && echo "pt_step -1" > $PIP_FIFO_FILE
# Display channel name on OSD screen
display_osd_current_channel
# Notices
[[ "$PIP_STATE" = "ON" ]] && pip_notices "$OSD_NOTICE_PIP_PREVIOUS"
}

pip_display_status () {
# Get PIP status
pip_status 
# Notices
pip_notices "$OSD_NOTICE_PIP_STATUS $PIP_STATE"
}



#################
#  MAIN SCRIPT  #
#################
case $1 in
start)
pip_play
;;

stop)
pip_stop
;;

pause)
pip_pause
;;

unpause)
pip_unpause
;;

next)
pip_next
;;

previous)
pip_previous
;;

status)
pip_display_status
;;

*)
cat <<EOF
Usage: $(basename $0) [start|stop|pause|unpause|next|previous|status]
EOF
exit 1
;;
esac
