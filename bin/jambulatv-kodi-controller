#!/bin/sh

KODI_HTTP_IP=MY_KODI_HTTP_IP
KODI_HTTP_PORT=MY_KODI_HTTP_PORT
KODI_HTTP_USER=MY_KODI_HTTP_USER
KODI_HTTP_PASS=MY_KODI_HTTP_PASS
KODI_LOG=MY_KODI_LOG

TVHEADEND_HTTP_IP=MY_TVHEADEND_HTTP_IP
TVHEADEND_HTTP_PORT=MY_TVHEADEND_HTTP_PORT

TV_ACTION=$1
TV_CHANNEL="$2"
TV_DURATION="$3"

OSD_MESSAGE="$2"
KODI_ADDON="$2"

PVR_GROUP=1
PVR_STOP_REC_SCRIPT=/tmp/.stop_recording_tv_channel.sh
PVR_STATUS_FILE=/tmp/pvr_status



###############
#  FUNCTIONS  #
###############
usage () {
# Device Name
if [ "x$TV_ACTION" = "x" ];
then
clear
echo "Usage:  ./`basename $0` [TV_ACTION (osd_short|osd_long|addon_switch|pvr_hts_status|tv_play_start|mute|tv_play_stop|tv_record_start|tv_record_stop)] [TV_CHANNEL] [DURATION)]
"
exit 1
fi
# Device ID
if [ "$TV_ACTION" = "record" ] && [ "x$TV_CHANNEL" = "x" ];
then
clear
echo "Usage:  ./`basename $0` $TV_ACTION [TV_CHANNEL] [DURATION] (on|off)
"
exit 1
fi
#
# Notices
# short
if [ "$TV_ACTION" = "osd_short" ] && [ "x$OSD_MESSAGE" = "x" ];
then
clear
echo "Usage:  ./`basename $0` $TV_ACTION [OSD_MESSAGE]
"
exit 1
fi
# long
if [ "$TV_ACTION" = "osd_long" ] && [ "x$OSD_MESSAGE" = "x" ];
then
clear
echo "Usage:  ./`basename $0` $TV_ACTION [OSD_MESSAGE]
"
exit 1
fi
#
# Enable/Disable Kodi addons
if [ "$TV_ACTION" = "addon_switch" ] && [ "x$KODI_ADDON" = "x" ];
then
clear
echo "Usage:  ./`basename $0` $TV_ACTION [KODI_ADDON]
"
exit 1
fi
}

osd_notification_short () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "GUI.ShowNotification", "params": {"message":"'"$1"'", "title":"'"$2"'", "displaytime":2000}}' "http://127.0.0.1:8510/jsonrpc"
}

osd_notification_long () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "GUI.ShowNotification", "params": {"message":"'"$1"'", "title":"'"$2"'", "displaytime":30000}}' "http://127.0.0.1:8510/jsonrpc"
}

stop_player () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.Stop", "params": {"playerid":1}, "id": 1}' "http://127.0.0.1:8510/jsonrpc"
}

start_player () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.Open", "params":{"item":{"file":"/JambulaTV/Videos/TV_Recordings/tnss0054_h264b_640x368_256.mp4"}}}' "http://127.0.0.1:8510/jsonrpc"
}

mute_player () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Application.SetMute", "params": {"mute":"toggle"}, "id": 1}' "http://127.0.0.1:8510/jsonrpc"
}

get_tv_channel_id () {
CHANNELID=$(curl -s --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "PVR.GetChannels", "params": {"channelgroupid":'$PVR_GROUP'}, "id": 1}' "http://127.0.0.1:8510/jsonrpc" | jq . | grep -A1 -i "$TV_CHANNEL"  | grep channelid | awk {'print $2'}| head -1)
}

play_tv_channel () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.Open", "params":{"item":{"channelid":'$CHANNELID'}}}' "http://127.0.0.1:8510/jsonrpc"
}

record_tv_channel_start () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "PVR.Record", "params": {"record":"toggle", "channel":'$CHANNELID'}}' "http://127.0.0.1:8510/jsonrpc"

# Create timer script to stop recording after duration has elapsed
cat > $PVR_STOP_REC_SCRIPT << EOF
#!/bin/sh
# Stop Recording of $CHANNELID after $TV_DURATION seconds have elapsed

# Get UUID of the just scheduled recording
UUID=$(curl -s http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api/dvr/entry/grid_upcoming | jq .entries[] | grep -iw 'uuid' | awk {'print $2'} | sed 's:["|,]::g')

# Wait until requested duration lapses
sleep $TV_DURATION

# Stop recording
curl -X POST -H "text/x-json" -d uuid="%5B%22\$UUID%22%5D" http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api/dvr/entry/stop

# Self Destruct this script
rm -- \$0
EOF
# Make script executable
chmod 755 $PVR_STOP_REC_SCRIPT
# Run script now
echo "/bin/sh $PVR_STOP_REC_SCRIPT" | /usr/bin/at now
}

get_last_recorded_tv_channel () {
CURRENT_CHANNELID=$(grep -ai "state:recording" $KODI_LOG | tail -1 | cut -d , -f3 | cut -d : -f2)
}

record_tv_channel_stop () {
# Get UUID of current recording
UUID=$(curl -s http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api/dvr/entry/grid_upcoming | jq .entries[] | grep -iw 'uuid' | awk {'print $2'} | sed 's:["|,]::g')
#
# Stop recording
curl -X POST -H "text/x-json" -d uuid="%5B%22$UUID%22%5D" http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api/dvr/entry/stop
}


# Kodi Addons
# -----------
kodi_screensaver_poke () {
# Poke screen if screensaver is active
if [ "$KODI_SCREENSAVER_STATUS" = "true" ];
then
# Input.Select
curl -X POST -H "Content-Type: application/json" -u "$KODI_HTTP_USER:$KODI_HTTP_PASS" -d '{"jsonrpc":"2.0","method":"Input.Select","id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
fi
}

kodi_addon_script_doorbell () {
curl -X POST -H "Content-Type: application/json" -u "$KODI_HTTP_USER:$KODI_HTTP_PASS" -d '{"jsonrpc":"2.0","method":"Addons.ExecuteAddon","params":{"addonid":"script.doorbell","params":{"CamID":"'"$ZM_CAMERA_ID"'","CamName":"'"$ZM_CAMERA_NAME"'","CamEvent":"'"$ZM_CAMERA_EVENT_ID"'","CamTime":"'"$ZM_TIME"'","CamMessage":"'"$NOTIFICATION_MESSAGE"'"}},"id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
}

kodi_addon_toggle () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"Addons.SetAddonEnabled","params":{"addonid":"'"$1"'","enabled":"toggle"},"id":1}' http://127.0.0.1:8510/jsonrpc
}

check_pvr_hts_status () {
PVR_HTS_STATUS=$(curl -s --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"Addons.GetAddonDetails","params":{"addonid":"pvr.hts","properties":["enabled"]},"id":1}' http://127.0.0.1:8510/jsonrpc | egrep -o 'true|false')
# Export variable
cat > $PVR_STATUS_FILE << EOF
PVR_HTS_STATUS=$PVR_HTS_STATUS
EOF
}




#################
#  MAIN SCRIPT  #
#################

usage
 
get_tv_channel_id

case $TV_ACTION in

osd_short)
osd_notification_short "$2" "$3"
;;

osd_long)
osd_notification_long "$2" "$3"
;;

addon_switch)
kodi_addon_toggle "$2"
;;

pvr_hts_status)
check_pvr_hts_status
;;

tv_play_start)
play_tv_channel
;;

mute)
mute_player
;;

tv_play_stop)
stop_player
;;

tv_record_start) 
record_tv_channel_start
;;

tv_record_stop) 
record_tv_channel_stop
;;

esac
