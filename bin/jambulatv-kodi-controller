#!/bin/sh
# This is a general purpose script used in interacting with kodi API from the command line
# Jambula Labs @copyright 2017-2018 All rights reserved

# Variables
KODI_HTTP_IP=MY_KODI_HTTP_IP
KODI_HTTP_PORT=MY_KODI_HTTP_PORT
KODI_HTTP_USER=MY_KODI_HTTP_USER
KODI_HTTP_PASS=MY_KODI_HTTP_PASS
KODI_LOG=MY_KODI_LOG

TVHEADEND_HTTP_IP=MY_TVHEADEND_HTTP_IP
TVHEADEND_HTTP_PORT=MY_TVHEADEND_HTTP_PORT

TV_ACTION=$1
TV_CHANNEL="$2"
TV_DURATION="$3"

OSD_MESSAGE="$2"
KODI_ADDON="$2"

PING_TIMEOUT=3 #9
PING_IP_ADDRESS=8.8.8.8

PVR_GROUP=$(curl -s --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "PVR.GetChannelGroups", "params": {"channeltype":"tv"}, "id": 1}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc" | jq '.result.channelgroups[] | select(.label=="All channels") | .channelgroupid')
PVR_STOP_REC_SCRIPT=MY_TMPDIR/.stop_recording_tv_channel.sh
PVR_STATUS_FILE=MY_TMPDIR/pvr_status
TV_RECORD_STATUS_FILE=MY_TMPDIR/tv_record_status
ALL_TV_CHANNELS_LIST=MY_TMPDIR/tv_list_all

SCAN_VIDEOS_DIR=MY_USER_VIDEOS_DIR
SCAN_AUDIO_DIR=MY_USER_MUSIC_DIR

YOUTUBE_CMD=/usr/bin/jambulatv-youtube



###############
#  FUNCTIONS  #
###############
usage () {
# Device Name
if [ "x$TV_ACTION" = "x" ];
then
clear
echo "Usage:  ./`basename $0` [TV_ACTION (osd_short|osd_long|addon_switch|addon_status|addon_play_fmradio|addon_play_youtube|addon_play_streamztv|tv_channels|tv_play_start|tv_play_stop|video_play_start|active_player_type|active_player_id|video_play_pause|video_play_next|video_play_previous|audio_play_stop|video_play_stop|pictures_play_start|pictures_play_stop|music_play_offline_start|music_play_online_start|music_play_pause|music_play_next|music_play_previous|music_play_stop|volume_increase|volume_decrease|mute|tv_record_status|tv_record_timer_start|tv_record_timer_stop|tv_record_instant_start|tv_record_instant_stop|tv_record_schedule_create|tv_record_schedule_cancel|tv_record_schedule_stop|scan_video|scan_audio|clean_video|clean_audio|navigate_up|navigate_down|navigate_select|navigate_home|fullscreen_toggle)] [TV_CHANNEL] [DURATION)]
"
exit 1
fi
# Device ID
if [ "$TV_ACTION" = "record" ] && [ "x$TV_CHANNEL" = "x" ];
then
clear
echo "Usage:  ./`basename $0` $TV_ACTION [TV_CHANNEL] [DURATION] (on|off)
"
exit 1
fi
#
# Notices
# short
if [ "$TV_ACTION" = "osd_short" ] && [ "x$OSD_MESSAGE" = "x" ];
then
clear
echo "Usage:  ./`basename $0` $TV_ACTION [OSD_MESSAGE]
"
exit 1
fi
# long
if [ "$TV_ACTION" = "osd_long" ] && [ "x$OSD_MESSAGE" = "x" ];
then
clear
echo "Usage:  ./`basename $0` $TV_ACTION [OSD_MESSAGE]
"
exit 1
fi
#
# Enable/Disable Kodi addons
if [ "$TV_ACTION" = "addon_switch" ] && [ "x$KODI_ADDON" = "x" ];
then
clear
echo "Usage:  ./`basename $0` $TV_ACTION [KODI_ADDON]
"
exit 1
fi
#
# Status of Kodi addons
if [ "$TV_ACTION" = "addon_status" ] && [ "x$KODI_ADDON" = "x" ];
then
clear
echo "Usage:  ./`basename $0` $TV_ACTION [KODI_ADDON]
"
exit 1
fi
}

check_internet_access () {
# Check for internet connectivity - IMPORTANT: Don't use DNS to ping use actual IP address
ping -w $PING_TIMEOUT $PING_IP_ADDRESS > /dev/null 2>&1
INTERNET_ALIVE=$?
export INTERNET_ALIVE
}

osd_notification_short () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "GUI.ShowNotification", "params": {"message":"'"$1"'", "title":"'"$2"'", "displaytime":2000}}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

osd_notification_long () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "GUI.ShowNotification", "params": {"message":"'"$1"'", "title":"'"$2"'", "displaytime":30000}}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

type_of_player () {
ACTIVE_PLAYER_TYPE=$(curl -s --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.GetActivePlayers", "id": 1}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc" | jq ".result[] | .type" | sed 's:[,|"]::g')
# See if video/audio player is active
case "$ACTIVE_PLAYER_TYPE" in
video)
export VIDEO_IS_PLAYING=yes
;;
audio)
export AUDIO_IS_PLAYING=yes
;;
esac
# Print name of active player
echo "TYPE OF ACTIVE PLAYER = [$ACTIVE_PLAYER_TYPE]"
}

id_of_player () {
type_of_player
ACTIVE_PLAYER_ID=$(curl -s --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.GetActivePlayers", "id": 1}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc" | jq ".result[] | .playerid" | sed 's:[,|"]::g')
# Export ID of active player
export ACTIVE_PLAYER_ID=$ACTIVE_PLAYER_ID
# Print ID of active player
echo "ID OF ACTIVE PLAYER = [$ACTIVE_PLAYER_ID]"
}

stop_player () {
# Get id of active player
id_of_player
# Stop active player
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.Stop", "params": {"playerid":'$ACTIVE_PLAYER_ID'}}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

pause_player () {
type_of_player
[ "$VIDEO_IS_PLAYING" = "yes" ] || exit 0

if [ "$1" = "noreplay" ];
then
# No replay/toggle
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.PlayPause", "params": {"playerid":1, "play":false}, "id": 1}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
else
# replay/toggle
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.PlayPause", "params": {"playerid":1, "play":true}, "id": 1}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
fi
}

start_player_video () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.Open", "params":{"item":{"file":"'"$1"'"}}}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

start_pictures_play () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.Open", "params":{"item":{"path":"'"$1"'"}}}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

start_player_music_offline () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '[{"id": 1,"jsonrpc": "2.0", "method": "Playlist.Clear", "params":{"playlistid":1}},{"id":1,"jsonrpc":"2.0","method":"Playlist.Add","params":{"item":{"directory":"'"$1"'"},"playlistid":1}},{"jsonrpc": "2.0", "method": "Player.Open", "params": { "item": { "playlistid": 1, "position": 0 } }, "id": 1}]' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

start_player_music_online () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '[{"id": 1,"jsonrpc": "2.0", "method": "Playlist.Clear", "params":{"playlistid":1}},{"id":1,"jsonrpc":"2.0","method":"Playlist.Add","params":{"item":{"file":"'"$1"'"},"playlistid":1}},{"jsonrpc": "2.0", "method": "Player.Open", "params": { "item": { "playlistid": 1, "position": 0 } }, "id": 1}]' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

player_next () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.GoTo", "params":{"playerid":1,"to": "next"},"id":1}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

player_previous () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.GoTo", "params":{"playerid":1,"to": "previous"},"id":1}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

player_volume_up () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Application.SetVolume", "params":{"volume":80},"id":1}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

player_volume_down () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Application.SetVolume", "params":{"volume":50},"id":1}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

mute_player () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Application.SetMute", "params": {"mute":"toggle"}, "id": 1}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

input_up () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Input.Up", "id":"up"}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

input_down () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Input.Down", "id":"down"}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

input_select () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Input.Select", "id":"select"}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

input_home () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Input.Home", "id":"home"}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

input_fullscreen_toggle () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Input.ExecuteAction", "params": {"action":"togglefullscreen"}}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

list_tv_channels () {
# Remove previous channel list
[ -e $ALL_TV_CHANNELS_LIST_FILE ] && rm -f $ALL_TV_CHANNELS_LIST_FILE
# Generate entire list of channel names -> numbers
curl -s http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api/channel/grid?limit=100000 | jq ".entries[] | .number, .name " | sed 's:["|,]::g' | paste -s -d"|\n" | sort -g | tee $ALL_TV_CHANNELS_LIST
}

get_tv_channel_id () {
CHANNELID=$(curl -s --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "PVR.GetChannels", "params": {"channelgroupid":'$PVR_GROUP'}, "id": 1}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc" | jq . | grep -A1 -i "$TV_CHANNEL"  | grep channelid | awk {'print $2'}| head -1)
}

play_tv_channel () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "Player.Open", "params":{"item":{"channelid":'$CHANNELID'}}}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

record_tv_channel_current_status () {
TV_RECORDING_CURRENT_STATUS=$(curl -s --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "PVR.GetProperties", "params": { "properties": [ "recording" ] }, "id": 1}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc" | jq ".result[]")
# Remove old state temp file
[ -e $TV_RECORD_STATUS_FILE ] && echo > $TV_RECORD_STATUS_FILE
# Save state to temp file - neeed by other tools
echo "TV_RECORDING_CURRENT_STATUS=$TV_RECORDING_CURRENT_STATUS" > $TV_RECORD_STATUS_FILE
# Change permissions of state temp file
[ "$(id -u)" = "0" ] && chmod 766 $TV_RECORD_STATUS_FILE
# Display state
echo $TV_RECORDING_CURRENT_STATUS
}

record_tv_channel_by_timer_start () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "PVR.Record", "params": {"record":"toggle", "channel":'$CHANNELID'}}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"

# Create timer script to stop recording after duration has elapsed
cat > $PVR_STOP_REC_SCRIPT << EOF
#!/bin/sh
# Stop Recording of $CHANNELID after $TV_DURATION seconds have elapsed

# Get UUID of the just scheduled recording
UUID=$(curl -s http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api/dvr/entry/grid_upcoming | jq .entries[] | grep -iw 'uuid' | awk {'print $2'} | sed 's:["|,]::g')

# Wait until requested duration lapses
sleep $TV_DURATION

# Stop recording
curl -X POST -H "text/x-json" -d uuid="%5B%22\$UUID%22%5D" http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api/dvr/entry/stop

# Self Destruct this script
rm -- \$0
EOF
# Make script executable
chmod 755 $PVR_STOP_REC_SCRIPT
# Run script now
echo "/bin/sh $PVR_STOP_REC_SCRIPT" | /usr/bin/at now
}

get_last_recorded_tv_channel () {
CURRENT_CHANNELID=$(grep -ai "state:recording" $KODI_LOG | tail -1 | cut -d , -f3 | cut -d : -f2)
}

record_tv_channel_timer_stop () {
# Get UUID of current recording
UUID=$(curl -s http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api/dvr/entry/grid_upcoming | jq .entries[] | grep -iw 'uuid' | awk {'print $2'} | sed 's:["|,]::g')
#
# Stop recording
curl -X POST -H "text/x-json" -d uuid="%5B%22$UUID%22%5D" http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api/dvr/entry/stop
}

record_tv_channel_instant_start () {
record_tv_channel_current_status
[ "$TV_RECORDING_CURRENT_STATUS" = "false" ] && curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "PVR.Record", "params": {"record":"toggle"}}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

record_tv_channel_instant_stop () {
record_tv_channel_current_status
[ "$TV_RECORDING_CURRENT_STATUS" = "true" ] && curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" --header "Content-Type: application/json" --data '{"jsonrpc": "2.0", "id":"1", "method": "PVR.Record", "params": {"record":"toggle"}}' "http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc"
}

record_tv_channel_by_schedule_create () {
# Scheduled TV recording variables
TV_CHANNEL=$(echo $1 | tr '[:lower:]' '[:upper:]')
DAY=$2
HOUR_START=$3
MINUTE_START=$4
TIME_OF_DAY=$5
DURATION_AMOUNT=$6
DURATION_UNIT=$7
TV_PROGRAMME_TITLE=$8
TV_PROGRAMME_SUBTITLE=$9
START_TIME_EPOC=$(date -d "${HOUR_START}:${MINUTE_START}${TIME_OF_DAY} ${DAY}" +'%s')
END_TIME_EPOC=$(date -d "${HOUR_START}:${MINUTE_START}${TIME_OF_DAY} ${DAY} + ${DURATION_AMOUNT} ${DURATION_UNIT}" +'%s')
START_TIME_HUMAN=$(date --date="@$START_TIME_EPOC")
END_TIME_HUMAN=$(date --date="@$END_TIME_EPOC")
TV_RECORDING_DETAILS_FILE=/tmp/"tv-recording-details-$TV_CHANNEL-$START_TIME_EPOC"

# Print usage, and quit if mandatory arguments are not specified
if [[ "x$TV_CHANNEL" = "x" || "x$DAY" = "x" || "x$HOUR_START" = "x" || "x$MINUTE_START" = "x" || "x$TIME_OF_DAY" = "x" || "x$DURATION_AMOUNT" = "x" || "x$DURATION_UNIT" = "x" || "x$TV_PROGRAMME_TITLE" = "x" ]];
then
clear
cat <<EOF
Usage: $(basename $0) [TV_CHANNEL] [DAY] [HOUR_START] [MINUTE_START] [TIME_OF_DAY] [DURATION_AMOUNT] [DURATION_UNIT] [TV_PROGRAMME_TITLE [TV_PROGRAMME_SUBTITLE(Optional)]
EOF
exit 1
fi
#
# Schedule TV recording
curl -s --data 'conf={"enabled": true, "start": "'"$START_TIME_EPOC"'", "stop": "'"$END_TIME_EPOC"'", "channelname": "'"$TV_CHANNEL"'", "title": {"eng": "'"$TV_PROGRAMME_TITLE"'"}, "subtitle": {"eng":"'"$TV_PROGRAMME_SUBTITLE"'"}}' "http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api/dvr/entry/create" | jq '. |.uuid' | sed "s:\"::g" > $TV_RECORDING_DETAILS_FILE 2>&1
#
# OSD notice
cat <<EOF
The following TV recording has been scheduled:

Channel:	$TV_CHANNEL
Starts:		$START_TIME_HUMAN
Ends:		$END_TIME_HUMAN

Programme:	$TV_PROGRAMME_TITLE

EOF
}

record_tv_channel_by_schedule_cancel () {
# Scheduled TV recording variables
TV_CHANNEL=$(echo $1 | tr '[:lower:]' '[:upper:]')
DAY=$2
HOUR_START=$3
MINUTE_START=$4
TIME_OF_DAY=$5
START_TIME_EPOC=$(date -d "${HOUR_START}:${MINUTE_START}${TIME_OF_DAY} ${DAY}" +'%s')
START_TIME_HUMAN=$(date --date="@$START_TIME_EPOC")
TV_RECORDING_DETAILS_FILE=/tmp/"tv-recording-details-$TV_CHANNEL-$START_TIME_EPOC"
UUID=$([[ -e "$TV_RECORDING_DETAILS_FILE" ]] && cat "$TV_RECORDING_DETAILS_FILE")
#
# Print usage, and quit if mandatory arguments are not specified
if [[ "x$TV_CHANNEL" = "x" || "x$DAY" = "x" || "x$HOUR_START" = "x" || "x$MINUTE_START" = "x" || "x$TIME_OF_DAY" = "x" ]];
then
clear
cat <<EOF
Usage: $(basename $0) [TV_CHANNEL] [DAY] [HOUR_START] [MINUTE_START] [TIME_OF_DAY]
EOF
exit 1
fi
#
# Quit if no recording UUID file is found
if [[ ! -e "$TV_RECORDING_DETAILS_FILE" ]];
then
echo "Error: No TV recording with specified attributes was found"
exit 1
fi
#
# OSD notice
cat <<EOF
The following TV recording has been cancelled:

Channel:	$TV_CHANNEL
Day:		$DAY
Time:		$HOUR_START:$MINUTE_START $TIME_OF_DAY

UUID:		$UUID
EOF
#
# Cancel TV scheduled recording 
curl -s --data "uuid=$UUID" "http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api/dvr/entry/cancel" > /dev/null 2>&1
#
# Remove recordings detail temp file
sudo rm -f "$TV_RECORDING_DETAILS_FILE"
}

record_tv_channel_by_schedule_stop () {
# Scheduled TV recording variables
TV_CHANNEL=$(echo $1 | tr '[:lower:]' '[:upper:]')
DAY=$2
HOUR_START=$3
MINUTE_START=$4
TIME_OF_DAY=$5
START_TIME_EPOC=$(date -d "${HOUR_START}:${MINUTE_START}${TIME_OF_DAY} ${DAY}" +'%s')
START_TIME_HUMAN=$(date --date="@$START_TIME_EPOC")
TV_RECORDING_DETAILS_FILE=/tmp/"tv-recording-details-$TV_CHANNEL-$START_TIME_EPOC"
UUID=$([[ -e "$TV_RECORDING_DETAILS_FILE" ]] && cat "$TV_RECORDING_DETAILS_FILE")
#
# Print usage, and quit if mandatory arguments are not specified
if [[ "x$TV_CHANNEL" = "x" || "x$DAY" = "x" || "x$HOUR_START" = "x" || "x$MINUTE_START" = "x" || "x$TIME_OF_DAY" = "x" ]];
then
clear
cat <<EOF
Usage: $(basename $0) [TV_CHANNEL] [DAY] [HOUR_START] [MINUTE_START] [TIME_OF_DAY]
EOF
exit 1
fi
#
# Quit if no recording UUID file is found
if [[ ! -e "$TV_RECORDING_DETAILS_FILE" ]];
then
echo "Error: No TV recording with specified attributes was found"
exit 1
fi
#
# OSD notice
cat <<EOF
The following TV recording has been stopped:

Channel:	$TV_CHANNEL
Day:		$DAY
Time:		$HOUR_START:$MINUTE_START $TIME_OF_DAY

UUID:		$UUID
EOF
#
# Cancel TV scheduled recording 
curl -s --data "uuid=$UUID" "http://${TVHEADEND_HTTP_IP}:${TVHEADEND_HTTP_PORT}/api/dvr/entry/stop" > /dev/null 2>&1
#
# Remove recordings detail temp file
sudo rm -f "$TV_RECORDING_DETAILS_FILE"
}

# -----------
# Play Addons
# -----------
play_fmradio_plugin () {
curl -X POST -H "Content-Type: application/json" -u "$KODI_HTTP_USER:$KODI_HTTP_PASS" -d '{"id":1,"jsonrpc":"2.0","method":"Player.Open","params":{"item":{"file":"plugin:\/\/plugin.audio.fmradio\/?path=addons:\/\/sources/audio"}}}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
}

play_youtube_plugin () {
# Source Youtube video ID from JambulaTV's youtube command
. $YOUTUBE_CMD "$@"
# Play video
curl -X POST -H "Content-Type: application/json" -u "$KODI_HTTP_USER:$KODI_HTTP_PASS" -d '{"id":1,"jsonrpc":"2.0","method":"Player.Open","params":{"item":{"file":"plugin:\/\/plugin.video.youtube\/?path=\/root\/search&action=play_video&videoid='$YOUTUBE_VIDEO_ID'"}}}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
}

play_streamztv_plugin () {
curl -X POST -H "Content-Type: application/json" -u "$KODI_HTTP_USER:$KODI_HTTP_PASS" -d '{"jsonrpc":"2.0","method":"Addons.ExecuteAddon","params":{"addonid":"plugin.video.streamztv", "params":{"url":"url", "mode":"2", "name":"'"$2"'", "channelid":"'"$1"'"}},"id":"2"}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
}

kodi_screensaver_poke () {
# Poke screen if screensaver is active
if [ "$KODI_SCREENSAVER_STATUS" = "true" ];
then
# Input.Select
curl -X POST -H "Content-Type: application/json" -u "$KODI_HTTP_USER:$KODI_HTTP_PASS" -d '{"jsonrpc":"2.0","method":"Input.Select","id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
fi
}

kodi_addon_script_doorbell () {
curl -X POST -H "Content-Type: application/json" -u "$KODI_HTTP_USER:$KODI_HTTP_PASS" -d '{"jsonrpc":"2.0","method":"Addons.ExecuteAddon","params":{"addonid":"script.doorbell","params":{"CamID":"'"$ZM_CAMERA_ID"'","CamName":"'"$ZM_CAMERA_NAME"'","CamEvent":"'"$ZM_CAMERA_EVENT_ID"'","CamTime":"'"$ZM_TIME"'","CamMessage":"'"$NOTIFICATION_MESSAGE"'"}},"id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
}

kodi_addon_toggle () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"Addons.SetAddonEnabled","params":{"addonid":"'"$1"'","enabled":"toggle"},"id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
}

check_addon_status () {
ADDON_STATUS=$(curl -s --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"Addons.GetAddonDetails","params":{"addonid":"'"$1"'","properties":["enabled"]},"id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc | egrep -o 'true|false')
# Export variable
cat > $PVR_STATUS_FILE << EOF
ADDON_STATUS=$ADDON_STATUS
EOF
# Echo status
cat <<EOF
Addon [$1] enabled: $ADDON_STATUS
EOF
}

scan_video_library () {
# Check for Internet connectivity
check_internet_access
# Notify and quit if No Internet
if [ "$INTERNET_ALIVE" != "0" ];
then
# Notice - OSD
osd_notification_long "Warning:  Failed to scan video library because there's currently no connection to the Internet.  Please try again ..." "Video Library Scan"
# Notice - shell
echo
echo "
Warning:  Failed to scan video library because there's currently no connection to the
Internet.  Please try again ..."
echo
exit 0
fi
# Scan
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"VideoLibrary.Scan","id":"1","params":{"directory":"'"$1"'"}}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
}

scan_audio_library () {
# Check for Internet connectivity
check_internet_access
# Notify and quit if No Internet
if [ "$INTERNET_ALIVE" != "0" ];
then
# Notice - OSD
osd_notification_long "Warning:  Failed to scan audio library because there's currently no connection to the Internet.  Please try again ..." "Audio Library Scan"
# Notice - shell
echo
echo "
Warning:  Failed to scan audio library because there's currently no connection to the
Internet.  Please try again ..."
echo
exit 0
fi
# Scan
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"AudioLibrary.Scan","id":"1","params":{"directory":"'"$1"'"}}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
}

clean_video_library () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"VideoLibrary.Clean","id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
}

clean_audio_library () {
curl --user "$KODI_HTTP_USER:$KODI_HTTP_PASS" -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"AudioLibrary.Clean","id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
}



#################
#  MAIN SCRIPT  #
#################

usage
 
get_tv_channel_id

case $TV_ACTION in

osd_short)
osd_notification_short "$2" "$3"
;;

osd_long)
osd_notification_long "$2" "$3"
;;

addon_switch)
kodi_addon_toggle "$2"
;;

addon_status)
check_addon_status "$2"
;;

addon_play_fmradio)
input_home
play_fmradio_plugin "${@:2}"
;;

addon_play_youtube)
play_youtube_plugin "${@:2}"
;;

addon_play_streamztv)
play_streamztv_plugin "$2" "$3"
;;

tv_channels)
list_tv_channels
;;

tv_play_start)
play_tv_channel
;;

tv_play_stop)
stop_player
;;

video_play_start)
start_player_video "$2"
;;

active_player_type)
type_of_player
;;

active_player_id)
id_of_player
;;

video_play_pause)
pause_player "$2"
;;

video_play_next)
player_next 
;;

video_play_previous)
player_previous
;;

video_play_stop)
stop_player
;;

pictures_play_start)
start_pictures_play $2
;;

pictures_play_stop)
input_home
;;

music_play_offline_start)
start_player_music_offline "$2"
;;

music_play_online_start)
start_player_music_online "$2"
;;

music_play_pause)
pause_player "$2"
;;

music_play_next)
player_next 
;;

music_play_previous)
player_previous
;;

music_play_stop)
stop_player
;;

audio_play_stop)
stop_player
;;

volume_increase)
player_volume_up
;; 

volume_decrease)
player_volume_down
;; 

mute)
mute_player
;;

navigate_up)
input_up
;;

navigate_down)
input_down
;;

navigate_select)
input_select
;;

navigate_home)
input_home
;;

fullscreen_toggle)
input_fullscreen_toggle
;;

tv_record_status) 
record_tv_channel_current_status
;;

tv_record_timer_start) 
record_tv_channel_by_timer_start
;;

tv_record_timer_stop) 
record_tv_channel_timer_stop
;;

tv_record_instant_start)
record_tv_channel_instant_start
;;

tv_record_instant_stop)
record_tv_channel_instant_stop
;;

tv_record_schedule_create)
record_tv_channel_by_schedule_create "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9"
;;

tv_record_schedule_cancel)
record_tv_channel_by_schedule_cancel "$2" "$3" "$4" "$5" "$6"
;;

tv_record_schedule_stop)
record_tv_channel_by_schedule_stop "$2" "$3" "$4" "$5" "$6"
;;

scan_video)
scan_video_library "$SCAN_VIDEOS_DIR"
;;

scan_audio)
scan_audio_library "$SCAN_AUDIO_DIR"
;;

clean_video)
clean_video_library
;;

clean_audio)
clean_audio_library 
;;

esac
