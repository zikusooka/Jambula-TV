#!/bin/sh
# This is the speech-to-text tool used for JambulaTV services.
# Use it to detect requested phrases for read time, weather, etc
# Jambula Labs @copyright 2017-2018 All rights reserved


# Mic Sources
# -----------
# Run the following command to find your default source
#pactl list sources short && exit
#
# Logitech - C200
PS_MIC_SOURCE="alsa_input.usb-046d_0802_8CB73750-02-U0x46d0x802.analog-mono" 
#
# Logitech - QuickCam Communicate STX
#PS_MIC_SOURCE="alsa_input.usb-046d_08d7-01-U0x46d0x8d7.analog-mono"
#
# Plantronics - black old mic
#PS_MIC_SOURCE="alsa_output.pci-0000_00_1b.0.analog-stereo.monitor"
#PS_MIC_SOURCE="alsa_input.pci-0000_00_1b.0.analog-stereo"
#
#PS_MIC_SOURCE="alsa_output.usb-IPEVO_corp_FR-33.2_0000000000-01-FR332.analog-mono.monitor"

PS_ACOUSTIC_MODEL_DIR=MY_PREFIX/share/pocketsphinx/model/en-us/en-us
PS_DATA_DIR=MY_POCKETSPHINX_DATA_DIR
PS_DICTIONARY_FILE=$PS_DATA_DIR/jambulatv.000.dic
PS_LANGUAGE_MODEL_FILE=$PS_DATA_DIR/jambulatv.000.lm
#PS_LOG_FILE=/var/log/JambulaTV/pocketsphinx.log
PS_LOG_FILE=/dev/null
PS_OUTPUT_FILE=MY_TMPDIR/results
PS_KEYPHRASE_LIST=$PS_DATA_DIR/keyphrase.list
#PS_KEYPHRASE="OKAY JAMB BOO LA"
PS_NOISE_SILENCE_THRESHOLD="4.0"
PS_SAMPRATE="16000/8000/48000"
PS_OLD_TAIL_PID=$(ps auxw | grep -v grep | grep 'tail -n 0 -F' | awk {'print $2'} | head -1)
PS_OLD_CONTINUOUS_PID=$(ps auxw | grep -v grep | grep 'pocketsphinx_continuous' | awk {'print $2'} | head -1)
TEXT_2_SPEECH_TOOL_PATH=/usr/bin/jambulatv-text2speech
TEXT_2_SPEECH_OUTPUT_FILE=$(grep ^TTS_OUTPUT_FILE $TEXT_2_SPEECH_TOOL_PATH | cut -d '=' -f2 | head -1 | awk {'print $1'})

JAMBULATV_SKILLS_FILE=/usr/bin/jambulatv-asr-skills

JAMBULATV_SETUP_DB_NAME=MY_JAMBULATV_SETUP_DB_NAME
JAMBULATV_SETUP_DB_USER=MY_JAMBULATV_SETUP_DB_USER
JAMBULATV_SETUP_DB_PASS=MY_JAMBULATV_SETUP_DB_PASS
JAMBULATV_SETUP_DB_TABLE=MY_JAMBULATV_SETUP_DB_TABLE



###############
#  FUNCTIONS  #
###############

query_mysql_db () {
mysql -s -u ${JAMBULATV_SETUP_DB_USER} -p${JAMBULATV_SETUP_DB_PASS} << EOF
USE ${JAMBULATV_SETUP_DB_NAME};
SELECT $@ FROM ${JAMBULATV_SETUP_DB_TABLE} WHERE id = (SELECT MAX(id) FROM ${JAMBULATV_SETUP_DB_TABLE});
EOF
}

get_contact_details () {
CONTACT_FIRST_NAME=$(query_mysql_db contact_name | awk {'print $1'})
CONTACT_CITY=$(query_mysql_db contact_)
CONTACT_COUNTRY=$(query_mysql_db contact_country)
REGISTERED_CITY=$CONTACT_CITY
REGISTERED_COUNTRY=$CONTACT_COUNTRY
}

setup_default_microphone () {
# Set to desired source i.e. microphone
pactl set-default-source $PS_MIC_SOURCE
}

cleanup_old_processes () {
# kill existing pocketsphinx_continuous processes
[ "x$PS_OLD_CONTINUOUS_PID" = "x" ] || kill $PS_OLD_CONTINUOUS_PID

# kill existing tail -n 0 -F processes
[ "x$PS_OLD_TAIL_PID" = "x" ] || kill $PS_OLD_TAIL_PID

# Remove previous output/results file
if [ -e "$PS_OUTPUT_FILE" ];
then
# Remove previous output/results file
sudo rm -f $PS_OUTPUT_FILE
else
# Create new output/results file
touch $PS_OUTPUT_FILE
fi
}

run_speech2text_engine () {
# Using multiple keyphrases
pocketsphinx_continuous -hmm $PS_ACOUSTIC_MODEL_DIR -adcdev $PS_MIC_SOURCE -inmic yes \
	-lm $PS_LANGUAGE_MODEL_FILE -dict $PS_DICTIONARY_FILE -kws "$PS_KEYPHRASE_LIST" \
	-vad_threshold $PS_NOISE_SILENCE_THRESHOLD -samprate $PS_SAMPRATE \
	-logfn $PS_LOG_FILE | tee $PS_OUTPUT_FILE &
#
# Using one keyphrase
#pocketsphinx_continuous -hmm $PS_ACOUSTIC_MODEL_DIR -adcdev $PS_MIC_SOURCE -inmic yes \
#	-lm $PS_LANGUAGE_MODEL_FILE -dict $PS_DICTIONARY_FILE -keyphrase "$PS_KEYPHRASE" \
#	-kws_threshold 1e-20 -logfn $PS_LOG_FILE | tee $PS_OUTPUT_FILE &
}

detect_triggers_and_activate_text2speech () {
# Import skills file
. $JAMBULATV_SKILLS_FILE

# Detect phrase mentioned
tail -n 0 -F $PS_OUTPUT_FILE | \
while read LINE
do
case $LINE in

# Time
*"WHAT IS THE TIME"*)
skill_time
;;

# Weather
*"WHAT IS THE WEATHER"*)
skill_weather
;;

# Headlines
*"WHAT ARE THE HEADLINES"*)
skill_headlines
;;

# Reminders
*"REMINDERS FOR TODAY"*)
skill_reminders
;;

# Calendar Events - Today
*"WHAT EVENTS ARE SCHEDULED FOR TODAY"*)
skill_calendar_events today today "TODAY"
;;

# Calendar Events - Tomorrow
*"WHAT EVENTS ARE SCHEDULED FOR TOMORROW"*)
skill_calendar_events tomorrow tomorrow "TOMORROW"
;;

# Calendar Events - This week
*"WHAT EVENTS ARE SCHEDULED FOR THIS WEEK"*)
skill_calendar_events today one_week "THIS WEEK"
;;

# MOTD or Today's scripture
*"MESSAGE OF THE DAY"*)
skill_motd
;;

*"READ MY FLASH BRIEFING"*)
skill_flash_briefing
;;

# Lights on
*"TURN ON LIGHTS"*)
skill_lights_on
;;

# Lights off
*"TURN OFF LIGHTS"*)
skill_lights_off
;;

# Start playing tv channel
*"START PLAYING TV"*)
skill_tv_start 
;;

# Play next tv channel
*"PLAY NEXT CHANNEL"*)
skill_tv_play_next
;;

# Play previous tv channel
*"PLAY PREVIOUS CHANNEL"*)
skill_tv_play_previous
;;

# Pause tv channel
*"PAUSE TV CHANNEL"*)
skill_tv_pause_channel
;;

# Pause tv channel
*"UN PAUSE TV CHANNEL"*)
skill_tv_unpause_channel
;;

# Play tv channel - NTV
*"PLAY TV CHANNEL N T V"*)
skill_tv_play_ntv
;;

# Play tv channel - NBS
*"PLAY TV CHANNEL N B S"*)
skill_tv_play_nbs
;;

# Stop playing tv channel
*"STOP PLAYING TV"*)
skill_tv_stop
;;

# Record tv channel now
*"RECORD TV CHANNEL NOW"*)
skill_tv_record_start_now
;;

# Stop recording tv channel now
*"STOP RECORDING TV CHANNEL"*)
skill_tv_record_stop_now
;;

# Start video
*"START PLAYING VIDEO"*)
skill_video_start
;;

# Pause video
*"PAUSE VIDEO"*)
skill_video_pause
;;

# Unpause video
*"UN PAUSE VIDEO"*)
skill_video_unpause
;;

# Play next video
*"PLAY NEXT VIDEO"*)
skill_video_play_next
;;

# Play previous video
*"PLAY PREVIOUS VIDEO"*)
skill_video_play_previous
;;

# Stop playing video
*"STOP PLAYING VIDEO"*)
skill_video_play_stop
;;

# Start music -Any
*"START PLAYING MUSIC"*)
skill_music_start unknown
;;

# Start music - Jazz
*"START PLAYING JAZZ MUSIC"*)
skill_music_start jazz
;;

# Start music - Gospel
*"START PLAYING GOSPEL MUSIC"*)
skill_music_start gospel
;;

# Start music - Local
*"START PLAYING LOCAL MUSIC"*)
skill_music_start local
;;

# Start music - Lingala
*"START PLAYING LEAN GALA MUSIC"*)
skill_music_start lingala
;;

# Start music - On line Music
*"START PLAYING ON LINE MUSIC"*)
skill_internet_music_start jazz_fm_online
;;

# Start music - Stream Jazz on line
*"STREAM JAZZ MUSIC ON LINE"*)
skill_internet_music_start jazz_fm_online
;;

# Start music - East Africa Radio On line
*"START PLAYING EAST AFRICA RADIO ON LINE"*)
skill_internet_music_start east_africa_online
;;

# Pause music
*"PAUSE MUSIC"*)
skill_music_pause
;;

# Unpause music
*"UN PAUSE MUSIC"*)
skill_music_unpause
;;

# Play next song
*"PLAY NEXT SONG"*)
skill_music_play_next
;;

# Play previous song
*"PLAY PREVIOUS SONG"*)
skill_music_play_previous
;;

# Stop playing music
*"STOP PLAYING MUSIC"*)
skill_music_play_stop
;;

# Auto WiFi provision
*"I WANT TO CONNECT TO THE HOTSPOT"*)
skill_connect_2_hotspot
;;

# Turn off
*"TURN OFF JAMB BOO LA TV"*)
skill_power_off
;;

# Take speech recognition offline
*"KEEP QUIET NOW"*)
skill_mute_speech_recognition
;;

# Bring back speech recognition online
*"COME BACK ON LINE"*)
skill_unmute_speech_recognition
;;

# Unrecognized voice command
*)
skill_unknown
continue
;;

esac
done
}



#################
#  MAIN SCRIPT  #
#################
case $1 in

start)
setup_default_microphone
run_speech2text_engine 
detect_triggers_and_activate_text2speech &
;;

stop)
cleanup_old_processes
;;

restart)
$0 stop
$0 start
;;

*)
clear
cat <<EOF
Usage: $(basename $0) [start|stop|restart] 
EOF
exit 1
;;

esac
