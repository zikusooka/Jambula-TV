#!/bin/sh
# This is the speech-to-text tool used for JambulaTV services.
# Use it to detect requested phrases for read time, weather, etc
# Jambula Labs @copyright 2017-2018 All rights reserved
#
# Variables
WATCH_CMD="/usr/bin/tail"
WATCH_INTERVAL="1.0"
WATCH_OPTS="-n 0 -F -s $WATCH_INTERVAL"
#
# Mic Sources
# -----------
# Run the following command to find your default source
#pactl list sources short && exit
#
# Logitech - C200
PS_MIC_SOURCE="alsa_input.usb-046d_0802_8CB73750-02-U0x46d0x802.analog-mono" 
#
# Logitech - QuickCam Communicate STX
#PS_MIC_SOURCE="alsa_input.usb-046d_08d7-01-U0x46d0x8d7.analog-mono"
#
# Plantronics - black old mic
#PS_MIC_SOURCE="alsa_output.pci-0000_00_1b.0.analog-stereo.monitor"
#PS_MIC_SOURCE="alsa_input.pci-0000_00_1b.0.analog-stereo"
#
#PS_MIC_SOURCE="alsa_output.usb-IPEVO_corp_FR-33.2_0000000000-01-FR332.analog-mono.monitor"

PS_ACOUSTIC_MODEL_DIR=MY_PREFIX/share/pocketsphinx/model/en-us/en-us
PS_DATA_DIR=MY_POCKETSPHINX_DATA_DIR
PS_DICTIONARY_FILE=$PS_DATA_DIR/jambulatv.000.dic
PS_LANGUAGE_MODEL_FILE=$PS_DATA_DIR/jambulatv.000.lm
#PS_LOG_FILE=/var/log/JambulaTV/pocketsphinx.log
PS_LOG_FILE=/dev/null
PS_OUTPUT_FILE=MY_TMPDIR/results
PS_KEYPHRASE_LIST=$PS_DATA_DIR/keyphrase.list
#PS_KEYPHRASE="OKAY JAMB BOO LA"
PS_NOISE_SILENCE_THRESHOLD="4.0"
PS_SAMPRATE="16000/8000/48000"
PS_OLD_TAIL_PID=$(ps auxw | grep -v grep | grep "$WATCH_CMD $WATCH_OPTS" | awk {'print $2'} | head -1)
PS_OLD_CONTINUOUS_PID=$(ps auxw | grep -v grep | grep 'pocketsphinx_continuous' | awk {'print $2'} | head -1)
TEXT_2_SPEECH_TOOL_PATH=/usr/bin/jambulatv-text2speech
TEXT_2_SPEECH_OUTPUT_FILE=$(grep ^TTS_OUTPUT_FILE $TEXT_2_SPEECH_TOOL_PATH | cut -d '=' -f2 | head -1 | awk {'print $1'})

JAMBULATV_SKILLS_FILE=/usr/bin/jambulatv-asr-skills

JAMBULATV_SETUP_DB_NAME=MY_JAMBULATV_SETUP_DB_NAME
JAMBULATV_SETUP_DB_USER=MY_JAMBULATV_SETUP_DB_USER
JAMBULATV_SETUP_DB_PASS=MY_JAMBULATV_SETUP_DB_PASS
JAMBULATV_SETUP_DB_TABLE=MY_JAMBULATV_SETUP_DB_TABLE



###############
#  FUNCTIONS  #
###############

query_mysql_db () {
mysql -s -u ${JAMBULATV_SETUP_DB_USER} -p${JAMBULATV_SETUP_DB_PASS} 2> /dev/null << EOF
USE ${JAMBULATV_SETUP_DB_NAME};
SELECT $@ FROM ${JAMBULATV_SETUP_DB_TABLE} WHERE id = (SELECT MAX(id) FROM ${JAMBULATV_SETUP_DB_TABLE});
EOF
}

get_contact_details () {
CONTACT_FIRST_NAME=$(query_mysql_db contact_name | awk {'print $1'})
CONTACT_CITY=$(query_mysql_db contact_)
CONTACT_COUNTRY=$(query_mysql_db contact_country)
REGISTERED_CITY=$CONTACT_CITY
REGISTERED_COUNTRY=$CONTACT_COUNTRY
}

setup_default_microphone () {
# Set to desired source i.e. microphone
pactl set-default-source $PS_MIC_SOURCE
}

cleanup_old_processes () {
# kill existing pocketsphinx_continuous processes
[ "x$PS_OLD_CONTINUOUS_PID" = "x" ] || kill $PS_OLD_CONTINUOUS_PID

# kill existing tail -n 0 -F processes
[ "x$PS_OLD_TAIL_PID" = "x" ] || kill $PS_OLD_TAIL_PID

# Remove previous output/results file
if [ -e "$PS_OUTPUT_FILE" ];
then
# Remove previous output/results file
sudo rm -f $PS_OUTPUT_FILE
else
# Create new output/results file
touch $PS_OUTPUT_FILE
fi
}

run_speech2text_engine () {
# Using multiple keyphrases
pocketsphinx_continuous -hmm $PS_ACOUSTIC_MODEL_DIR -adcdev $PS_MIC_SOURCE -inmic yes \
	-lm $PS_LANGUAGE_MODEL_FILE -dict $PS_DICTIONARY_FILE -kws "$PS_KEYPHRASE_LIST" \
	-vad_threshold $PS_NOISE_SILENCE_THRESHOLD -samprate $PS_SAMPRATE \
	-logfn $PS_LOG_FILE | tee -a $PS_OUTPUT_FILE &
#
# Using one keyphrase
#pocketsphinx_continuous -hmm $PS_ACOUSTIC_MODEL_DIR -adcdev $PS_MIC_SOURCE -inmic yes \
#	-lm $PS_LANGUAGE_MODEL_FILE -dict $PS_DICTIONARY_FILE -keyphrase "$PS_KEYPHRASE" \
#	-kws_threshold 1e-20 -logfn $PS_LOG_FILE | tee -a $PS_OUTPUT_FILE &
}

detect_triggers_and_activate_text2speech () {
# Import skills file
. $JAMBULATV_SKILLS_FILE

# Detect phrase mentioned
$WATCH_CMD $WATCH_OPTS $PS_OUTPUT_FILE | \

# Look for exact matching patterns
while read DETECTED_PATTERN
do

# Time
if [ "$DETECTED_PATTERN" = "WHAT IS THE TIME" ];
then
skill_time

# Weather
elif [ "$DETECTED_PATTERN" = "WHAT IS THE WEATHER" ];
then
skill_weather &

# Weather - Currently
elif [ "$DETECTED_PATTERN" = "WHAT IS THE WEATHER CURRENTLY" ];
then
skill_weather_currently &

# Weather - Today
elif [ "$DETECTED_PATTERN" = "WHAT IS THE WEATHER TODAY" ];
then
skill_weather_today &

# Weather - Later
elif [ "$DETECTED_PATTERN" = "WHAT IS THE WEATHER LATER" ];
then
skill_weather_later &

# Headlines (Start)
elif [ "$DETECTED_PATTERN" = "WHAT ARE THE HEADLINES" ];
then
skill_headlines_start &

# Headlines (Stop)
elif [ "$DETECTED_PATTERN" = "STOP THE HEADLINES" ];
then
skill_headlines_stop

# Reminders
elif [ "$DETECTED_PATTERN" = "REMINDERS FOR TODAY" ];
then
skill_reminders &

# Calendar Events - Today
elif [ "$DETECTED_PATTERN" = "WHAT EVENTS ARE SCHEDULED FOR TODAY" ];
then
skill_calendar_events today today "TODAY" &

# Calendar Events - Tomorrow
elif [ "$DETECTED_PATTERN" = "WHAT EVENTS ARE SCHEDULED FOR TOMORROW" ];
then
skill_calendar_events tomorrow tomorrow "TOMORROW" &

# Calendar Events - This week
elif [ "$DETECTED_PATTERN" = "WHAT EVENTS ARE SCHEDULED FOR THIS WEEK" ];
then
skill_calendar_events today one_week "THIS WEEK" &

# MOTD or Today's scripture
elif [ "$DETECTED_PATTERN" = "MESSAGE OF THE DAY" ];
then
skill_motd &

# Flash Briefing
elif [ "$DETECTED_PATTERN" = "READ MY FLASH BRIEFING" ];
then
skill_flash_briefing &

# Lights on
elif [ "$DETECTED_PATTERN" = "TURN ON LIGHTS" ];
then
skill_lights_on

# Lights off
elif [ "$DETECTED_PATTERN" = "TURN OFF LIGHTS" ];
then
skill_lights_off

# Start playing tv channel
elif [ "$DETECTED_PATTERN" = "START PLAYING TV" ];
then
skill_tv_start 

# Play next tv channel
elif [ "$DETECTED_PATTERN" = "PLAY NEXT CHANNEL" ];
then
skill_tv_play_next

# Play previous tv channel
elif [ "$DETECTED_PATTERN" = "PLAY PREVIOUS CHANNEL" ];
then
skill_tv_play_previous

# Pause tv channel
elif [ "$DETECTED_PATTERN" = "PAUSE TV CHANNEL" ];
then
skill_tv_pause_channel

# Unpause tv channel
elif [ "$DETECTED_PATTERN" = "CONTINUE WITH TV CHANNEL" ];
then
skill_tv_unpause_channel

# Play tv channel - NTV
elif [ "$DETECTED_PATTERN" = "PLAY TV CHANNEL N T V" ];
then
skill_tv_play_ntv

# Play tv channel - NBS
elif [ "$DETECTED_PATTERN" = "PLAY TV CHANNEL N B S" ];
then
skill_tv_play_nbs

# Stop playing tv channel
elif [ "$DETECTED_PATTERN" = "STOP PLAYING TV" ];
then
skill_tv_stop

# Record tv channel now
elif [ "$DETECTED_PATTERN" = "RECORD TV CHANNEL NOW" ];
then
skill_tv_record_start_now

# Stop recording tv channel now
elif [ "$DETECTED_PATTERN" = "STOP RECORDING TV CHANNEL" ];
then
skill_tv_record_stop_now

# Start video
elif [ "$DETECTED_PATTERN" = "START PLAYING VIDEO" ];
then
skill_video_start

# Pause video
elif [ "$DETECTED_PATTERN" = "PAUSE VIDEO" ];
then
skill_video_pause

# Unpause video
elif [ "$DETECTED_PATTERN" = "CONTINUE WITH VIDEO" ];
then
skill_video_unpause

# Play next video
elif [ "$DETECTED_PATTERN" = "PLAY NEXT VIDEO" ];
then
skill_video_play_next

# Play previous video
elif [ "$DETECTED_PATTERN" = "PLAY PREVIOUS VIDEO" ];
then
skill_video_play_previous

# Stop playing video
elif [ "$DETECTED_PATTERN" = "STOP PLAYING VIDEO" ];
then
skill_video_play_stop

# Start Picture-in-Picture
elif [ "$DETECTED_PATTERN" = "START SHOWING WHATS ON LIVE TV" ];
then
skill_picture_in_picture_start

# Next Picture-in-Picture
elif [ "$DETECTED_PATTERN" = "SHOW NEXT CHANNEL ON LIVE TV" ];
then
skill_picture_in_picture_next

# Previous Picture-in-Picture
elif [ "$DETECTED_PATTERN" = "SHOW PREVIOUS CHANNEL ON LIVE TV" ];
then
skill_picture_in_picture_previous

# Pause Picture-in-Picture
elif [ "$DETECTED_PATTERN" = "PAUSE CHANNEL ON LIVE TV" ];
then
skill_picture_in_picture_pause

# Unpause Picture-in-Picture
elif [ "$DETECTED_PATTERN" = "RESUME CHANNEL ON LIVE TV" ];
then
skill_picture_in_picture_unpause

# Stop Picture-in-Picture
elif [ "$DETECTED_PATTERN" = "STOP SHOWING WHATS ON LIVE TV" ];
then
skill_picture_in_picture_stop

# Start Youtube search
elif [[ "$DETECTED_PATTERN" =~ "SHOW YOUTUBE VIDEO" ]];
then
YOUTUBE_SEARCH_PHRASE=$(echo $DETECTED_PATTERN | sed "s:SHOW YOUTUBE VIDEO::g" | sed "s:^ ::g")

skill_youtube_search_start "$YOUTUBE_SEARCH_PHRASE" &

# Stop Youtube video
elif [ "$DETECTED_PATTERN" = "STOP YOUTUBE VIDEO" ];
then
skill_youtube_search_stop

# Start pictures slideshow
elif [ "$DETECTED_PATTERN" = "START SHOWING PICTURES" ];
then
skill_pictures_slideshow_all_start &

# Stop pictures slideshow
elif [ "$DETECTED_PATTERN" = "STOP SHOWING PICTURES" ];
then
skill_pictures_slideshow_stop

# Start music -Any
elif [ "$DETECTED_PATTERN" = "START PLAYING MUSIC" ];
then
skill_music_start unknown

# Start music - Jazz
elif [ "$DETECTED_PATTERN" = "START PLAYING JAZZ MUSIC" ];
then
skill_music_start jazz

# Start music - Gospel
elif [ "$DETECTED_PATTERN" = "START PLAYING GOSPEL MUSIC" ];
then
skill_music_start gospel

# Start music - Local
elif [ "$DETECTED_PATTERN" = "START PLAYING LOCAL MUSIC" ];
then
skill_music_start local

# Start music - Lingala
elif [ "$DETECTED_PATTERN" = "START PLAYING LEAN GALA MUSIC" ];
then
skill_music_start lingala

# Start music - On line Music
elif [ "$DETECTED_PATTERN" = "START PLAYING ON LINE MUSIC" ];
then
skill_internet_music_start jazz_fm_online

# Start music - Stream Jazz on line
elif [ "$DETECTED_PATTERN" = "STREAM JAZZ MUSIC ON LINE" ];
then
skill_internet_music_start jazz_fm_online

# Start music - East Africa Radio On line
elif [ "$DETECTED_PATTERN" = "START PLAYING EAST AFRICA RADIO ON LINE" ];
then
skill_internet_music_start east_africa_online

# Pause music
elif [ "$DETECTED_PATTERN" = "PAUSE SONG" ];
then
skill_music_pause

# Unpause music
elif [ "$DETECTED_PATTERN" = "CONTINUE WITH SONG" ];
then
skill_music_unpause

# Play next song
elif [ "$DETECTED_PATTERN" = "PLAY NEXT SONG" ];
then
skill_music_play_next

# Play previous song
elif [ "$DETECTED_PATTERN" = "PLAY PREVIOUS SONG" ];
then
skill_music_play_previous

# Stop playing music
elif [ "$DETECTED_PATTERN" = "STOP PLAYING MUSIC" ];
then
skill_music_play_stop

# Start FM Radio
elif [[ "$DETECTED_PATTERN" =~ "PLAY FM RADIO" ]];
then
FM_RADIO_STATION=$(echo $DETECTED_PATTERN | sed "s:PLAY FM RADIO::g" | sed "s:^ ::g")

skill_fmradio_start "$FM_RADIO_STATION" &

# Stop FM Radio
elif [ "$DETECTED_PATTERN" = "STOP FM RADIO" ];
then
skill_fmradio_stop

# Volume Mute - Toggle
elif [ "$DETECTED_PATTERN" = "MUTE VOLUME" ];
then
skill_volume_mute_toggle

# Volume Increase
elif [ "$DETECTED_PATTERN" = "INCREASE VOLUME" ];
then
skill_volume_increase

# Volume Decrease
elif [ "$DETECTED_PATTERN" = "DECREASE VOLUME" ];
then
skill_volume_decrease

# Go Home
elif [ "$DETECTED_PATTERN" = "GO HOME" ];
then
skill_go_home 

# Display web-based cameras - Start
elif [[ "$DETECTED_PATTERN" =~ "SHOW CAMERA" ]];
then
CAMERA_NUMBER=$(echo $DETECTED_PATTERN | sed "s:SHOW CAMERA::g" | sed "s:^ ::g")
skill_web_camera_view_play $CAMERA_NUMBER

# Display web-based cameras - Start
elif [ "$DETECTED_PATTERN" = "STOP CAMERA" ];
then
skill_web_camera_view_stop

# Make phone call
elif [[ "$DETECTED_PATTERN" =~ "MAKE A PHONE CALL TO" ]];
then
PHONE_NAME=$(echo $DETECTED_PATTERN | sed "s:MAKE A PHONE CALL TO::g" | sed "s:^ ::g")
phone_call_dial "$PHONE_NAME"

# Hangup phone call
elif [ "$DETECTED_PATTERN" = "HANG UP PHONE CALL" ];
then
phone_call_hangup

# Auto WiFi provision
elif [ "$DETECTED_PATTERN" = "I WANT TO CONNECT TO THE HOTSPOT" ];
then
skill_connect_2_hotspot

# Turn off display
elif [ "$DETECTED_PATTERN" = "TURN OFF SCREEN" ];
then
skill_display_off

# Turn on display
elif [ "$DETECTED_PATTERN" = "TURN ON SCREEN" ];
then
skill_display_on

# Turn off system
elif [ "$DETECTED_PATTERN" = "TURN OFF JAMB BOO LA TV" ];
then
skill_power_off

# Stop currently running skill
elif [ "$DETECTED_PATTERN" = "QUIT DOING THAT" ];
then
skill_stop_running_skill

# Take speech recognition offline
elif [ "$DETECTED_PATTERN" = "KEEP QUIET NOW" ];
then
skill_mute_speech_recognition

# Bring back speech recognition online
elif [ "$DETECTED_PATTERN" = "COME BACK ON LINE" ];
then
skill_unmute_speech_recognition

else

# Unrecognized voice command
skill_unknown
continue

fi

done
}



#################
#  MAIN SCRIPT  #
#################
case $1 in

start)
setup_default_microphone
run_speech2text_engine 
detect_triggers_and_activate_text2speech &
;;

stop)
cleanup_old_processes
;;

restart)
$0 stop
$0 start
;;

*)
clear
cat <<EOF
Usage: $(basename $0) [start|stop|restart] 
EOF
exit 1
;;

esac
