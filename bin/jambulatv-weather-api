#!/bin/sh
# This is an API for JambulaTV weather requests
#
# Jambula Labs @copyright 2022-2023 All rights reserved
#
# Usage: jambulatv-weather-api [LAT] [LONG] [current|today|later] [API] [debug (optiona)]

# Source global settings
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_GLOBAL_SETTINGS_FILE=$PROJECT_SYSTEM_CONF_DIR/global-settings.cfg
. $PROJECT_GLOBAL_SETTINGS_FILE

# Variables
# Database credentials
JAMBULATV_SETUP_DB_NAME=MY_JAMBULATV_SETUP_DB_NAME
JAMBULATV_SETUP_DB_USER=MY_JAMBULATV_SETUP_DB_USER
JAMBULATV_SETUP_DB_PASS=MY_JAMBULATV_SETUP_DB_PASS
JAMBULATV_SETUP_DB_TABLE=MY_JAMBULATV_SETUP_DB_TABLE

# Arguments
ARG1=$1 # Latitude
ARG2=$2 # Longitude
ARG3=$3 # Period
ARG4=$4 # API #ARG4=1
ARG5=$5 # Debug #ARG5=debug

# ----------------
#  Weather API(s)
# ----------------
#
# 1. Weather Underground (No longer active !!!)
# ---------------------------------------------
# Register: https://www.wunderground.com/weather/api
# Docs: https://www.wunderground.com/weather/api/d/docs
#
# 2. OpenWeatherMap
# -----------------
# Register: api.openweathermap.org/data/2.5/weather
#
# 3. DarkSky.net
# --------------
# Register: https://darksky.net 
# Docs: https://darksky.net/dev/docs/forecast

# Weather API Endpoints & Default API Keys
# ----------------------------------------
WUNDERGROUND_APIURL="http://api.wunderground.com/api"
DARKSKY_APIURL="https://api.darksky.net/forecast"
OWM_APIURL="api.openweathermap.org/data/2.5"
# Weather API Keys
DEFAULT_WUNDERGROUND_APIKEY="2b0d6572c90d3e4a"
DEFAULT_DARKSKY_APIKEY="e1b066fec8590435bc79b3dd735b380c"
DEFAULT_OWM_APIKEY="539c3b8cec52a4cf2061ad49b5483a0c"

# Set default Weather API used
# ----------------------------
API_SERVICE=$ARG4
if [[ "x$API_SERVICE" = "x" ]];
then
API=$WEATHER_PROVIDER_API
else
API=$API_SERVICE
fi

CURL_CMD="/usr/bin/curl"
HTTP_USER_AGENT="MY_USER_AGENT"

PING_TIMEOUT=3 #9
PING_IP_ADDRESS=$PING_IP_ADDRESS

TERM=xterm

# Weather raw data files
CURRENT_WEATHER_RAW_DATA_FILE=/tmp/weather_current_api_${API}.json
TODAY_WEATHER_RAW_DATA_FILE=/tmp/weather_today_api_${API}.json
LATER_WEATHER_RAW_DATA_FILE=/tmp/weather_later_api_${API}.json

# Weather Times
HOUR_NOW=$(date +%H)
HOUR_3_HOURS_LATER=$(date -d "$HOUR_NOW today + 3 hour" +'%H')
DATE_3_HOURS_LATER=$(date -d "$HOUR_NOW today + 3 hour" +'%Y%m%d')
EPOCH_3_HOURS_LATER=$(date --date "$DATE_3_HOURS_LATER ${HOUR_3_HOURS_LATER}00" +%s) 
EPOCH_TIME_DESIRED=$EPOCH_3_HOURS_LATER
#
case $HOUR_3_HOURS_LATER in
0[0-4])
TIME_OF_DAY_CALL="Overnight"
;;
0[5-9])
TIME_OF_DAY_CALL="In the Morning"
;;
1[0-1])
TIME_OF_DAY_CALL="In the Morning"
;;
1[2-6])
TIME_OF_DAY_CALL="This Afternoon"
;;
1[7-9])
TIME_OF_DAY_CALL="This Evening"
;;
2[0-3])
TIME_OF_DAY_CALL="Tonight"
;;
esac



###############
#  FUNCTIONS  #
###############

debugging () {
DEBUG_REQUESTED=$ARG5
# Debugging
if [[ "$DEBUG_REQUESTED" = "debug" ]];
then
# What to do with null values in City, Neighbourhood, Country when using CLI argu,ents
[[ "x$CITY" = "x" ]] && CITY_FOUND="Not found" || CITY_FOUND=$CITY
[[ "x$COUNTRY" = "x" ]] && COUNTRY_FOUND="Not found" || COUNTRY_FOUND=$COUNTRY
[[ "x$NEIGHBOURHOOD" = "x" ]] && NEIGHBOURHOOD_FOUND="Not found" || NEIGHBOURHOOD_FOUND=$CITY
# Print summary
clear
cat <<EOT
-------------------------------------------------------------------------------
Weather Forecast:		$WEATHER_PERIOD	($WEATHER_API_NAME)
-------------------------------------------------------------------------------
CITY:				$CITY_FOUND
NEIGHBOURHOOD:			$NEIGHBOURHOOD_FOUND
COUNTRY:			$COUNTRY_FOUND
LATITUDE:			$LATITUDE
LONGITUDE:			$LONGITUDE
-------------------------------------------------------------------------------

$WEATHER_FORECAST_DESCRIPTION
$WEATHER_VARIABLES

EOT
fi
}

query_mysql_db () {
mysql -s -u ${JAMBULATV_SETUP_DB_USER} -p${JAMBULATV_SETUP_DB_PASS} 2> /dev/null << EOF
USE ${JAMBULATV_SETUP_DB_NAME};
SELECT $@ FROM ${JAMBULATV_SETUP_DB_TABLE} WHERE id = (SELECT MAX(id) FROM ${JAMBULATV_SETUP_DB_TABLE});
EOF
}

set_geolocation_coordinates () {
# If applicable, prefer to use geolocation coordinates that are specified on the CLI
if [[ "x$ARG1" != "x" && "x$ARG2" != "x" ]]
then
LATITUDE=$ARG1
LONGITUDE=$ARG2

else
# Source geolocation variables if no coordinates (LAT/LON) are specified on the CLI
. /usr/bin/jambulatv-whereami
fi
}

usage () {
# Quit if No LON/LAT cordinates or at least 2 arguments are not specified on CLI
if [[ "x$LATITUDE" = "x" || "x$LONGITUDE" = "x" ]] && [[ "x$ARG1" = "x" || "x$ARG2" = "x" ]];
then
cat << EOF
Usage: $(basename $0) [LATITUDE] [LONGITUDE] [current|today|later] [API] [debug (optiona)]

EOF
# Exit
exit 1
fi
}

check_internet_access () {
# Check for internet connectivity - IMPORTANT: Don't use DNS to ping use actual IP address
ping -w $PING_TIMEOUT $PING_IP_ADDRESS > /dev/null 2>&1
INTERNET_ALIVE=$?
if [ "$INTERNET_ALIVE" != "0" ];
then
# Log error of no Internet
logger -s -t $(basename $0) "Error: Could not check the weather since there's no Internet connectivity"
# Quit script, since there's no internet.  Leave exit status at 0 so systemd service works
exit 0

else
# Notice - Started
logger -s -t $(basename $0) "Fetching weather forecast using the coordinates $LATITUDE, $LONGITUDE, please wait ..."
fi
}

check_age_of_weather_data_file () {
# Age of current weatherdata
if [ -e $CURRENT_WEATHER_RAW_DATA_FILE ];
then
AGE_OF_CURRENT_WEATHER_DATA=$(date -d "now - $(stat -c "%Y" $CURRENT_WEATHER_RAW_DATA_FILE) seconds" +%s)
else
AGE_OF_CURRENT_WEATHER_DATA=3600
fi
}

test_validity_of_weather_data_file () {
# current
if jq empty $CURRENT_WEATHER_RAW_DATA_FILE > /dev/null 2>&1 && [[ -s $CURRENT_WEATHER_RAW_DATA_FILE ]];
then
CURRENT_WEATHER_RAW_DATA_FILE_VALID=yes
else
CURRENT_WEATHER_RAW_DATA_FILE_VALID=no
fi

# today
if jq empty $TODAY_WEATHER_RAW_DATA_FILE > /dev/null 2>&1 && [[ -s $TODAY_WEATHER_RAW_DATA_FILE ]];
then
TODAY_WEATHER_RAW_DATA_FILE_VALID=yes
else
TODAY_WEATHER_RAW_DATA_FILE_VALID=no
fi

# later
if jq empty $LATER_WEATHER_RAW_DATA_FILE > /dev/null 2>&1 && [[ -s $LATER_WEATHER_RAW_DATA_FILE ]];
then
LATER_WEATHER_RAW_DATA_FILE_VALID=yes
else
LATER_WEATHER_RAW_DATA_FILE_VALID=no
fi

export CURRENT_WEATHER_RAW_DATA_FILE_VALID TODAY_WEATHER_RAW_DATA_FILE_VALID LATER_WEATHER_RAW_DATA_FILE_VALID
}

make_weather_data_file_writeable () {
for DATA_FILE in \
	$CURRENT_WEATHER_RAW_DATA_FILE \
	$LATER_WEATHER_RAW_DATA_FILE \
	$TODAY_WEATHER_RAW_DATA_FILE
do
sudo chmod a+w $DATA_FILE
done
}

set_wind_direction_using_degrees () {
case $WIND_BEARING in
[0-9]|[1-3][0-9])
WIND_DIRECTION="North"
;;
4[0-4])
WIND_DIRECTION="North"
;;
4[5-9])
WIND_DIRECTION="North East"
;;
[6-8][0-9])
WIND_DIRECTION="North East"
;;
9[0-9])
WIND_DIRECTION="East"
;;
1[0-2][0-9])
WIND_DIRECTION="East"
;;
13[0-4])
WIND_DIRECTION="East"
;;
13[5-9])
WIND_DIRECTION="South East"
;;
1[4-7][0-9])
WIND_DIRECTION="South East"
;;
1[8-9][0-9])
WIND_DIRECTION="South"
;;
2[0-1][0-9])
WIND_DIRECTION="South"
;;
22[0-4])
WIND_DIRECTION="South"
;;
22[5-9])
WIND_DIRECTION="South West"
;;
2[3-6][0-9])
WIND_DIRECTION="South West"
;;
2[7-9][0-9])
WIND_DIRECTION="West"
;;
30[0-9])
WIND_DIRECTION="West"
;;
31[0-4])
WIND_DIRECTION="West"
;;
31[5-9])
WIND_DIRECTION="North West"
;;
3[2-5][0-9])
WIND_DIRECTION="North West"
;;
360)
WIND_DIRECTION="North"
;;
esac
}

# Set the full weather description
set_full_description_for_weather_currently () {
# Set weather forecast period
WEATHER_PERIOD=Now
# Set wind bearing
WIND_BEARING=$CURRENT_WIND_BEARING
# Set wind direction
set_wind_direction_using_degrees
# Set text message
WEATHER_FORECAST_DESCRIPTION="Currently ${CURRENT_SUMMARY}.  The temperature is ${CURRENT_TEMPERATURE} degrees celcius.  Humidity is $CURRENT_HUMIDITY percent.  $WIND_DIRECTION winds are blowing at $CURRENT_WIND_SPEED kilometres per hour.  Later today ${LATER_SUMMARY}.  Data provided by $WEATHER_API_NAME"
# Set weather variables for debugging purposes
WEATHER_VARIABLES=$(echo "
-------------------------------------------------------------------------------
CURRENT_SUMMARY:		$CURRENT_SUMMARY
CURRENT_TEMPERATURE:		$CURRENT_TEMPERATURE
CURRENT_HUMIDITY:		$CURRENT_HUMIDITY
CURRENT_WIND_SPEED:		$CURRENT_WIND_SPEED
CURRENT_WIND_BEARING:		$CURRENT_WIND_BEARING

LATER_SUMMARY:			$LATER_SUMMARY
-------------------------------------------------------------------------------
")
}

set_full_description_for_weather_today () {
# Set weather forecast period
WEATHER_PERIOD=Today
# Set wind bearing
WIND_BEARING=$TODAY_WIND_BEARING
# Set wind direction
set_wind_direction_using_degrees
# Set text message
WEATHER_FORECAST_DESCRIPTION="Today expect ${TODAY_SUMMARY}.  Temperatures will reach highs of $TODAY_TEMPERATURE_MAX and lows of $TODAY_TEMPERATURE_MIN degrees celsius. The chance of rain is $TODAY_PRECIP_PROBABILITY percent.  The humidity will be $TODAY_HUMIDITY percent.  $WIND_DIRECTION winds will be blowing at $TODAY_WIND_SPEED kilometres per hour.  Data provided by $WEATHER_API_NAME"
# Set weather variables for debugging purposes
WEATHER_VARIABLES=$(echo "
-------------------------------------------------------------------------------
TODAY_TITLE:			$TODAY_TITLE
TODAY_SUMMARY:			$TODAY_SUMMARY
TODAY_TEMPERATURE_MAX:		$TODAY_TEMPERATURE_MAX
TODAY_TEMPERATURE_MIN:		$TODAY_TEMPERATURE_MIN
TODAY_PRECIP_PROBABILITY:	$TODAY_PRECIP_PROBABILITY
TODAY_HUMIDITY:			$TODAY_HUMIDITY
TODAY_WIND_SPEED:		$TODAY_WIND_SPEED
TODAY_WIND_BEARING:		$TODAY_WIND_BEARING
-------------------------------------------------------------------------------
")
}

set_full_description_for_weather_forecast () {
# Set weather forecast period
WEATHER_PERIOD=$LATER_TITLE
# Set wind bearing
WIND_BEARING=$LATER_WIND_BEARING
# Set wind direction
set_wind_direction_using_degrees
# Set text message
WEATHER_FORECAST_DESCRIPTION="Later today ${LATER_SUMMARY}.  Temperatures will reach highs of $LATER_TEMPERATURE_MAX and lows of $LATER_TEMPERATURE_MIN degrees celsius.  The chance of rain is $LATER_PRECIP_PROBABILITY percent.  Humidity will be $LATER_HUMIDITY percent.  $WIND_DIRECTION winds will be blowing at $LATER_WIND_SPEED kilometres per hour.  Data provided by $WEATHER_API_NAME"
# Set weather variables for debugging purposes
WEATHER_VARIABLES=$(echo "
-------------------------------------------------------------------------------
LATER_TITLE:			$LATER_TITLE
LATER_SUMMARY:			$LATER_SUMMARY
LATER_TEMPERATURE_MAX:		$LATER_TEMPERATURE_MAX
LATER_TEMPERATURE_MIN:		$LATER_TEMPERATURE_MIN
LATER_PRECIP_PROBABILITY:	$LATER_PRECIP_PROBABILITY
LATER_HUMIDITY:			$LATER_HUMIDITY
LATER_WIND_SPEED:		$LATER_WIND_SPEED
LATER_WIND_BEARING:		$LATER_WIND_BEARING
-------------------------------------------------------------------------------
")
}

probabiblity_of_rain_mm_workaround () {
if [[ "$RAINFALL_AMOUNT" -lt "1" ]];
then
WORKAROUND_PRECIP_PROBABILITY=20
elif [[ "$RAINFALL_AMOUNT" -gt "1" && "$RAINFALL_AMOUNT" -le "2" ]];
then
WORKAROUND_PRECIP_PROBABILITY=30
elif [[ "$RAINFALL_AMOUNT" -gt "2" && "$RAINFALL_AMOUNT" -le "2" ]];
then
WORKAROUND_PRECIP_PROBABILITY=40
elif [[ "$RAINFALL_AMOUNT" -gt "2" && "$RAINFALL_AMOUNT" -le "3" ]];
then
WORKAROUND_PRECIP_PROBABILITY=50
elif [[ "$RAINFALL_AMOUNT" -gt "3" && "$RAINFALL_AMOUNT" -le "4" ]];
then
WORKAROUND_PRECIP_PROBABILITY=60

elif [[ "$RAINFALL_AMOUNT" -gt "4" && "$RAINFALL_AMOUNT" -le "5" ]];
then
WORKAROUND_PRECIP_PROBABILITY=70
elif [[ "$RAINFALL_AMOUNT" -gt "5" && "$RAINFALL_AMOUNT" -le "6" ]];
then
WORKAROUND_PRECIP_PROBABILITY=80
elif [[ "$RAINFALL_AMOUNT" -gt "6" && "$RAINFALL_AMOUNT" -lt "7" ]];
then
WORKAROUND_PRECIP_PROBABILITY=90
elif [[ "$RAINFALL_AMOUNT" -gt "7" ]];
then
WORKAROUND_PRECIP_PROBABILITY=100
fi
}



# --------------
#  Weather APIs
# --------------
#
weather_api_endpoints_and_keys () {
# Query DB for weather API keys
DB_WUNDERGROUND_APIKEY=$(query_mysql_db wunderground_api_key)
DB_DARKSKY_APIKEY=$(query_mysql_db darksky_api_key)
DB_OWM_APIKEY=$(query_mysql_db openweathermap_api_key)

# Set weather API keys
[[ "x$DB_WUNDERGROUND_APIKEY" != "x" ]] && WUNDERGROUND_APIKEY=$DB_WUNDERGROUND_APIKEY || \
	WUNDERGROUND_APIKEY=$DEFAULT_WUNDERGROUND_APIKEY
[[ "x$DB_DARKSKY_APIKEY" != "x" ]] && DARKSKY_APIKEY=$DB_DARKSKY_APIKEY || \
	DARKSKY_APIKEY=$DEFAULT_DARKSKY_APIKEY
[[ "x$DB_OWM_APIKEY" != "x" ]] && OWM_APIKEY=$DB_OWM_APIKEY || \
	OWM_APIKEY=$DEFAULT_OWM_APIKEY
}

weather_underground () {
# Curl options: Keep here
CURL_OPTS="-G -s -S -L -m 60 -k"
# Set API Name
WEATHER_API_NAME="Weather Under Ground"
# Set weather API key
weather_api_endpoints_and_keys
# Check age of previous weather data files
check_age_of_weather_data_file

# Fetch weather information only if age is more than 15 minutes ago
if [ "$AGE_OF_CURRENT_WEATHER_DATA" -ge "900" ];
then
# Fetch current weather information
$CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" $WUNDERGROUND_APIURL/$WUNDERGROUND_APIKEY/conditions/q/$LATITUDE,$LONGITUDE.json > $CURRENT_WEATHER_RAW_DATA_FILE
# Fetch hourly weather information - Not included in Free API 
#$CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" $WUNDERGROUND_APIURL/$WUNDERGROUND_APIKEY/hourly/q/$LATITUDE,$LONGITUDE.json > $LATER_WEATHER_RAW_DATA_FILE
# Fetch forecast weather information
$CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" $WUNDERGROUND_APIURL/$WUNDERGROUND_APIKEY/forecast/q/$LATITUDE,$LONGITUDE.json > $LATER_WEATHER_RAW_DATA_FILE
# Fetch today weather information
cp -v $LATER_WEATHER_RAW_DATA_FILE $TODAY_WEATHER_RAW_DATA_FILE
# Make weather data files writeable
make_weather_data_file_writeable
fi

# Test validity of weather data files
test_validity_of_weather_data_file

if [[ "$CURRENT_WEATHER_RAW_DATA_FILE_VALID" = "yes" ]];
then
# Set current weather variables
CURRENT_SUMMARY=$(jq -r ".current_observation.weather" $CURRENT_WEATHER_RAW_DATA_FILE | sed 's:[,|"]::g' | sed 's:\.::g')
CURRENT_TEMPERATURE=$(jq ".current_observation.temp_c" $CURRENT_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
CURRENT_HUMIDITY=$(jq -r ".current_observation.relative_humidity" $CURRENT_WEATHER_RAW_DATA_FILE | sed 's:%::')
CURRENT_WIND_SPEED=$(jq -r ".current_observation.wind_kph" $CURRENT_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
CURRENT_WIND_BEARING=$(jq -r ".current_observation.wind_degrees" $CURRENT_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
else
# Log error: Invalid weather data file
logger -s -t $(basename $0) "Error: The weather raw data file [$CURRENT_WEATHER_RAW_DATA_FILE] is invalid, please try again later"
exit 0
fi

if [[ "$TODAY_WEATHER_RAW_DATA_FILE_VALID" = "yes" ]];
then
# Set today weather variables
TODAY_TITLE=$(jq -r ".forecast.txt_forecast.forecastday[0] | .title" $TODAY_WEATHER_RAW_DATA_FILE)
# Metric not returning values consistently - issue is with wunderground API
#TODAY_SUMMARY=$(jq -r ".forecast.txt_forecast.forecastday[0] | .fcttext_metric" $TODAY_WEATHER_RAW_DATA_FILE | cut -d '.' -f1)
TODAY_SUMMARY=$(jq -r ".forecast.txt_forecast.forecastday[0] | .fcttext" $TODAY_WEATHER_RAW_DATA_FILE | cut -d '.' -f1)
TODAY_TEMPERATURE_MAX=$(jq -r ".forecast.simpleforecast.forecastday[0].high | .celsius" $TODAY_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
TODAY_TEMPERATURE_MIN=$(jq -r ".forecast.simpleforecast.forecastday[0].low | .celsius" $TODAY_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
TODAY_HUMIDITY=$(jq -r ".forecast.simpleforecast.forecastday[0].avehumidity" $TODAY_WEATHER_RAW_DATA_FILE | cut -d '.' -f1)
TODAY_PRECIP_PROBABILITY=$(jq -r ".forecast.simpleforecast.forecastday[0].pop" $TODAY_WEATHER_RAW_DATA_FILE)
TODAY_WIND_SPEED=$(jq -r ".forecast.simpleforecast.forecastday[0].avewind | .kph" $TODAY_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
TODAY_WIND_BEARING=$(jq -r ".forecast.simpleforecast.forecastday[0].avewind | .degrees" $TODAY_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
else
# Log error: Invalid weather data file
logger -s -t $(basename $0) "Error: The weather raw data file [$TODAY_WEATHER_RAW_DATA_FILE] is invalid, please try again later"
exit 0
fi

if [[ "$LATER_WEATHER_RAW_DATA_FILE_VALID" = "yes" ]];
then
# Set later weather variables
LATER_TITLE=$(jq -r ".forecast.txt_forecast.forecastday[1] | .title" $LATER_WEATHER_RAW_DATA_FILE)
# Metric not returning values consistently - issue is with wunderground API
#LATER_SUMMARY=$(jq -r ".forecast.txt_forecast.forecastday[1] | .fcttext_metric" $LATER_WEATHER_RAW_DATA_FILE | cut -d '.' -f1)
LATER_SUMMARY=$(jq -r ".forecast.txt_forecast.forecastday[1] | .fcttext" $LATER_WEATHER_RAW_DATA_FILE | cut -d '.' -f1)
LATER_TEMPERATURE_MAX=$(jq -r ".forecast.simpleforecast.forecastday[1].high | .celsius" $LATER_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
LATER_TEMPERATURE_MIN=$(jq -r ".forecast.simpleforecast.forecastday[1].low | .celsius" $LATER_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
LATER_HUMIDITY=$(jq -r ".forecast.simpleforecast.forecastday[1].avehumidity" $LATER_WEATHER_RAW_DATA_FILE | cut -d '.' -f1)
LATER_PRECIP_PROBABILITY=$(jq -r ".forecast.simpleforecast.forecastday[1].pop" $TODAY_WEATHER_RAW_DATA_FILE)
LATER_WIND_SPEED=$(jq -r ".forecast.simpleforecast.forecastday[1].avewind | .kph" $LATER_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
LATER_WIND_BEARING=$(jq -r ".forecast.simpleforecast.forecastday[1].avewind | .degrees" $LATER_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
else
# Log error: Invalid weather data file
logger -s -t $(basename $0) "Error: The weather raw data file [$LATER_WEATHER_RAW_DATA_FILE] is invalid, please try again later"
exit 0
fi
}

weather_openweathermap () {
# Curl options: Keep here
CURL_OPTS="-G -s -S -L -m 60 -k"
# Set API Name
WEATHER_API_NAME="Open Weather Map"
# Set Latitude/Longitude
LATITUDE=$(echo "$LATITUDE" | xargs printf '%.3f')
LONGITUDE=$(echo "$LONGITUDE" | xargs printf '%.3f')
# Set weather API key
weather_api_endpoints_and_keys
# Check age of previous weather data files
check_age_of_weather_data_file

# Fetch weather information only if age is more than 15 minutes ago
if [ "$AGE_OF_CURRENT_WEATHER_DATA" -ge "900" ];
then
# Fetch current weather information
$CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" -d lat=$LATITUDE -d lon=$LONGITUDE -d units=metric -d appid=$OWM_APIKEY $OWM_APIURL/weather | jq . > $CURRENT_WEATHER_RAW_DATA_FILE
# Fetch forecast weather information
$CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" -d lat=$LATITUDE -d lon=$LONGITUDE -d units=metric -d appid=$OWM_APIKEY $OWM_APIURL/forecast | jq . > $LATER_WEATHER_RAW_DATA_FILE
# Fetch today weather information
cp -v $LATER_WEATHER_RAW_DATA_FILE $TODAY_WEATHER_RAW_DATA_FILE
# Make weather data files writeable
make_weather_data_file_writeable
fi

# Test validity of weather data files
test_validity_of_weather_data_file

if [[ "$CURRENT_WEATHER_RAW_DATA_FILE_VALID" = "yes" ]];
then
# Set current weather variables
CURRENT_SUMMARY=$(jq -r ".weather[0].description" $CURRENT_WEATHER_RAW_DATA_FILE)
CURRENT_TEMPERATURE=$(jq ".main.temp" $CURRENT_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
CURRENT_HUMIDITY=$(jq -r ".main.humidity" $CURRENT_WEATHER_RAW_DATA_FILE | sed 's:%::')
CURRENT_WIND_SPEED=$(jq -r ".wind.speed" $CURRENT_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
CURRENT_WIND_BEARING=$(jq -r ".wind.deg" $CURRENT_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
else
# Log error: Invalid weather data file
logger -s -t $(basename $0) "Error: The weather raw data file [$CURRENT_WEATHER_RAW_DATA_FILE] is invalid, please try again later"
exit 0
fi

if [[ "$TODAY_WEATHER_RAW_DATA_FILE_VALID" = "yes" ]];
then
# Set today weather variables
TODAY_PERIOD=0
TODAY_TITLE=$(jq -r ".list[$TODAY_PERIOD].dt_txt" $TODAY_WEATHER_RAW_DATA_FILE | sed "/null/d")
TODAY_SUMMARY=$(jq -r ".list[$TODAY_PERIOD].weather[0].description" $TODAY_WEATHER_RAW_DATA_FILE | sed "/null/d" | cut -d '.' -f1)
TODAY_TEMPERATURE_MAX=$(jq -r ".list[$TODAY_PERIOD].main.temp_max" $TODAY_WEATHER_RAW_DATA_FILE | sed "/null/d" | xargs printf '%.0f')
TODAY_TEMPERATURE_MIN=$(jq -r ".list[$TODAY_PERIOD].main.temp_min" $TODAY_WEATHER_RAW_DATA_FILE | sed "/null/d" | xargs printf '%.0f')
TODAY_HUMIDITY=$(jq -r ".list[$TODAY_PERIOD].main.humidity" $TODAY_WEATHER_RAW_DATA_FILE | sed "/null/d")
TODAY_PRECIP_PROBABILITY=$(echo "$(jq -r ".list[$TODAY_PERIOD].rain" $TODAY_WEATHER_RAW_DATA_FILE | awk {'print $2'} | sed 's:[,|"]::g') * 100" | bc | xargs printf '%.0f')
TODAY_WIND_SPEED=$(jq -r ".list[$TODAY_PERIOD].wind.speed" $TODAY_WEATHER_RAW_DATA_FILE | sed "/null/d" | xargs printf '%.0f')
TODAY_WIND_BEARING=$(jq -r ".list[$TODAY_PERIOD].wind.deg" $TODAY_WEATHER_RAW_DATA_FILE | sed "/null/d" | xargs printf '%.0f')
else
# Log error: Invalid weather data file
logger -s -t $(basename $0) "Error: The weather raw data file [$TODAY_WEATHER_RAW_DATA_FILE] is invalid, please try again later"
exit 0
fi

if [[ "$LATER_WEATHER_RAW_DATA_FILE_VALID" = "yes" ]];
then 
# Set later weather variables
LATER_PERIOD=1
LATER_TITLE=$(jq -r ".list[$LATER_PERIOD].dt_txt" $LATER_WEATHER_RAW_DATA_FILE | sed "/null/d")
LATER_SUMMARY=$(jq -r ".list[$LATER_PERIOD].weather[0].description" $LATER_WEATHER_RAW_DATA_FILE | sed "/null/d" | cut -d '.' -f1)
LATER_TEMPERATURE_MAX=$(jq -r ".list[$LATER_PERIOD].main.temp_max" $LATER_WEATHER_RAW_DATA_FILE | sed "/null/d" | xargs printf '%.0f')
LATER_TEMPERATURE_MIN=$(jq -r ".list[$LATER_PERIOD].main.temp_min" $LATER_WEATHER_RAW_DATA_FILE | sed "/null/d" | xargs printf '%.0f')
LATER_HUMIDITY=$(jq -r ".list[$LATER_PERIOD].main.humidity" $LATER_WEATHER_RAW_DATA_FILE | sed "/null/d")
LATER_PRECIP_PROBABILITY=$(echo "$(jq -r ".list[$LATER_PERIOD].rain" $LATER_WEATHER_RAW_DATA_FILE | awk {'print $2'} | sed 's:[,|"]::g') * 100" | bc | xargs printf '%.0f')
LATER_WIND_SPEED=$(jq -r ".list[$LATER_PERIOD].wind.speed" $LATER_WEATHER_RAW_DATA_FILE | sed "/null/d" | xargs printf '%.0f')
LATER_WIND_BEARING=$(jq -r ".list[$LATER_PERIOD].wind.deg" $LATER_WEATHER_RAW_DATA_FILE | sed "/null/d" | xargs printf '%.0f')
else
# Log error: Invalid weather data file
logger -s -t $(basename $0) "Error: The weather raw data file [$LATER_WEATHER_RAW_DATA_FILE] is invalid, please try again later"
exit 0
fi
}

weather_darksky_net () {
# Curl options: Keep here 
CURL_OPTS="-G -s -S -L -m 60 -k"
# Set API Name
WEATHER_API_NAME="Dark Sky"
# Set weather API key
weather_api_endpoints_and_keys
# Check age of previous weather data files
check_age_of_weather_data_file

# Fetch weather information only if age is more than 15 minutes ago
if [ "$AGE_OF_CURRENT_WEATHER_DATA" -ge "900" ];
then
# Fetch current weather information
$CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" -d exclude=hourly,minutely,daily,alerts,flags -d units=uk2 $DARKSKY_APIURL/$DARKSKY_APIKEY/$LATITUDE,$LONGITUDE | jq . > $CURRENT_WEATHER_RAW_DATA_FILE
# Fetch hourly weather information
$CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" -d exclude=daily,currently,minutely,alerts,flags -d units=uk2 $DARKSKY_APIURL/$DARKSKY_APIKEY/$LATITUDE,$LONGITUDE | jq . > $LATER_WEATHER_RAW_DATA_FILE
# Fetch daily weather information
$CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" -d exclude=currently,hourly,minutely,alerts,flags -d units=uk2 $DARKSKY_APIURL/$DARKSKY_APIKEY/$LATITUDE,$LONGITUDE | jq . > $TODAY_WEATHER_RAW_DATA_FILE
# Make weather data files writeable
make_weather_data_file_writeable
fi

# Test validity of weather data files
test_validity_of_weather_data_file

if [[ "$CURRENT_WEATHER_RAW_DATA_FILE_VALID" = "yes" ]];
then
# Set current weather variables
CURRENT_SUMMARY=$(jq -r ".currently.summary" $CURRENT_WEATHER_RAW_DATA_FILE | sed 's:[,|"]::g' | sed 's:\.::g')
CURRENT_TEMPERATURE=$(jq ".currently.temperature" $CURRENT_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
CURRENT_HUMIDITY=$(echo "$(jq ".currently.humidity"  $CURRENT_WEATHER_RAW_DATA_FILE) * 100" | bc | xargs printf '%.0f')
CURRENT_WIND_SPEED=$(jq -r ".currently.windSpeed" $CURRENT_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
CURRENT_WIND_BEARING=$(jq -r ".currently.windBearing" $CURRENT_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
else
# Log error: Invalid weather data file
logger -s -t $(basename $0) "Error: The weather raw data file [$CURRENT_WEATHER_RAW_DATA_FILE] is invalid, please try again later"
exit 0
fi

if [[ "$TODAY_WEATHER_RAW_DATA_FILE_VALID" = "yes" ]];
then
# Set today weather variables
TODAY_TITLE=$(date -d "@$(jq -r ".daily.data[0].uvIndexTime" $TODAY_WEATHER_RAW_DATA_FILE)")
TODAY_SUMMARY=$(jq -r ".daily.data[0].summary" $TODAY_WEATHER_RAW_DATA_FILE | cut -d '.' -f1)
TODAY_TEMPERATURE_MAX=$(jq -r ".daily.data[0].temperatureMax" $TODAY_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
TODAY_TEMPERATURE_MIN=$(jq -r ".daily.data[0].temperatureMin" $TODAY_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
TODAY_HUMIDITY=$(echo "$(jq -r ".daily.data[0].humidity" $TODAY_WEATHER_RAW_DATA_FILE) * 100" | bc | xargs printf '%.0f')
TODAY_PRECIP_PROBABILITY=$(echo "$(jq -r ".daily.data[0].precipProbability" $TODAY_WEATHER_RAW_DATA_FILE) * 100" | bc | xargs printf '%.0f')
TODAY_WIND_SPEED=$(jq -r ".daily.data[0].windSpeed" $TODAY_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
TODAY_WIND_BEARING=$(jq -r ".daily.data[0].windBearing" $TODAY_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
else
# Log error: Invalid weather data file
logger -s -t $(basename $0) "Error: The weather raw data file [$TODAY_WEATHER_RAW_DATA_FILE] is invalid, please try again later"
exit 0
fi

if [[ "$LATER_WEATHER_RAW_DATA_FILE_VALID" = "yes" ]];
then
# Set later weather variables
LATER_PERIOD=4
LATER_TITLE=$(date -d "@$(jq -r ".hourly.data[$LATER_PERIOD].time" $LATER_WEATHER_RAW_DATA_FILE)")
LATER_SUMMARY=$(jq -r ".hourly.data[$LATER_PERIOD].summary" $LATER_WEATHER_RAW_DATA_FILE | cut -d '.' -f1)
LATER_TEMPERATURE_MAX=$(jq -r ".hourly.data[$LATER_PERIOD].temperature" $LATER_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
LATER_TEMPERATURE_MIN=$(jq -r ".hourly.data[$LATER_PERIOD].temperature" $LATER_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
LATER_HUMIDITY=$(echo "$(jq -r ".hourly.data[$LATER_PERIOD].humidity" $LATER_WEATHER_RAW_DATA_FILE) * 100" | bc | xargs printf '%.0f')
LATER_PRECIP_PROBABILITY=$(echo "$(jq -r ".hourly.data[$LATER_PERIOD].precipProbability" $LATER_WEATHER_RAW_DATA_FILE) * 100" | bc | xargs printf '%.0f')
LATER_WIND_SPEED=$(jq -r ".hourly.data[$LATER_PERIOD].windSpeed" $LATER_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
LATER_WIND_BEARING=$(jq -r ".hourly.data[$LATER_PERIOD].windBearing" $LATER_WEATHER_RAW_DATA_FILE | xargs printf '%.0f')
else
# Log error: Invalid weather data file
logger -s -t $(basename $0) "Error: The weather raw data file [$LATER_WEATHER_RAW_DATA_FILE] is invalid, please try again later"
exit 0
fi
}



#################
#  MAIN SCRIPT  #
#################

set_geolocation_coordinates

usage

check_internet_access

case $API in
1)
weather_underground
;;
2)
weather_openweathermap
;;
3)
weather_darksky_net
;;
esac


# ---------------------------------------------------------------------------- 
# Set detailed weather forecast description for use in Text-To-Speech services
# ----------------------------------------------------------------------------
FORECAST_PERIOD=$ARG3
case $FORECAST_PERIOD in
current)
set_full_description_for_weather_currently
;;
today)
set_full_description_for_weather_today
;;
later)
set_full_description_for_weather_forecast
;;
*)
set_full_description_for_weather_currently
;;
esac


# -----------------------------
# Enable debugging if requested
# -----------------------------
debugging
