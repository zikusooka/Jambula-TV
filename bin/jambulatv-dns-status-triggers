#!/bin/sh

# Variables
NETWORK_ETHERNET_DEVICE=$(ip link | grep '2: ' | cut -d : -f2 | head -1 | sed -e 's/ //g')
NETWORK_IP_ADDRESS=$(ip -4 addr show dev $NETWORK_ETHERNET_DEVICE | grep brd | awk {'print $2'} | cut -d / -f1)
COOVA_SERVER_IP=`grep 'HS_UAMLISTEN=' /etc/chilli/config | cut -d = -f2 | awk {'print $1'}`
COOVA_CONFIG_DIR=/etc/chilli
COOVA_CONFIG_FILE=$COOVA_CONFIG_DIR/config
COOVA_MAIN_CONFIG_FILE=$COOVA_CONFIG_DIR/main.conf
CHRONYC_CMD=/usr/bin/chronyc
CHRONY_KEYS_FILE=/etc/chrony.keys
CHRONYC_PASSWD=`awk {'print $2'} $CHRONY_KEYS_FILE`
GEOLOCATION_FILE=/etc/JambulaTV/geolocation.txt
GEOLOCATION_REFRESH_FILE=/tmp/geolocation_refresh
HTTP_USER_AGENT="Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)"
MULTIMEDIA_USER=jambula

BEEP_SOUNDS_SCRIPT=/usr/bin/jambulatv-sounds
SPEED_TEST_SCRIPT=/usr/bin/jambulatv-speed-test

INTERNET_OFF_FILE=/etc/dnsmasq.d/dns_off.conf
DEBUG_FILE=/tmp/internet_status.log
DNS_STATUS=$1
LAST_DNS_STATUS=$2

RESOLVCONF_CONFIG=/etc/resolvconf.conf
PUBLIC_DNS_SERVERS="8.8.8.8 208.67.222.222 8.26.56.26 107.170.95.180 77.88.8.8"

MONITORING_PLUGINS_DIR=/usr/lib64/nagios/plugins

OSD_SCRIPT="sudo /usr/bin/jambulatv-osd -m"
UPDATE_AVAIL_MSG="Software Updates: A new version of JambulaTV software is available. Please update as soon as possible"



###############
#  FUNCTIONS  #
###############
get_system_dns_settings () {
# Number of DNS settings
NUMBER_OF_DNS=$(sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | wc -l)
#
# DNS 1
SECONDARY_DNS_SERVER=$(sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 1')
# Set DNS2 if more than 1
if [ "$NUMBER_OF_DNS" -gt "1" ];
then
# DNS 2
TETIARY_DNS_SERVER=$(sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 2')
else
TETIARY_DNS_SERVER=$SECONDARY_DNS_SERVER
fi
}

update_dns_servers () {
# Get current nameservers
get_system_dns_settings
# Add new ISP nameservers to resolvconf
sed -i /name_servers_append/d $RESOLVCONF_CONFIG
sed -i "/name_servers=127.0.0.1/a name_servers_append=\"$SECONDARY_DNS_SERVER $TETIARY_DNS_SERVER $PUBLIC_DNS_SERVERS\"" $RESOLVCONF_CONFIG
# Update resolvconf
/usr/sbin/resolvconf -u
}

get_public_ip () {
# Get public IP address
PUBLIC_IP_ADDRESS=$(curl --get -sS -m 60  -A "$HTTP_USER_AGENT" https://api.ipify.org)
export PUBLIC_IP_ADDRESS
}

get_city_using_ip () {
# Get city using public IP address
CITY_BY_IP=$(curl --get -sS -m 60 -A "$HTTP_USER_AGENT" http://freegeoip.net/json/$PUBLIC_IP_ADDRESS | jq '.city' | sed 's:[,|"]::g')
export CITY_BY_IP
}

get_latitude_longitude () {
LATITUDE=$(curl --get -sS -m 60 -A "$HTTP_USER_AGENT" "http://nominatim.openstreetmap.org/search?city=$CITY_BY_IP&country=$COUNTRY&format=json" | jq '.[0] | .lat' | tr -d '"')
LONGITUDE=$(curl --get -sS -m 60 -A "$HTTP_USER_AGENT" "http://nominatim.openstreetmap.org/search?city=$CITY_BY_IP&country=$COUNTRY&format=json" | jq '.[0] | .lon' | tr -d '"')
}

set_current_geolocation () {
# See if geolocation file exists and is recent
if [ -e "$GEOLOCATION_FILE" ];
then
# Get age of geolocation data file
AGE_OF_GEOLOCATION_DATA=$(date -d "now - $(stat -c "%Y" $GEOLOCATION_FILE) seconds" +%s)
# Source geolocation variables
. $GEOLOCATION_FILE
#
# Remove old refresh yes or no file
sudo rm -f $GEOLOCATION_REFRESH_FILE
# If age of geolocation data file is less than a day then check if an empty variable exists
[[ "$AGE_OF_GEOLOCATION_DATA" -lt "86400" ]] && \
	cat $GEOLOCATION_FILE | cut -d '=' -f2 | while read GEO_VARIABLE
		do
		# Quit if there is missing variable
			if [ "x$GEO_VARIABLE" = "x" ];
			then
			clear
				echo "FORCE_REFRESH=y" > $GEOLOCATION_REFRESH_FILE
				break
			else
				echo "FORCE_REFRESH=n" > $GEOLOCATION_REFRESH_FILE
			fi
		done
# Source refresh yes or no file
[ -e $GEOLOCATION_REFRESH_FILE ] && . $GEOLOCATION_REFRESH_FILE
fi

# Force refresh of geolocation data
if [ "$FORCE_REFRESH" = "y" ] || [ "x$FORCE_REFRESH" = "x" ];
then
# Lookup public IP address and city
get_public_ip
get_city_using_ip
get_latitude_longitude
#
# Create geolocation file
cat > $GEOLOCATION_FILE <<EOF
PUBLIC_IP_ADDRESS=$PUBLIC_IP_ADDRESS
CITY=$CITY_BY_IP
LATITUDE=$LATITUDE
LONGITUDE=$LONGITUDE
EOF
#
# Change ownership
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $GEOLOCATION_FILE
fi
}

check_4_updates () {
$MONITORING_PLUGINS_DIR/check_updates > /dev/null 2>&1
UPDATES_STATUS=$?
# Notify if updates are available
[ "$UPDATES_STATUS" = "2" ] && $OSD_SCRIPT "$UPDATE_AVAIL_MSG"
}

reverse_ssh_tunnel () {
sudo /usr/bin/jambulatv-reverse-ssh-tunnel
}



##########################
#  Internet status:  UP  #
##########################

if [ "$DNS_STATUS" = "UP" ] && [ "$LAST_DNS_STATUS" = "DOWN" ];
then
# Debug
echo "$(date): New State = Up | Old State = Down" >> $DEBUG_FILE  

# Update to current DNS i.e. resolvconf
update_dns_servers

# Remove dnsmasq entries for local resolution
[ ! -e $INTERNET_OFF_FILE ] || rm -f $INTERNET_OFF_FILE
# Restart dnsmasq.service
systemctl restart dnsmasq.service

# Configure CoovaChilli DomainDNSlocal
# ------------------------------------
# Get previous domains dns local value
PREVIOUS_HS_DOMAINDNSLOCAL=`grep 'HS_DOMAINDNSLOCAL=' $COOVA_CONFIG_FILE | awk {'print $1'}`
# Set chilli domain DNS locals to 'off' since internet on
sed -i "s:$PREVIOUS_HS_DOMAINDNSLOCAL:HS_DOMAINDNSLOCAL=off:g" $COOVA_CONFIG_FILE 


# Since Internet is now UP -  Do other stuff that requires connectivity
#######################################################################

#  Take chrony on-line: Update clock time
# ---------------------------------------
$CHRONYC_CMD <<EOF
password $CHRONYC_PASSWD
online
EOF

# Lookup current public IP Address and City Name
# ----------------------------------------------
set_current_geolocation

# Sound alert beep
# ----------------
[ -x $BEEP_SOUNDS_SCRIPT ] && $BEEP_SOUNDS_SCRIPT online

# Test Internet speed
# -------------------
[ -x $SPEED_TEST_SCRIPT ] && $SPEED_TEST_SCRIPT

# JambulaTV: Check for available updates
# --------------------------------------
sleep 60
check_4_updates

# JambulaTV: Create a reverse SSH tunnel for remote connection when Internet is UP
# --------------------------------------------------------------------------------
reverse_ssh_tunnel



############################
#  Internet status:  DOWN  #
############################

elif [ "$DNS_STATUS" = "DOWN" ] && [ "$LAST_DNS_STATUS" = "UP" ];
then
# Debug
echo "$(date): New State = Down | Old State = Up" >> $DEBUG_FILE
#
# Add entries to dnsmasq for local resolution
# --------------------------------------------
echo "address=/#/$COOVA_SERVER_IP
address=/#/$NETWORK_IP_ADDRESS" > $INTERNET_OFF_FILE
# Restart dnsmasq.service
systemctl restart dnsmasq.service

# Configure CoovaChilli DomainDNSlocal
# ------------------------------------
# Get previous domains dns local value
PREVIOUS_HS_DOMAINDNSLOCAL=`grep 'HS_DOMAINDNSLOCAL=' $COOVA_CONFIG_FILE | awk {'print $1'}`
# Set chilli domain DNS locals to 'on' since internet off
sed -i "s:$PREVIOUS_HS_DOMAINDNSLOCAL:HS_DOMAINDNSLOCAL=on:g" $COOVA_CONFIG_FILE 

#  Since Internet is now down - Stop stuff that requires connectivity 
######################################################################

# Take chrony off-line
# --------------------
$CHRONYC_CMD <<EOF
password $CHRONYC_PASSWD
offline
EOF

# Sound alert beep
# ----------------
[ -x $BEEP_SOUNDS_SCRIPT ] && $BEEP_SOUNDS_SCRIPT offline


else
# Debug
echo "$(date): Unknown - New State = [$DNS_STATUS] | Old State = [$LAST_DNS_STATUS]" >> $DEBUG_FILE

# Add entries to dnsmasq for local resolution
# --------------------------------------------
echo "address=/#/$COOVA_SERVER_IP
address=/#/$NETWORK_IP_ADDRESS" > $INTERNET_OFF_FILE
# Restart dnsmasq.service
systemctl restart dnsmasq.service

# Quit
exit

fi


# Run processes whenever there's a change in status i.e. UP or DOWN
###################################################################
# 1) Restart coova-chilli in order to change default gateway device and DNS settings
/usr/bin/jambulatv-chilli restart
#
# 2) Restart wireless access point: hostapd
#systemctl restart hostapd
#
# Reload WiFi driver for buggy chipsets
#/usr/bin/lsusb | grep -i RTL8188CUS > /dev/null 2>&1 && /usr/sbin/rmmod rtl8192cu && /usr/sbin/modprobe rtl8192cu debug=5 && /usr/bin/systemctl restart hostapd.service
