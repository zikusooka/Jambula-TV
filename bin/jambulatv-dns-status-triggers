#!/bin/sh
# This tool is used to perform several actions when ever the status of
# the Internet connection becomes either 'UP' or 'DOWN'. It is not meant
# as a standalone CLI script but is used internally by JambulaTV services
#
# Jambula Labs @copyright 2020-2021 All rights reserved
#
# Source global settings
PROJECT_NAME=MY_PROJECT_NAME
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_GLOBAL_SETTINGS_FILE=$PROJECT_SYSTEM_CONF_DIR/global-settings.cfg
. $PROJECT_GLOBAL_SETTINGS_FILE

# Variables
TMPDIR=/tmp
# Get ethernet device
NETWORK_ETHERNET_DEVICE=$(/usr/sbin/ip -o -4 link show | awk -F': ' '/mode DEFAULT/ {print $2}' | grep -v lo | head -1)
# Get ethernet IP Address
NETWORK_IP_ADDRESS=$(/usr/sbin/ip -o -4 addr show ${NETWORK_ETHERNET_DEVICE} | awk -F '[ /]+' '/global/ {print $4}')
NETWORK_WIRELESS_HOTSPOT_IP=172.16.0.1
CHRONYC_CMD=/usr/bin/chronyc
CHRONY_KEYS_FILE=/etc/chrony.keys
CHRONYC_PASSWD=`awk {'print $2'} $CHRONY_KEYS_FILE`
HTTP_USER_AGENT="MY_USER_AGENT"
MULTIMEDIA_USER=MY_MULTIMEDIA_USER

SOUNDS_TOOL=MY_SOUNDS_TOOL
INTERNET_SPEED_TOOL=MY_INTERNET_SPEED_TOOL
GEOLOCATION_TOOL=MY_GEOLOCATION_TOOL
REVERSE_SSH_TOOL=MY_REVERSE_SSH_TOOL
UMEME_OUTAGES_TOOL=/usr/bin/jambulatv-umeme-outages

YOUTUBE_DL_CMD="/usr/bin/youtube-dl"

INTERNET_OFF_FILE=/etc/dnsmasq.d/dns_off.conf
DEBUG_FILE=$TMPDIR/internet_status.log
DNS_STATUS=$1
LAST_DNS_STATUS=$2

RESOLVCONF_CONFIG=/etc/resolvconf.conf
PUBLIC_DNS_SERVERS="$PUBLIC_DNS_SERVERS"
DNS_BLOCKING_CACHE_DIR=MY_PROJECT_SYSTEM_SHARE_DIR/dns_blocklists
DNS_BLOCKING_SOURCES_FILE=MY_PROJECT_SYSTEM_CONF_DIR/dns-blocklists-sources.txt

MONITORING_PLUGINS_DIR=/usr/lib64/nagios/plugins

OSD_TOOL_CMD="sudo /usr/bin/jambulatv-osd -m"
UPDATE_AVAIL_MSG="Software Updates: A new version of JambulaTV software is available. Please update as soon as possible"

SSHUTTLE_PID_FILE=MY_RUNDIR/sshuttle.pid
SSHUTTLE_PID=$(ps auxw | grep -Ev grep | grep 'sshuttle -D' | grep python | awk {'print $2'} | tail -1)

GEOIP_COUNTRY_DB_FILE=MY_PROJECT_SYSTEM_SHARE_DIR/GeoIP/GeoLite2-Country.mmdb
MAXIMUM_AGE_OF_GEOIP_COUNTRY_DATA=604800 # 1 week



###############
#  FUNCTIONS  #
###############

restart_dnsmasq_alert_if_failed () {
systemctl restart dnsmasq.service > /dev/null 2>&1
systemctl -q is-active dnsmasq.service && DNSMASQ_EXIT_STATUS=$?
if [[ "$DNSMASQ_EXIT_STATUS" != "0" ]];
then
# Log error to journal
logger -s -t $(basename $0) "Error: dnsmasq.service failed to start. Please check syntax of the configuration file: /etc/dnsmasq.conf"
# Voice alert: Play sound effects i.e. failing
jambulatv-sounds alert on_life_support
# Voice alert: Announce
jambulatv-sounds alert critical_system_service_failed
fi
}

get_system_dns_settings () {
# Number of DNS settings
NUMBER_OF_DNS=$(sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | wc -l)
#
# DNS 1
SECONDARY_DNS_SERVER=$(sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 1')
# Set DNS2 if more than 1
if [ "$NUMBER_OF_DNS" -gt "1" ];
then
# DNS 2
TETIARY_DNS_SERVER=$(sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 2')
else
TETIARY_DNS_SERVER=$SECONDARY_DNS_SERVER
fi
}

update_dns_servers () {
# Get current nameservers
get_system_dns_settings
# Add new ISP nameservers to resolvconf
sed -i /name_servers_append/d $RESOLVCONF_CONFIG
sed -i "/name_servers=127.0.0.1/a name_servers_append=\"$SECONDARY_DNS_SERVER $TETIARY_DNS_SERVER $PUBLIC_DNS_SERVERS\"" $RESOLVCONF_CONFIG
# Update resolvconf
/usr/sbin/resolvconf -u
}

update_clock_time () {
$CHRONYC_CMD <<EOF
password $CHRONYC_PASSWD
$1
EOF
}

send_telegram_messages_spooled () {
# If telegram spool directory exists, process queue as follows
if [[ -d $TELEGRAM_SPOOL_DIR ]];
then
for MESSAGE in $(ls -x $TELEGRAM_SPOOL_DIR);
do
# If file is > 1 day, assume that message is now stale and delete it
AGE_OF_MESSAGE=$(date -d "now - $(stat -c "%Y" $TELEGRAM_SPOOL_DIR/$MESSAGE) seconds" +%s)
	if [[ "$AGE_OF_MESSAGE" -gt "86400" ]];
  	then
  	rm -f $TELEGRAM_SPOOL_DIR/$MESSAGE

	else
	# Send message
	sh $TELEGRAM_SPOOL_DIR/$MESSAGE
	# Remove spool file
	rm -f $TELEGRAM_SPOOL_DIR/$MESSAGE
	fi
done
fi
}

send_whatsapp_messages_spooled () {
# If whatsapp spool directory exists, process queue as follows
if [[ -d $WHATSAPP_SPOOL_DIR ]];
then
for MESSAGE in $(ls -x $WHATSAPP_SPOOL_DIR);
do
# If file is > 1 day, assume that message is now stale and delete it
AGE_OF_MESSAGE=$(date -d "now - $(stat -c "%Y" $WHATSAPP_SPOOL_DIR/$MESSAGE) seconds" +%s)
	if [[ "$AGE_OF_MESSAGE" -gt "86400" ]];
  	then
  	rm -f $WHATSAPP_SPOOL_DIR/$MESSAGE

	else
	# Send message
	sh $WHATSAPP_SPOOL_DIR/$MESSAGE
	# Remove spool file
	rm -f $WHATSAPP_SPOOL_DIR/$MESSAGE
	fi
done
fi
}

update_youtube_dl () {
$YOUTUBE_DL_CMD -U | grep -i 'Updated youtube-dl' > /dev/null 2>&1
YOUTUBE_DL_UPDATED=$?
if [[ "$YOUTUBE_DL_UPDATED" = "0" ]];
then
YOUTUBE_DL_NEW_VERSION=$($YOUTUBE_DL_CMD --version)
# Notify
logger -s -t $(basename $0) "Youtube-dl has been updated to version: $YOUTUBE_DL_NEW_VERSION"
$OSD_TOOL_CMD "Youtube-dl has been updated to version: $YOUTUBE_DL_NEW_VERSION"
fi
}

check_4_updates () {
$MONITORING_PLUGINS_DIR/check_updates > /dev/null 2>&1
UPDATES_STATUS=$?
# Notify if updates are available
[[ "$UPDATES_STATUS" = "2" ]] && $OSD_TOOL_CMD "$UPDATE_AVAIL_MSG"
}

reverse_ssh_tunnel () {
sudo $REVERSE_SSH_TOOL
}

refresh_dns_blocklists () {
# Remove old DNS blocklists if found in temp directory
for DNSLIST in domains.txt hostnames.txt
do
[[ -e $TMPDIR/$DNSLIST ]] && rm $TMPDIR/$DNSLIST
done
#
# Download fresh DNS blocklists into a temporary directory
/usr/bin/wget -c -i $DNS_BLOCKING_SOURCES_FILE -P $TMPDIR
#
# Sync DNS block lists i.e. hostnames and domains txt files
for DNSLIST in domains.txt hostnames.txt
do
/usr/bin/rsync -av $TMPDIR/$DNSLIST $DNS_BLOCKING_CACHE_DIR/
done
#
# Clean up domains.txt file
# ---
# Fix general typos
grep -v -e ^address -e \# $DNS_BLOCKING_CACHE_DIR/domains.txt | while read LINE
do
sed -i "s|$LINE|\#$LINE|g" $DNS_BLOCKING_CACHE_DIR/domains.txt 
sleep 1
done
#
# Fix incomplete domains, and IP address i.e. wrong format
cat $DNS_BLOCKING_CACHE_DIR/domains.txt | grep -v -e '0.0.0.0$' -e '::$' -e '^#' | while read BAD_FORMAT
do
sed -i "s|$BAD_FORMAT|#$BAD_FORMAT|" $DNS_BLOCKING_CACHE_DIR/domains.txt 
done
#
# Give multimedia user permission to access DNS cache directory
chown -R $MULTIMEDIA_USER:$MULTIMEDIA_USER $DNS_BLOCKING_CACHE_DIR
#
# Restart dnsmasq.service
restart_dnsmasq_alert_if_failed
}

update_geoip_databases () {
# If Geo Location file is still fresh, set variable to yes
[[ -e "$GEOIP_COUNTRY_DB_FILE" && "$(date -d "now - $(stat -c "%Y" $GEOIP_COUNTRY_DB_FILE) seconds" +%s)" -gt "$MAXIMUM_AGE_OF_GEOIP_COUNTRY_DATA" ]] && GEOIP_COUNTRY_DB_FILE_IS_FRESH=yes
#
if [[ "$GEOIP_COUNTRY_DB_FILE_IS_FRESH" = "yes" ]] || [[ ! -e "$GEOIP_COUNTRY_DB_FILE" ]];
then
# Update GeoIP databases if older than one week
logger -s -t $(basename $0) "Updating GeoIP databases ..."
MY_BINARY_PREFIX/geoipupdate -f $PROJECT_SYSTEM_CONF_DIR/GeoIP.conf
fi
}



##########################
#  Internet status:  UP  #
##########################

if [[ "$DNS_STATUS" = "UP" && "$LAST_DNS_STATUS" = "DOWN" ]];
then
# Debug
echo "$(date): New State = Up | Old State = Down" >> $DEBUG_FILE  

# Update to current DNS i.e. resolvconf
update_dns_servers

# Remove dnsmasq entries for local resolution
[[ ! -e $INTERNET_OFF_FILE ]] || rm -f $INTERNET_OFF_FILE

# Since Internet is now UP -  Do other stuff that requires connectivity
# ---

# Sound alert beep
[[ -x $SOUNDS_TOOL ]] && $SOUNDS_TOOL beep online

# Take chrony on-line: Update clock time
update_clock_time online


# If Internet data saver mode is not enabled, do the following
# ---
if [[ "$INTERNET_DATA_SAVER_MODE" != "on" || "$INTERNET_DATA_SAVER_MODE" != "ON" ]];
then

# Refresh DNS blocking lists
refresh_dns_blocklists 

# Update MaxMind GeoIP databases if older than one week
update_geoip_databases

# Update Youtube-DL: Critical in Youtube-based Live TV streams
update_youtube_dl > /dev/null 2>&1

# Lookup current public IP Address, City and Country Name 
. $GEOLOCATION_TOOL > /dev/null 2>&1

# Download power outages lists i.e. UMEME if in Uganda
[[ "$COUNTRY" = "Uganda" ]] && $UMEME_OUTAGES_TOOL fetch

# Test Internet speed
[[ -x $INTERNET_SPEED_TOOL ]] && $INTERNET_SPEED_TOOL

# Check for available updates
sleep 60
check_4_updates

# Create a reverse SSH tunnel for remote connection when Internet is UP
reverse_ssh_tunnel

fi


# Clear instant messaging queues i.e. messages waiting in spool dir
# ---
# WhatsApp
send_whatsapp_messages_spooled
# Telegram
send_telegram_messages_spooled



############################
#  Internet status:  DOWN  #
############################

elif [[ "$DNS_STATUS" = "DOWN" && "$LAST_DNS_STATUS" = "UP" ]];
then
# Debug
echo "$(date): New State = Down | Old State = Up" >> $DEBUG_FILE
#
# Add entries to dnsmasq for local resolution
# --------------------------------------------
# Set hostname depending on connection type i.e. Wired or Wireless
cat > $INTERNET_OFF_FILE <<EOT
localise-queries
EOT
# Specify Wireless IP address
#cat >> $INTERNET_OFF_FILE <<EOT
#address=/#/$NETWORK_WIRELESS_HOTSPOT_IP
#EOT
# Specify Wired IP address
#[[ "x$NETWORK_IP_ADDRESS" = "x" ]] || \
#	echo "address=/#/$NETWORK_IP_ADDRESS" >> $INTERNET_OFF_FILE
#
# Restart dnsmasq.service
restart_dnsmasq_alert_if_failed


#  Since Internet is now down - Stop stuff that requires connectivity 
######################################################################

# Take chrony off-line
# --------------------
update_clock_time offline

# Sound alert beep
# ----------------
[[ -x $SOUNDS_TOOL ]] && $SOUNDS_TOOL beep offline

# Stop any existing VPN tunnel processes
# --------------------------------------
# Kill using PID in PID run file
[[ -e $SSHUTTLE_PID_FILE ]] && kill -15 $(cat $SSHUTTLE_PID_FILE)
# Kill using PID obtained y grep
[[ "x$SSHUTTLE_PID" != "x" ]] && kill -15 $SSHUTTLE_PID

# Remove stale files left behind by Internet Radio streamer
# ---------------------------------------------------------
[[ -e $WEBRADIO_STREAMER_PID_FILE ]] && sudo rm -f $WEBRADIO_STREAMER_PID_FILE


else
# Debug
echo "$(date): Unknown - New State = [$DNS_STATUS] | Old State = [$LAST_DNS_STATUS]" >> $DEBUG_FILE

# Add entries to dnsmasq for local resolution
# --------------------------------------------
# Set hostname depending on connection type i.e. Wired or Wireless
cat > $INTERNET_OFF_FILE <<EOT
localise-queries
EOT
# Specify Wireless IP address
#cat >> $INTERNET_OFF_FILE <<EOT
#address=/#/$NETWORK_WIRELESS_HOTSPOT_IP
#EOT
# Specify Wired IP address
#[[ "x$NETWORK_IP_ADDRESS" = "x" ]] || \
#	echo "address=/#/$NETWORK_IP_ADDRESS" >> $INTERNET_OFF_FILE
#
# Restart dnsmasq.service
restart_dnsmasq_alert_if_failed

# Quit
exit

fi


# Run processes whenever there's a change in status i.e. UP or DOWN
###################################################################
# 1) Restart nodogsplash in order to change default gateway device and # DNS settings
systemctl restart nodogsplash.service
#
# 2) Restart wireless access point: hostapd
#systemctl restart hostapd
#
# Reload WiFi driver for buggy chipsets
#/usr/bin/lsusb | grep -i RTL8188CUS > /dev/null 2>&1 && /usr/sbin/rmmod rtl8192cu && /usr/sbin/modprobe rtl8192cu debug=5 && /usr/bin/systemctl restart hostapd.service
