#!/bin/sh
# Coova-Chilli init script
#
# Jambula Labs @copyright 2022-2023 All rights reserved

PREFIX=/usr
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_SHARE_DIR=$PREFIX/share/$PROJECT_NAME
COOVA_CONFIG_DIR=/etc/chilli
COOVA_CONFIG_FILE=$COOVA_CONFIG_DIR/config
COOVA_CONFIG_MAIN_FILE=$COOVA_CONFIG_DIR/main.conf
WWW_HTML_DIR=$PROJECT_SYSTEM_SHARE_DIR/html
COOVA_HTML_DIR=$WWW_HTML_DIR/coova
LOGFILE=/var/log/$PROJECT_NAME/chilli.log
REMOTE_DOMAIN_NAME=google.com
PRIMARY_DNS_SERVER=$(grep 'HS_UAMLISTEN=' $COOVA_CONFIG_FILE | cut -d '=' -f2 | awk {'print $1'} | sed 's: ::g') # 172.16.0.1


# Source function library.
. /etc/rc.d/init.d/functions

[ -f /usr/sbin/chilli ] || exit 0


# Jambula chilli functions:
# -------------------------
get_system_dns_settings () {
# Number of DNS settings
NUMBER_OF_DNS=$(sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | wc -l)
#
# DNS 1
SECONDARY_DNS_SERVER=$(sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 1')
# Set DNS2 if more than 1
if [ "$NUMBER_OF_DNS" -gt "1" ];
then
# DNS 2
TETIARY_DNS_SERVER=$(sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 2')
else
TETIARY_DNS_SERVER=$SECONDARY_DNS_SERVER
fi
}

get_chilli_dns_settings () {
# HS_DNS1
PREVIOUS_HS_DNS1=$(grep 'HS_DNS1=' $COOVA_CONFIG_FILE | cut -d '=' -f2)
# HS_DNS2
PREVIOUS_HS_DNS2=$(grep 'HS_DNS2=' $COOVA_CONFIG_FILE | cut -d '=' -f2)
# HS_DOMAINDNSLOCAL
PREVIOUS_HS_DOMAINDNSLOCAL=$(grep 'HS_DOMAINDNSLOCAL=' $COOVA_CONFIG_FILE)
}

check_internet_status () {
# Get DNS settings first
get_system_dns_settings
# check Internet connectivity
host -W 1 $REMOTE_DOMAIN_NAME $SECONDARY_DNS_SERVER > /dev/null 2>&1
INTERNET_STATUS=$?
}

get_default_gateway_dev_and_ip () {
# Default ethernet device
NETWORK_ETHERNET_DEVICE=$(/usr/sbin/ip -o -4 link show | awk -F': ' '/mode DEFAULT/ {print $2}' | grep -v lo | head -1)
#
# Test to see if there is a default gateway device
/usr/sbin/ip -o -4 route show | grep -i '^default' > /dev/null 2>&1 && \
DEFAULT_ROUTE_EXISTS=$?
#
if [[ "$DEFAULT_ROUTE_EXISTS" = "0" ]];
then
# Default gateway device
INTERNET_GATEWAY_DEV=$(/usr/sbin/ip -o -4 route show | awk '$3 ~ /^[1-9]+/ {print $5}')
# Default gateway IP address
INTERNET_GATEWAY_IP=$(/usr/sbin/ip -o -4 route show | awk '$3 ~ /^[1-9]+/ {print $3}')

else
INTERNET_GATEWAY_DEV=$NETWORK_ETHERNET_DEVICE
INTERNET_GATEWAY_IP=$(/usr/sbin/ip -o -4 addr show ${INTERNET_GATEWAY_DEV} | awk -F '[ /]+' '/global/ {print $4}')
fi
}

check_local_dns_status () {
host -W 1 $REMOTE_DOMAIN_NAME > /dev/null 2>&1
DNS_STATUS=$?
}

set_chilli_internet_device () {
# Get default gateway device and ip address
get_default_gateway_dev_and_ip
#
# Get previous HS_WANIF variable
PREVIOUS_HS_WANIF=$(grep 'HS_WANIF=' $COOVA_CONFIG_FILE | awk {'print $1'})
# Replace previous HS_WANIF with current and active Internet device
sed -i "s:$PREVIOUS_HS_WANIF:HS_WANIF=$INTERNET_GATEWAY_DEV:g" $COOVA_CONFIG_FILE
}

set_chilli_dns_settings () {
# Get current/previous DNS settings
get_system_dns_settings
get_chilli_dns_settings
check_internet_status 
#
# Based on connectivity, do:
if [ "$INTERNET_STATUS" = "0" ];
then
#
# Set chilli domains local feature to OFF since internet on
sed -i "s:$PREVIOUS_HS_DOMAINDNSLOCAL:HS_DOMAINDNSLOCAL=off:g" $COOVA_CONFIG_FILE
# Set chilli DNS servers to foreign  domain name servers
sed -i "s:HS_DNS1=$PREVIOUS_HS_DNS1:HS_DNS1=$SECONDARY_DNS_SERVER:g" $COOVA_CONFIG_FILE
sed -i "s:HS_DNS2=$PREVIOUS_HS_DNS2:HS_DNS2=$TETIARY_DNS_SERVER:g" $COOVA_CONFIG_FILE

# BUG (Fix!!!) Edit main.conf directly - config not written first time
#sed -i /dns1/d $COOVA_CONFIG_MAIN_FILE
#sed -i /dns2/d $COOVA_CONFIG_MAIN_FILE
#cat >> $COOVA_CONFIG_MAIN_FILE <<EOF
#dns1 "$SECONDARY_DNS_SERVER"
#dns2 "$TETIARY_DNS_SERVER"
#EOF

#
else
# Set chilli domains local feature to ON since internet off
sed -i "s:$PREVIOUS_HS_DOMAINDNSLOCAL:HS_DOMAINDNSLOCAL=on:g" $COOVA_CONFIG_FILE 
#
# Set chilli DNS servers to primary/local domain name servers
sed -i "s:HS_DNS1=$PREVIOUS_HS_DNS1:HS_DNS1=$PRIMARY_DNS_SERVER:g" $COOVA_CONFIG_FILE
sed -i "s:HS_DNS2=$PREVIOUS_HS_DNS2:HS_DNS2=$PRIMARY_DNS_SERVER:g" $COOVA_CONFIG_FILE
#
fi
}

# Default chilli functions
# ------------------------
. /etc/chilli/functions

MULTI=$(ls /etc/chilli/*/chilli.conf 2>/dev/null)
[ -z "$DHCPIF" ] && [ -n "$MULTI" ] && {
    for c in $MULTI; 
    do
	echo "Found configuration $c"
	DHCPIF=$(basename $(echo $c|sed 's#/chilli.conf##'))
	export DHCPIF
	echo "Running DHCPIF=$DHCPIF $0 $*"
	sh $0 $*
    done
    exit
}

if [ -n "$DHCPIF" ]; then
    CONFIG=/etc/chilli/$DHCPIF/chilli.conf
    pidfile=/var/run/chilli.$DHCPIF.pid
else
    CONFIG=/etc/chilli.conf
    pidfile=/var/run/chilli.pid
fi

[ -f $CONFIG ] || {
    echo "$CONFIG Not found"
    exit 0
}

check_required

RETVAL=0
prog="chilli"

case $1 in
    start)
        echo -n "Starting $prog: "
	
        set_chilli_internet_device
        set_chilli_dns_settings

        /sbin/modprobe tun >/dev/null 2>&1

        echo 1 > /proc/sys/net/ipv4/ip_forward

	[ -e /dev/net/tun ] || {
	    (cd /dev; 
		mkdir net; 
		cd net; 
		mknod tun c 10 200)
	}

	writeconfig

        radiusconfig

	test ${HS_ADMINTERVAL:-0} -gt 0 && {	
            (crontab -l 2>&- | grep -v $0
		echo "*/$HS_ADMINTERVAL * * * * $0 radconfig"
		) | crontab - 2>&-
	}

	daemon /usr/sbin/chilli -f --conf=$CONFIG --pidfile=$pidfile &

        echo
	;;
    
    radconfig)
	[ -e $MAIN_CONF ] || writeconfig
	radiusconfig
	;;

    reload)
	killall -HUP chilli chilli_opt
	;;
    
    stop)
        echo -n $"Shutting down $prog: "

	crontab -l 2>&- | grep -v $0 | crontab -

        if [ -f $pidfile ];
	then
	daemon kill $(cat $pidfile)
	    RETVAL=$?
	    [ $RETVAL = 0 ] && {
		rm -f $pidfile 2>/dev/null
	    }
	else
	daemon killall chilli chilli_opt
	fi
        echo
	;;
 
    restart)
	$0 stop
	$0 start
	RETVAL=$?
	;;
   
    *)
        echo "Usage: $0 {start|stop|restart|reload|radconfig}"
        exit 1
esac


#echo "$(date): $(grep -i dns /etc/chilli/main.conf)" >> /tmp/dns


exit $?
