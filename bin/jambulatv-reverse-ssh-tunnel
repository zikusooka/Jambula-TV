#!/bin/sh
# This script will create a reverse SSH tunnel, which allows access
# to this box via the ssh server at remote1.jambulatv.com
#
# Jambula Labs @copyright 2017-2018 All rights reserved
#
# Variables
RELEASE_FILE=/etc/JambulaTV/release
PRODUCT=$(grep -i Product $RELEASE_FILE | cut -d : -f2)
VERSION=$(grep -i Version $RELEASE_FILE | cut -d : -f2)
SERIAL=$(grep -i Serial $RELEASE_FILE | cut -d : -f2)

REVERSE_SSH_CONFIG=/etc/JambulaTV/reverse-ssh.cfg
TMP_EMAIL_FILE=/tmp/email.tmp
EXPECT_TIMEOUT=60

# Import variables
[ -e $REVERSE_SSH_CONFIG ] && . $REVERSE_SSH_CONFIG

# Export Variables
export AUTOSSH_GATETIME



###############
#  FUNCTIONS  #
###############

quit_if_not_enabled () {
if [ "$REVERSE_SSH_ENABLED" != "YES" ];
then
# Notify
clear
cat << EOF
Reverse SSH Not enabled.  Quitting ...

NOTE:  If you need it, please say 'YES' to REVERSE_SSH_ENABLED variable in the file:

$REVERSE_SSH_CONFIG 

EOF
# Quit
exit 0
fi
}

check_4_connectivity_2_ssh_server () {
# Ping remote ssh server
ping -c 3 -W 3 $MIDDLEMAN_SSH_SERVER > /dev/null 2>&1
HOST_STATUS_VAL=$?
if [ $HOST_STATUS_VAL != 0 ];
then
logger -s -t $(basename $0) "Failed: Can not connect to $MIDDLEMAN_SSH_SERVER"
exit 1
fi
}

create_ssh_public_key () {
# Create public key if none exists
[ -e $HOME/.ssh/id_rsa.pub ] || ssh-keygen -t rsa -f $HOME/.ssh/id_rsa -N ""
}

check_if_ssh_passwordless_login_works () {
# See if setup of passwordless logins worked
ssh -o BatchMode=yes -o NumberOfPasswordPrompts=1 -p $MIDDLEMAN_SSH_SERVER_PORT $MIDDLEMAN_SSH_SERVER_USER@$MIDDLEMAN_SSH_SERVER "/bin/echo OK" > /dev/null 2>&1
SSH_EXIT=$?
export SSH_EXIT
}

configure_passwordless_ssh_login () {
check_if_ssh_passwordless_login_works 
if [ "$SSH_EXIT" != "0" ];
then
# Setup passwordless access to SSH server i.e. Copy local SSH public key to remote server.
expect -c "set timeout $EXPECT_TIMEOUT; 
spawn ssh-copy-id -i $HOME/.ssh/id_rsa.pub -o NumberOfPasswordPrompts=1 -p $MIDDLEMAN_SSH_SERVER_PORT $MIDDLEMAN_SSH_SERVER_USER@$MIDDLEMAN_SSH_SERVER; expect ?;
send yes\n;
expect assword;
send $MIDDLEMAN_SSH_SERVER_PASS\n;
interact"
fi
}

send_failure_notification () {
check_if_ssh_passwordless_login_works 
if [ "$SSH_EXIT" != "0" ];
then
# Notify based on specified methos
case $REVERSE_SSH_NOTIFICATION_METHOD in
sms)
echo "Sending SMS Notification"
;;
email)
# Create temp email file
cat > $TMP_EMAIL_FILE << EOF
Reverse SSH connection for [$SERIAL] failed. Possible causes:

1. The information you provided is incorrect or the SSH account was not setup on the
   remote server at $MIDDLEMAN_SSH_SERVER:$MIDDLEMAN_SSH_SERVER_PORT
   Please contact support and provide them with the credentials listed below:

	Username:	$MIDDLEMAN_SSH_SERVER_USER
	Password:	$MIDDLEMAN_SSH_SERVER_PASS

2. Port $MIDDLEMAN_SSH_SERVER_PORT, which is required to connect, is blocked by your 
   network's firewall rules.  Please allow port forwarding on that port

EOF
# Send email
$EMAIL_VIA_GMAIL_TOOL $REVERSE_SSH_NOTIFICATION_EMAIL "[$SERIAL] Error: Reverse SSH connection failed" "$(cat $TMP_EMAIL_FILE)"
;;
*)
echo "No notification sent"
;;
esac

# Quit script
exit
fi
}

run_auto_ssh () {
# Check if autossh is already running
ps uxw | grep autossh | grep ${AUTOSSH_PORT} > /dev/null 2>&1
AUTOSSH_STATE=$?
# Run AutoSSH only if it is not running already
[ "$AUTOSSH_STATE" = "0" ] || su -l root -c "${AUTOSSH_CMD} -M ${AUTOSSH_PORT} -f -N -R *:${PORT_MIDDLEMAN_WILL_LISTEN_ON}:${LOCAL_SSH_SERVER}:${LOCAL_SSH_SERVER_PORT} ${MIDDLEMAN_SSH_SERVER_AND_USERNAME} -p ${MIDDLEMAN_SSH_SERVER_PORT} -oLogLevel=error -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no" $LOCAL_SSH_USER
}

send_successful_notification () {
# Notify of SSH parameters after tunnel has been created
case $REVERSE_SSH_NOTIFICATION_METHOD in
sms)
echo "Sending SMS Notification"
;;
email)
# Create temp email file
cat > $TMP_EMAIL_FILE << EOF
Reverse SSH for [$SERIAL] has been established at ${MIDDLEMAN_SSH_SERVER}.  

To connect, run the following command from any terminal:

ssh -p ${PORT_MIDDLEMAN_WILL_LISTEN_ON} ${LOCAL_SSH_USER}@${MIDDLEMAN_SSH_SERVER}

EOF
# Send email
$EMAIL_VIA_GMAIL_TOOL $REVERSE_SSH_NOTIFICATION_EMAIL "[$SERIAL]: Reverse SSH connection has been made" "$(cat $TMP_EMAIL_FILE)"
;;
none)
echo "No notification is needed"
;;
*)
echo "ssh -p ${PORT_MIDDLEMAN_WILL_LISTEN_ON} ${LOCAL_SSH_USER}@${MIDDLEMAN_SSH_SERVER}"

;;
esac
}



#################
#  MAIN SCRIPT  #
#################

quit_if_not_enabled
check_4_connectivity_2_ssh_server
create_ssh_public_key
configure_passwordless_ssh_login
send_failure_notification
run_auto_ssh
send_successful_notification 
