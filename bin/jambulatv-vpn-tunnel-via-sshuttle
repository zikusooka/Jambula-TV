#!/bin/sh
# This tool is used to create (and later destroy) a temporary and 
# secure SSH based VPN tunnel on the fly. Useful in situations where 
# Internet restrictions and censorship are in place e.g. Governments 
# blocking access to social media sites like WhatsApp and Telegram
#
# Jambula Labs @copyright 2020-2021 All rights reserved

# Variables
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_FUNCTIONS_FILE=$PROJECT_SYSTEM_CONF_DIR/functions

# Source install functions
. $PROJECT_FUNCTIONS_FILE

# sshuttle
SSHUTTLE_ACTION=$1
SSHUTTLE_REMOTE_SERVER=$2
SSHUTTLE_REMOTE_PORT=$3
SSHUTTLE_REMOTE_USER=$4
SSHUTTLE_REMOTE_SUBNET=$5
SSHUTTLE_PID=$(ps auxw | grep -Ev grep | grep 'sshuttle -D' | grep python | awk {'print $2'} | tail -1)



###############
#  FUNCTIONS  #
###############
usage () {
if [[ "x$SSHUTTLE_ACTION" = "x" ]];
then
clear
cat <<ET
Usage:	$(basename $0) [start|stop|status]

ET
exit 1

elif [[ "$SSHUTTLE_ACTION" = "start" ]] && \
[[ \
"x$SSHUTTLE_REMOTE_SERVER" = "x" || \
"x$SSHUTTLE_REMOTE_PORT" = "x" || \
"x$SSHUTTLE_REMOTE_USER" = "x" || \
"x$SSHUTTLE_REMOTE_SUBNET" = "x" \
]];
then
clear
cat <<ET
Usage:	$(basename $0) $SSHUTTLE_ACTION [REMOTE_SSH_SERVER] [REMOTE_SSH_SERVER_PORT] [REMOTE_SSH_SERVER_USER] [REMOTE_SSH_SERVER_SUBNET]

e.g. $(basename $0) $SSHUTTLE_ACTION remote1.jambulatv.com 222 USER1 0.0.0.0/0

ET
exit 1
fi
}

open_sshuttle_vpn_tunnel () {
# Source notification strings
set_notifications

# If there's NOT an already existing sshuttle process
if [[ ! -s $SSHUTTLE_PID_FILE ]];
then
# Check to see if ssh user can automatically connect to remote server
check_if_ssh_passwordless_login_works $SSHUTTLE_REMOTE_PORT $SSHUTTLE_REMOTE_USER $SSHUTTLE_REMOTE_SERVER
#
if [[ "$SSH_EXIT" != "0" ]];
then
# Print notifciation to stdout and systemd journal 
print_notification "$SSH_SERVER_CONNECTION_FAILED_NOTIFICATION_MESSAGE" text
# Print notification using OSD tool
print_notification "$SSH_SERVER_CONNECTION_FAILED_NOTIFICATION_MESSAGE" osd &
exit 1
fi
#
# Connect to remote SSH server using sshuttle
$SSHUTTLE_CMD $SSHUTTLE_OPTS $SSHUTTLE_REMOTE_USER@$SSHUTTLE_REMOTE_SERVER:$SSHUTTLE_REMOTE_PORT $SSHUTTLE_REMOTE_SUBNET
#
# Pause to allow new IP address to be setup
sleep 3
#
# Notify that VPN tunnel has been established
# ---
# Get name of VPN provider
VPN_ISP=$($CURL_CMD $CURL_OPTS https://ipapi.co/org)
# Print notifciation to stdout and systemd journal 
print_notification "$VPN_TUNNEL_OPENED_NOTIFICATION_MESSAGE [$VPN_ISP]" text
# Print notification using OSD tool
print_notification "$VPN_TUNNEL_OPENED_NOTIFICATION_MESSAGE [$VPN_ISP]" osd &

else
# Notify that VPN tunnel already exists
# ---
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$VPN_TUNNEL_ALREADY_OPEN_NOTIFICATION_MESSAGE" text
fi
}

close_sshuttle_vpn_tunnel () {
# Number of lock files that were associated with the PID of sshuttle
[[ -e $SSHUTTLE_PID_FILE ]] && \
PROCESS_NUMBER_USING_LOCK=$(/usr/sbin/lsof -t $LOCK_FILES_DIR/*.lock | grep $(cat $SSHUTTLE_PID_FILE) | wc -l)
#
[[ "x$SSHUTTLE_PID" != "x" ]] && \
PROCESS_NUMBER_USING_LOCK=$(/usr/sbin/lsof -t $LOCK_FILES_DIR/*.lock | grep $SSHUTTLE_PID | wc -l)
#
if [[ "x$PROCESS_NUMBER_USING_LOCK" = "x" ]];
then
# Quit if no processes are found
exit 0
#
# Stop current sshuttle tunnel process ONLY if no other process is
# using the lock file
elif [[ "$PROCESS_NUMBER_USING_LOCK" -le "1" ]];
then
# Kill using PID in PID run file
[[ -e $SSHUTTLE_PID_FILE ]] && kill -15 $(cat $SSHUTTLE_PID_FILE)
# Kill using PID obtained y grep
[[ "x$SSHUTTLE_PID" != "x" ]] && kill -15 $SSHUTTLE_PID
#
# Pause to allow default ISP settings to be setup
sleep 2
#
# Notify that VPN tunnel has been closed
# ---
# Get name of our local provider
LOCAL_ISP=$($CURL_CMD $CURL_OPTS https://ipapi.co/org)
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$VPN_TUNNEL_CLOSED_NOTIFICATION_MESSAGE [$LOCAL_ISP]" text
# Print notification using OSD tool
print_notification "$VPN_TUNNEL_CLOSED_NOTIFICATION_MESSAGE [$LOCAL_ISP]" osd &

else
# Notify that VPN tunnel has NOT been closed
# ---
# Source notification strings
set_notifications
# Print notifciation to stdout and systemd journal 
print_notification "$VPN_TUNNEL_NOT_CLOSED_NOTIFICATION_MESSAGE" text
fi
}

status_sshuttle_vpn_tunnel () {
if [[ -e $SSHUTTLE_PID_FILE ]] || [[ "x$SSHUTTLE_PID" != "x" ]];
then
echo "VPN Tunnel: Open"

else
echo "VPN Tunnel: Closed"
fi
}



#################
#  MAIN SCRIPT  #
#################

# Usage
usage

# Setup VPN Tunnel using sshuttle 
case $SSHUTTLE_ACTION in

start)
# Quit if there is no Internet
check_internet_connectivity_ping
[[ "$INTERNET_IS_REACHEABLE" = "0" ]] || exit 1

# Start VPN tunnel if none exists
open_sshuttle_vpn_tunnel
;;

stop)
# Stop VPN tunnel if no one is using it
close_sshuttle_vpn_tunnel
;;

status)
status_sshuttle_vpn_tunnel
;;

esac
