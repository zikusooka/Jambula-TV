#!/bin/sh
#
# - Query voice airtime, and Internet data (standard & promotional)
# - Query mobile money balances
# - Look up the phone number registered to the SIM card installed
# - Look up the name of the mobile money recipient i.e. Caller ID
# - Load SMS bundles
# - Load selected i.e. cheap data bundles
#
# Mobile networks supported:
# - Uganda (MTN, Airtel)
#                 
# For mobile money transactions:
# You need a minimum amount in sender's Mobile Money wallet
#
# Jambula Labs @copyright 2023-2024 All rights reserved
#
#
# Source global settings
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_GLOBAL_SETTINGS_FILE=$PROJECT_SYSTEM_CONF_DIR/global-settings.cfg
. $PROJECT_GLOBAL_SETTINGS_FILE

# PPP helper scripts
PPP_TOOLS_DIR=/usr/bin
MODEM_ISP_INIT_TOOL=$PPP_TOOLS_DIR/jambulatv-ppp-init

# Source modem ISP initialization scripts
. $MODEM_ISP_INIT_TOOL

# Variables
# ---------
MOBILE_ACTION=$1
MOBILE_PROVIDER=$2
MOBILE_EXTRA_ARG=$3
MOBILE_RECIPIENT_PHONE_NO=$4
MODEM_INDICES="$(mmcli -L | grep Modem | cut -d / -f6 | cut -d ' ' -f1)"
MM_MIN_AMOUNT=500

# MQTT Topics
MQTT_TOPIC_STATUS_GSM_PHONE_NUMBER_MTN="JambulaTV/house/status/gsm_ussd_ug/phone_number/mtn"
MQTT_TOPIC_STATUS_GSM_PHONE_NUMBER_AIRTEL="JambulaTV/house/status/gsm_ussd_ug/phone_number/airtel"
MQTT_TOPIC_STATUS_GSM_VOICE_BALANCE_MTN="JambulaTV/house/status/gsm_ussd_ug/voice_balance/mtn"
MQTT_TOPIC_STATUS_GSM_DATA_BALANCE_MTN="JambulaTV/house/status/gsm_ussd_ug/data_balance/mtn"
MQTT_TOPIC_STATUS_GSM_VOICE_BALANCE_AIRTEL="JambulaTV/house/status/gsm_ussd_ug/voice_balance/airtel"
MQTT_TOPIC_STATUS_GSM_DATA_BALANCE_AIRTEL="JambulaTV/house/status/gsm_ussd_ug/data_balance/airtel"


# ------------------------
# Modem Manager functions
# -----------------------
#
quit_if_no_modem_found () {
if [[ "x$MODEM_INDICES" = "x" ]];
then
logger -s -t $(basename $0) "No modem was found"
exit 1
fi
}

check_sim_card_status () {
query_sim_imsi > /dev/null 2>&1
SIM_STATUS=$?
if [[ "$SIM_STATUS" != "0" ]]; 
then
clear
echo "SIM Access Error: Possible reasons include:

a) SIM card is not properly inserted in modem
b) A connection to the Internet has already been made 
c) There is a problem with your SIM card. If so, please contact the:
   Customer Support Center for $MOBILE_PROVIDER

NOTE: If you are sure none of the above apply, then:
Unplug modem from your PC and re-insert it
" 
exit 1
fi
}

get_modem_index () {
for INDEX in $MODEM_INDICES
do
# Enable modem
mmcli -m $INDEX -e > /dev/null 2>&1
mmcli -m $INDEX | awk -F': ' '/operator name/ {print $2}' | sed "s:'::g" | grep -i "$MOBILE_PROVIDER" > /dev/null 2>&1
PROVIDER_FOUND=$?
# Break off if mobile provider's modem index is found
if [[ "$PROVIDER_FOUND" = "0" ]];
then
MODEM_INDEX=$INDEX
break
fi
done
}

ussd_initiate_session_command () {
mmcli -m $MODEM_INDEX --3gpp-ussd-initiate="$@"
}

ussd_respond_session_command () {
mmcli -m $MODEM_INDEX --3gpp-ussd-respond="$@"
}

ussd_cancel_session_command () {
mmcli -m $MODEM_INDEX --3gpp-ussd-cancel > /dev/null 2>&1
}

ussd_respond_exit_status () {
MOBILE_PROVIDER_LOWER=$(echo $MOBILE_PROVIDER | tr '[:upper:]' '[:lower:]')
if [[ "$command_exit_status" = "0" ]];
then
echo Successfully added data bundle for $MOBILE_PROVIDER
$SOUNDS_TOOL alert data_bundle_add_succeeded_${MOBILE_PROVIDER_LOWER}

else
echo Failed to add data bundle for $MOBILE_PROVIDER
$SOUNDS_TOOL alert data_bundle_add_failed_${MOBILE_PROVIDER_LOWER}
fi
}


# ----
# MTN
# ----
#
query_voice_balance_mtn_standard () {
VOICE_BALANCE=$(ussd_initiate_session_command '*131#' | awk -F': ' '/new reply from network/ {print $3}' | sed 's:/-::g' | awk {'print $1'})
# Print balance on terminal
echo $VOICE_BALANCE
# Publish voice balance using MQTT
$MQTT_PUBLISH_CMD $MQTT_PUBLISH_OPTS -t "$MQTT_TOPIC_STATUS_GSM_VOICE_BALANCE_MTN" -m "$VOICE_BALANCE"
}

query_data_balance_mtn_standard () {
DATA_BALANCE=$(ussd_initiate_session_command '*131*4#' | awk -F': ' '/new reply from network/ {print $2}' | sed 's:Total data is ::g' | sed "s:['|.]::g")
# Print balance on terminal
echo $DATA_BALANCE
# Publish data balance using MQTT
$MQTT_PUBLISH_CMD $MQTT_PUBLISH_OPTS -t "$MQTT_TOPIC_STATUS_GSM_DATA_BALANCE_MTN" -m "$DATA_BALANCE"
}

query_data_balance_mtn_promotion () {
query_data_balance_mtn_standard
}

query_mobile_money_balance_mtn () {
MM_PIN_NUMBER=$MOBILE_EXTRA_ARG
ussd_initiate_session_command "*165*8*1#" > /dev/null 2>&1
MM_BALANCE=$(ussd_respond_session_command "$MM_PIN_NUMBER" | grep -oP "(?<=Your Mobile Money balance is UGX ).+(?=.and your Single Max)")
if [[ "x$MM_BALANCE" != "x" ]];
then
echo -n "$MM_BALANCE"
else
logger -s -t $(basename $0) "Error: Failed to get the balance on $MOBILE_PROVIDER Mobile Money"
exit 1
fi
ussd_cancel_session_command
}

query_phone_number_mtn () {
ussd_initiate_session_command '*160*7#' > /dev/null 2>&1
PHONE_NUMBER=$(ussd_respond_session_command '1'  | awk -F'Your current number is: ' '/Your current number is/ {print $2}' | cut -d. -f1)
# Print balance on terminal
echo $PHONE_NUMBER
# Publish phone number using MQTT
$MQTT_PUBLISH_CMD $MQTT_PUBLISH_OPTS -t "$MQTT_TOPIC_STATUS_GSM_PHONE_NUMBER_MTN" -m "$PHONE_NUMBER"
}

query_mobile_money_recipient_name_mtn () {
MM_RECIPIENT_NUMBER=$MOBILE_EXTRA_ARG
ussd_initiate_session_command "*165*1*1#" > /dev/null 2>&1
ussd_respond_session_command "$MM_RECIPIENT_NUMBER" > /dev/null 2>&1
ussd_respond_session_command "$MM_MIN_AMOUNT" > /dev/null 2>&1
MM_RECIPIENT_NAME=$(ussd_respond_session_command "No Reason" | grep -oP "(?<=$MM_MIN_AMOUNT to ).+(?= on )")
if [[ "x$MM_RECIPIENT_NAME" != "x" ]];
then
echo -n "$MM_RECIPIENT_NAME"
else
logger -s -t $(basename $0) "Error: Failed to get the registered name for the phone number $MM_RECIPIENT_NUMBER"
exit 1
fi
ussd_cancel_session_command
}

buy_sms_on_net_mtn () {
ussd_initiate_session_command '*160*2*4*1#' | sed "s/USSD session initiated; new reply from network: //g" | sed "s:'::g"
# Ask user to select an option
cat <<ET

Please enter the SMS bundle you wish to buy [1, 2, 3, 4, ...]
ET
read SMS_ON_NET_BUNDLE 
clear
# Enter bundle number slected
ussd_respond_session_command "$SMS_ON_NET_BUNDLE" | sed "s/response successfully sent in USSD session; new reply from network: 'Y'ello. //g" | sed "s/'//g"
ussd_cancel_session_command
}

buy_sms_off_net_mtn () {
# Currently not available.  Use On-Net
buy_sms_on_net_mtn
}

buy_data_day_bundle_1_mtn () {
OTHER_PHONE_NUMBER_4_DATA_MTN="$1"
ussd_initiate_session_command '*160*2*2*2*1*2*1#' > /dev/null 2>&1
ussd_respond_session_command "${OTHER_PHONE_NUMBER_4_DATA_MTN}" | grep 'Your request is being processed. Please wait for confirmation message'
command_exit_status=$?
ussd_respond_exit_status
ussd_cancel_session_command
}

buy_data_night_bundle_1_mtn () {
OTHER_PHONE_NUMBER_4_DATA_MTN="$1"
ussd_initiate_session_command '*160*2*2*2*6*1*1#' > /dev/null 2>&1
ussd_respond_session_command "${OTHER_PHONE_NUMBER_4_DATA_MTN}" | grep 'Your request is being processed. Please wait for confirmation message'
command_exit_status=$?
ussd_respond_exit_status
ussd_cancel_session_command
}


# -------
# AIRTEL
# -------
#
query_voice_balance_airtel_standard () {
VOICE_BALANCE=$(ussd_initiate_session_command '*131#' | awk -F': ' '/new reply from network/ {print $2}' | grep -oP "(?<=Ugx).+(?=.)" | awk {'print $1'} | sed "s:[\.|\,]::g")
# Print balance on terminal
echo $VOICE_BALANCE
# Publish voice balance using MQTT
$MQTT_PUBLISH_CMD $MQTT_PUBLISH_OPTS -t "$MQTT_TOPIC_STATUS_GSM_VOICE_BALANCE_AIRTEL" -m "$VOICE_BALANCE"
}

query_voice_balance_airtel_promotion () {
VOICE_BALANCE=$(ussd_initiate_session_command '*170#' | awk -F': ' '/new reply from network/ {print $2}' | grep -oP "(?<=').+(?=')" | sed "s:\.::g")
echo $VOICE_BALANCE
# Publish voice balance using MQTT
$MQTT_PUBLISH_CMD $MQTT_PUBLISH_OPTS -t "$MQTT_TOPIC_STATUS_GSM_VOICE_BALANCE_AIRTEL" -m "$VOICE_BALANCE"
}

query_data_balance_airtel_standard () {
DATA_BALANCE=$(ussd_initiate_session_command '*175*4#' | awk -F': ' '/new reply from network/ {print $2}' | grep -oP "(?<=').+(?=')")
# Print balance on terminal
echo $DATA_BALANCE
# Publish data balance using MQTT
$MQTT_PUBLISH_CMD $MQTT_PUBLISH_OPTS -t "$MQTT_TOPIC_STATUS_GSM_DATA_BALANCE_AIRTEL" -m "$DATA_BALANCE"
}

query_data_balance_airtel_promotion () {
query_data_balance_airtel_standard
}

query_mobile_money_balance_airtel () {
MM_PIN_NUMBER=$MOBILE_EXTRA_ARG
ussd_initiate_session_command "*185*10#" | grep -i "SET PIN" > /dev/null 2>&1
INACTIVE_ACCOUNT=$?
if [[ "$INACTIVE_ACCOUNT" = "0" ]];
then
logger -s -t $(basename $0) "You have activated your mobile money account. Please set the PIN code, and re-run this tool"
ussd_cancel_session_command
exit 1
fi
ussd_respond_session_command "2" > /dev/null 2>&1
MM_BALANCE=$(ussd_respond_session_command "$MM_PIN_NUMBER" | grep -oP "(?<=Balance: UGX ).+(?=.)")
if [[ "x$MM_BALANCE" != "x" ]];
then
echo -n "$MM_BALANCE"
else
logger -s -t $(basename $0) "Error: Failed to get the balance on $MOBILE_PROVIDER Mobile Money"
exit 1
fi
ussd_cancel_session_command
}

query_phone_number_airtel () {
ussd_initiate_session_command '*100*9#' > /dev/null 2>&1
PHONE_NUMBER=$(ussd_respond_session_command '2' | awk -F': ' '/new reply from network/ {print $3}' | sed "s:'::g")
# Print balance on terminal
echo $PHONE_NUMBER
# Publish phone number using MQTT
$MQTT_PUBLISH_CMD $MQTT_PUBLISH_OPTS -t "$MQTT_TOPIC_STATUS_GSM_PHONE_NUMBER_AIRTEL" -m "$PHONE_NUMBER"
}

query_mobile_money_recipient_name_airtel () {
MM_RECIPIENT_NUMBER=$MOBILE_EXTRA_ARG
ussd_initiate_session_command "*185*1#" | grep -i "SET PIN" > /dev/null 2>&1
INACTIVE_ACCOUNT=$?
if [[ "$INACTIVE_ACCOUNT" = "0" ]];
then
logger -s -t $(basename $0) "You have activated your mobile money account. Please set the PIN code, and re-run this tool"
ussd_cancel_session_command
exit 1
fi
ussd_respond_session_command "1" > /dev/null 2>&1
ussd_respond_session_command "$MM_RECIPIENT_NUMBER" > /dev/null 2>&1
MM_RECIPIENT_NAME=$(ussd_respond_session_command "$MM_MIN_AMOUNT" | grep -oP "(?<=$MM_RECIPIENT_NUMBER- ).+(?=. Charge UGX)")
if [[ "x$MM_RECIPIENT_NAME" != "x" ]];
then
echo -n "$MM_RECIPIENT_NAME"
else
logger -s -t $(basename $0) "Error: Failed to get the registered name for the phone number $MM_RECIPIENT_NUMBER"
exit 1
fi
ussd_cancel_session_command
}

buy_sms_on_net_airtel () {
ussd_initiate_session_command '*180*1#' | sed "s/USSD session initiated; new reply from network: //g" | sed "s:'::g"
# Ask user to select an option
cat <<ET

Please enter the SMS bundle you wish to buy [1, 2, 3, 4, ...]
ET
read SMS_ON_NET_BUNDLE 
clear
# Enter bundle number slected
ussd_respond_session_command "$SMS_ON_NET_BUNDLE" > /dev/null 2>&1
# Ontime-only/ confirm
ussd_respond_session_command '2' | sed "s/response successfully sent in USSD session; new reply from network: //g" | sed "s/'//g"
ussd_cancel_session_command
}

buy_sms_off_net_airtel () {
ussd_initiate_session_command '*180*2#' | sed "s/USSD session initiated; new reply from network: //g" | sed "s:'::g"
# Ask user to select an option
cat <<ET

Please enter the SMS bundle you wish to buy [1, 2, 3, 4, ...]
ET
read SMS_ON_NET_BUNDLE 
clear
# Enter bundle number slected
ussd_respond_session_command "$SMS_ON_NET_BUNDLE" > /dev/null 2>&1
# Ontime-only/ confirm
ussd_respond_session_command '2' | sed "s/response successfully sent in USSD session; new reply from network: //g" | sed "s/'//g"
ussd_cancel_session_command
}

buy_data_day_bundle_1_airtel () {
OTHER_PHONE_NUMBER_4_DATA_AIRTEL="$1"
ussd_initiate_session_command '*175*2*2*1#' > /dev/null 2>&1
ussd_respond_session_command "${OTHER_PHONE_NUMBER_4_DATA_AIRTEL}" > /dev/null 2>&1
ussd_respond_session_command '1' > /dev/null 2>&1
ussd_respond_session_command '1' > /dev/null 2>&1
ussd_respond_session_command '1' | grep 'Your request has been submitted, please wait for a confirmation sms.'
command_exit_status=$?
ussd_respond_exit_status
ussd_cancel_session_command
}

buy_data_weekend_bundle_1_airtel () {
#1 - (7.20GB) && 20mins		-> 10,000/=
#2 - (4.40GB | 5.2GB) && 20mins	->  6,500/= | 7,500/=
#3 - (3.25GB | 4GB)		->  5,500/= | 5,500/=
CHOICE="3"
OTHER_PHONE_NUMBER_4_DATA_AIRTEL="$1"
ussd_initiate_session_command "*149*10#" > /dev/null 2>&1
ussd_respond_session_command '5' > /dev/null 2>&1
ussd_respond_session_command "${CHOICE}" > /dev/null 2>&1
ussd_respond_session_command "${OTHER_PHONE_NUMBER_4_DATA_AIRTEL}" > /dev/null 2>&1
ussd_respond_session_command '1' > /dev/null 2>&1
ussd_respond_session_command "${OTHER_PHONE_NUMBER_4_DATA_AIRTEL}" | grep 'Your request was successfully processed'
command_exit_status=$?
ussd_respond_exit_status
ussd_cancel_session_command
}

usage () {
case $MOBILE_ACTION in
voice-balance|data-balance)
if [[ "x$MOBILE_PROVIDER" = "x" ]];
then
cat <<ET
Usage: $(basename $0) $MOBILE_ACTION [MTN|Airtel] [standard|promotion (optional)]
ET
exit 1
#
fi
;;

money-balance)
if [[ "x$MOBILE_PROVIDER" = "x" ]];
then
cat <<ET
Usage: $(basename $0) $MOBILE_ACTION [MTN|Airtel] [PIN NUMBER]
ET
exit 1
#
elif [[ "x$MOBILE_EXTRA_ARG" = "x" ]];
then
cat <<ET
Usage: $(basename $0) $MOBILE_ACTION $MOBILE_PROVIDER [PIN NUMBER]
ET
exit 1
#
fi
;;

data-load)
if [[ "x$MOBILE_PROVIDER" = "x" ]];
then
cat <<ET
Usage: $(basename $0) $MOBILE_ACTION [MTN|Airtel] [day1|night1|weekend1] [recipient no.]
ET
exit 1
#
elif [[ "x$MOBILE_EXTRA_ARG" = "x" ]];
then
cat <<ET
Usage: $(basename $0) $MOBILE_ACTION $MOBILE_PROVIDER [day1|night1|weekend1] [recipient no.]
ET
exit 1
#
elif [[ "x$MOBILE_RECIPIENT_PHONE_NO" = "x" ]];
then
cat <<ET
Usage: $(basename $0) $MOBILE_ACTION $MOBILE_PROVIDER [day1|night1|weekend1] [recipient no.]
ET
#
exit 1
fi
;;

phone-number|sms-on-net|sms-off-net)
if [[ "x$MOBILE_PROVIDER" = "x" ]];
then
cat <<ET
Usage: $(basename $0) $MOBILE_ACTION [MTN|Airtel]
ET
exit 1
fi
;;

callerid-name)
if [[ "x$MOBILE_PROVIDER" = "x" ]];
then
cat <<ET
Usage: $(basename $0) $MOBILE_ACTION [MTN|Airtel] [PHONE NUMBER]
ET
exit 1
#
elif [[ "x$MOBILE_EXTRA_ARG" = "x" ]];
then
cat <<ET
Usage: $(basename $0) $MOBILE_ACTION $MOBILE_PROVIDER [PHONE NUMBER]
ET
exit 1
#
fi
;;

*)
cat <<ET
Usage: $(basename $0) [voice-balance|data-balance|money-balance|data-load|phone-number|callerid-name|sms-on-net|sms-off-net]
ET
exit 1
;;

esac
}


#################
#  MAIN SCRIPT  #
#################

# Usage
usage

# Quit if no modem is found
quit_if_no_modem_found

# Check SIM status
check_sim_card_status

# Find modem Index for requested mobile provider
get_modem_index

# Cancel any active session
ussd_cancel_session_command

case $MOBILE_ACTION in
voice-balance)
# MTN 
# ---
# Voice - standard
if [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] && "$MOBILE_EXTRA_ARG" = "standard" ]] || [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] && "x$MOBILE_EXTRA_ARG" = "x" ]];
then
query_voice_balance_mtn_standard

# Voice - promotion
elif [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] && "$MOBILE_EXTRA_ARG" = "promotion" ]];
then
query_voice_balance_mtn_standard

# Airtel
# ------
# Voice - standard
elif [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] && "$MOBILE_EXTRA_ARG" = "standard" ]] || [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] && "x$MOBILE_EXTRA_ARG" = "x" ]];
then
query_voice_balance_airtel_standard

# Voice - promotion
elif [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] && "$MOBILE_EXTRA_ARG" = "promotion" ]];
then
query_voice_balance_airtel_promotion

fi
;;

data-balance)
# MTN 
# ---
# Data - standard
if [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] && "$MOBILE_EXTRA_ARG" = "standard" ]] || [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] && "x$MOBILE_EXTRA_ARG" = "x" ]];
then
query_data_balance_mtn_standard

# Data - promotion
elif [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] && "$MOBILE_EXTRA_ARG" = "promotion" ]];
then
query_data_balance_mtn_promotion

# Airtel
# ------
# Data - standard
elif [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] && "$MOBILE_EXTRA_ARG" = "standard" ]] || [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] && "x$MOBILE_EXTRA_ARG" = "x" ]];
then
query_data_balance_airtel_standard

# Data - promotion
elif [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] && "$MOBILE_EXTRA_ARG" = "promotion" ]];
then
query_data_balance_airtel_promotion

fi
;;

money-balance)
# MTN 
# ---
# Mobile Money - Check balance using MTN
if [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] ]];
then
query_mobile_money_balance_mtn

# Airtel
# ------
# Mobile Money - Check balance using Airtel
elif [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] ]];
then
query_mobile_money_balance_airtel

fi
;;

phone-number)
# MTN 
# ---
# Phone number
if [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] ]];
then
query_phone_number_mtn

# Airtel
# ------
# Phone number 
elif [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] ]];
then
query_phone_number_airtel

fi
;;

callerid-name)
# MTN 
# ---
# Mobile Money - recipient's name AKA Caller ID
if [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] ]];
then
query_mobile_money_recipient_name_mtn

# Airtel
# ------
# Mobile Money - recipient's name AKA Caller ID
elif [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] ]];
then
query_mobile_money_recipient_name_airtel

fi
;;

sms-on-net)
# MTN 
# ---
# SMS (On-Net)
if [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] ]];
then
buy_sms_on_net_mtn

# Airtel
# ------
# SMS (On-Net)
elif [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] ]];
then
buy_sms_on_net_airtel

fi
;;

sms-off-net)
# MTN 
# ---
# SMS (Off-Net)
if [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] ]];
then
buy_sms_off_net_mtn

# Airtel
# ------
# SMS (Off-Net)
elif [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] ]];
then
buy_sms_off_net_airtel

fi
;;

data-load)
# MTN 
# ---
if [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] && "$MOBILE_EXTRA_ARG" = "day1" ]];
then
buy_data_day_bundle_1_mtn $4

elif [[ "$MOBILE_PROVIDER" = [Mm][Tt][Nn] && "$MOBILE_EXTRA_ARG" = "night1" ]];
then
buy_data_night_bundle_1_mtn $4

# Airtel
# ------
elif [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] && "$MOBILE_EXTRA_ARG" = "day1" ]];
then
buy_data_day_bundle_1_airtel $4

elif [[ "$MOBILE_PROVIDER" = [Aa][Ii][Rr][Tt][Ee][Ll] && "$MOBILE_EXTRA_ARG" = "weekend1" ]];
then
buy_data_weekend_bundle_1_airtel $4
fi

# Query voice balances to update HASS sensors
$0 voice-balance $MOBILE_PROVIDER
;;

esac
