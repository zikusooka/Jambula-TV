#!/bin/sh
# This tool is used to register for whatsapp; and also to send and 
# receive messages
#
# Jambula Labs @copyright 2019-2020 All rights reserved

# Variables
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_FUNCTIONS_FILE=$PROJECT_SYSTEM_CONF_DIR/functions

# Source install functions
. $PROJECT_FUNCTIONS_FILE

# MCC/MNC table is pulled from http://mcc-mnc.com
MCC_MNC_TABLE_FILE_URL=https://github.com/musalbas/mcc-mnc-table/raw/master/mcc-mnc-table.csv
MCC_MNC_TABLE_FILE=/usr/share/JambulaTV/mobile_providers/mcc-mnc-table.csv
COUNTRY_MCC_MNC_RAW_FILE=/tmp/mcc_mnc_raw.csv

WHATSAPP_CMD=$(which yowsup-cli)
WHATSAPP_CONFIG_DIR=${HOME}/.config/yowsup
WHATSAPP_LOG_FILE=$PROJECT_SYSTEM_LOG_DIR/whatsapp.log
WHATSAPP_METHOD_NAME=$1
WHATSAPP_TEXT_MESSAGE="$2"
WHATSAPP_ATTACHMENT_FILE_PATH="$2"
WHATSAPP_PHONE_NUMBER_RECIPIENT=$3
WHATSAPP_REGISTRATION_METHOD=sms

CRITICAL_JOBS_SPOOL_DIRECTORY=$WHATSAPP_SPOOL_DIR
CRITICAL_JOBS_SPOOL_COMMAND="$WHATSAPP_TOOL $WHATSAPP_METHOD_NAME \"$WHATSAPP_TEXT_MESSAGE\""

PING_TIMEOUT=3 #9
PING_IP_ADDRESS=$DNS_SERVER_IP_ADDRESS_DEFAULT



###############
#  FUNCTIONS  #
###############

start_logging () {
# If it already exists, make log file writeable by all
[[ -e $WHATSAPP_LOG_FILE ]] && sudo chmod a+w $WHATSAPP_LOG_FILE
# Start logging
cat >> $WHATSAPP_LOG_FILE <<EOF

------------------------------------
Date:  $(date)
------------------------------------
EOF
exec 2>> $WHATSAPP_LOG_FILE
}

check_if_root () {
if [ "`whoami`" != "root" ];
then
clear
logger -s -t $(basename $0) "Incorrect user! You need to run this tool as root. Try again using sudo" 
tail -1 $WHATSAPP_LOG_FILE
exit 1
fi
}

usage () {
# Check who is running this tool
check_if_root

# CLI arguments
clear
if [ "x$WHATSAPP_METHOD_NAME" = "x" ];
then
echo "Usage:  ./`basename $0` [register]|[sendMessage]|[sendFileContent]|[sendImage][sendVideo]
"
exit 1
fi

case $WHATSAPP_METHOD_NAME in
[Ss][Ee][Nn][Dd][Mm][Ee][Ss][Ss][Aa][Gg][Ee])
# Source settings file
[ -e $WHATSAPP_CREDENTIALS_CONFIG ] && . $WHATSAPP_CREDENTIALS_CONFIG
# Test for blank message or recipient phone number
if [ "x$WHATSAPP_PHONE_NUMBER_RECIPIENT" = "x" ] || [ "x$WHATSAPP_TEXT_MESSAGE" = "x" ];
then
echo "Usage:  ./`basename $0` $WHATSAPP_METHOD_NAME [WHATSAPP_TEXT_MESSAGE] [WHATSAPP_PHONE_NUMBER_RECIPIENT]
"
exit 1
fi
;;

[Ss][Ee][Nn][Dd][Ff][Ii][Ll][Ee][Cc][Oo][Nn][Tt][Ee][Nn][Tt])
# Source settings file
[ -e $WHATSAPP_CREDENTIALS_CONFIG ] && . $WHATSAPP_CREDENTIALS_CONFIG
# Test for blank message or recipient phone number
if [ "x$WHATSAPP_PHONE_NUMBER_RECIPIENT" = "x" ] || [ "x$WHATSAPP_TEXT_MESSAGE" = "x" ];
then
echo "Usage:  ./`basename $0` $WHATSAPP_METHOD_NAME [MESSAGE_FILE_PATH] [WHATSAPP_PHONE_NUMBER_RECIPIENT]
"
exit 1
fi
;;

[Ss][Ee][Nn][Dd][Ii][Mm][Aa][Gg][Ee])
# Source settings file
[ -e $WHATSAPP_CREDENTIALS_CONFIG ] && . $WHATSAPP_CREDENTIALS_CONFIG
# Test for blank message or recipient phone number
if [ "x$WHATSAPP_PHONE_NUMBER_RECIPIENT" = "x" ] || [ "x$WHATSAPP_ATTACHMENT_FILE_PATH" = "x" ];
then
echo "Usage:  ./`basename $0` $WHATSAPP_METHOD_NAME [WHATSAPP_IMAGE_FILE_PATH] [WHATSAPP_PHONE_NUMBER_RECIPIENT]
"
exit 1
fi
;;

[Ss][Ee][Nn][Dd][Vv][Ii][Dd][Ee][Oo])
# Source settings file
[ -e $WHATSAPP_CREDENTIALS_CONFIG ] && . $WHATSAPP_CREDENTIALS_CONFIG
# Test for blank message or recipient phone number
if [ "x$WHATSAPP_PHONE_NUMBER_RECIPIENT" = "x" ] || [ "x$WHATSAPP_ATTACHMENT_FILE_PATH" = "x" ];
then
echo "Usage:  ./`basename $0` $WHATSAPP_METHOD_NAME [WHATSAPP_VIDEO_FILE_PATH] [WHATSAPP_PHONE_NUMBER_RECIPIENT]
"
exit 1
fi
;;

esac
}

pre_start_tasks () {
# Usage
usage

# Check connectivity to WhatsApp servers
check_internet_connectivity_ping 0 whatsapp.com spool

# Test and see if filtering is going on i.e. ICMP ping requests were blocked 
if [[ "$PING_ICMP_REQUESTS_BLOCKED" = "yes" ]];
then
# Source SSH server variables i.e. credentials
[[ -e $REVERSE_SSH_CONFIG ]] && . $REVERSE_SSH_CONFIG
#
# Start a VPN tunnel using sshuttle
$VPN_TUNNEL_SSHUTTLE_TOOL start $MIDDLEMAN_SSH_SERVER $MIDDLEMAN_SSH_SERVER_PORT $MIDDLEMAN_SSH_SERVER_USER 0.0.0.0/0
fi
}

post_clean_up_tasks () {
# Test and see if filtering is going on i.e. ICMP ping requests were blocked 
if [[ "$PING_ICMP_REQUESTS_BLOCKED" = "yes" ]];
then
# Stop VPN tunnel using sshuttle
$VPN_TUNNEL_SSHUTTLE_TOOL stop
fi
}

registration_status () {
# Source settings file
[ -e $WHATSAPP_CREDENTIALS_CONFIG ] && . $WHATSAPP_CREDENTIALS_CONFIG
# Check if already registered
if [[ -s $WHATSAPP_CONFIG_DIR/$WHATSAPP_PHONE_NUMBER_SENDER/config.json ]];
then
clear
echo "
Hey there! It looks like you already registered.  If you want to re-register, please remove the following file and run this script again.

[$WHATSAPP_CONFIG_DIR/$WHATSAPP_PHONE_NUMBER_SENDER/config.json]

"
exit 0
fi
}

download_mcc_mnc_file () {
# Check if Internet connection is up
ping -c 1 $PING_IP_ADDRESS > /dev/null 2>&1
INTERNET_ALIVE=$?
# Download MCC-MNC table file if not present and Internet is up
if [ ! -s $MCC_MNC_TABLE_FILE ] && [ "$INTERNET_ALIVE" = "0" ];
then
wget -c -O $MCC_MNC_TABLE_FILE $MCC_MNC_TABLE_FILE_URL 
fi
}

extract_country_info () {
# Country
clear
DEFAULT_COUNTRY=Uganda
read -p "Please enter the name of your country [$DEFAULT_COUNTRY]
" COUNTRY
# If empty set to default
if [ "x$COUNTRY" = "x" ];
then
COUNTRY=$DEFAULT_COUNTRY
fi
#
# Create raw file containing user's country, MCC, MNC, etc
grep -i $COUNTRY $MCC_MNC_TABLE_FILE > $COUNTRY_MCC_MNC_RAW_FILE
}

extract_network_info () {
# Network
clear
DEFAULT_NETWORK_NUMBER=4
read -p "Please select the mobile network in $COUNTRY that you will use for WhatsApp [$DEFAULT_NETWORK_NUMBER]

$(cut -d , -f8 $COUNTRY_MCC_MNC_RAW_FILE | cat -n )

" NETWORK_NUMBER
# If empty set to default
if [ "x$NETWORK_NUMBER" = "x" ];
then
NETWORK_NUMBER=$DEFAULT_NETWORK_NUMBER
fi
#
# Extract codes
# Network
NETWORK_NAME=$(awk "NR==$NETWORK_NUMBER" $COUNTRY_MCC_MNC_RAW_FILE | cut -d , -f8)
# Telephone Country Code
TELEPHONE_COUNTRY_CODE=$(awk "NR==$NETWORK_NUMBER" $COUNTRY_MCC_MNC_RAW_FILE | cut -d , -f7)
# MCC
MOBILE_COUNTRY_CODE=$(awk "NR==$NETWORK_NUMBER" $COUNTRY_MCC_MNC_RAW_FILE | cut -d , -f1)
# MNC
MOBILE_NETWORK_CODE=$(awk "NR==$NETWORK_NUMBER" $COUNTRY_MCC_MNC_RAW_FILE | cut -d , -f3)
}

registration_request_code () {
# Check if registered before
registration_status 

# Download mcc_mnc file
download_mcc_mnc_file

# Extract country information
extract_country_info

# Extract network information
extract_network_info

# Source settings file
[ -e $WHATSAPP_CREDENTIALS_CONFIG ] && . $WHATSAPP_CREDENTIALS_CONFIG
#
# Ask for receiving phone number
clear
DEFAULT_WHATSAPP_PHONE_NUMBER_RECIPIENT=$WHATSAPP_PHONE_NUMBER_RECIPIENT
read -p "Please enter the phone number you will use to receive WhatsApp messages (Include country code [$DEFAULT_WHATSAPP_PHONE_NUMBER_RECIPIENT])
" WHATSAPP_PHONE_NUMBER_RECIPIENT

# If empty set to default
if [ "x$WHATSAPP_PHONE_NUMBER_RECIPIENT" = "x" ];
then
WHATSAPP_PHONE_NUMBER_RECIPIENT=$DEFAULT_WHATSAPP_PHONE_NUMBER_RECIPIENT
fi
#
# Ask for sending phone number
clear
DEFAULT_WHATSAPP_PHONE_NUMBER_SENDER=$WHATSAPP_PHONE_NUMBER_SENDER
read -p "Please enter the phone number you will use to send WhatsApp messages (Include country code [$DEFAULT_WHATSAPP_PHONE_NUMBER_SENDER])
" WHATSAPP_PHONE_NUMBER_SENDER
# If empty set to default
if [ "x$WHATSAPP_PHONE_NUMBER_SENDER" = "x" ];
then
WHATSAPP_PHONE_NUMBER_SENDER=$DEFAULT_WHATSAPP_PHONE_NUMBER_SENDER
fi
#
#
# Print summary of info collected
clear
cat <<EOF
You have chosen the following mobile network as your carrier for WhatsApp:

===============================================================================

Phone Number used for receiving:	$WHATSAPP_PHONE_NUMBER_RECIPIENT
Phone Number used for sending:		$WHATSAPP_PHONE_NUMBER_SENDER

Mobile Network:				$NETWORK_NAME
Country:  				$COUNTRY
Country Telephone Code:  		$TELEPHONE_COUNTRY_CODE
Mobile Country Code (MCC):		$MOBILE_COUNTRY_CODE
Mobile Network Code (MNC):		$MOBILE_NETWORK_CODE

===============================================================================

EOF

# Write variables to whatsapp settings file i.e. Overwrite in case previous registrations existed
cat > $WHATSAPP_CREDENTIALS_CONFIG << EOF
# Generated using jambulatv-whatsapp on $(date)
WHATSAPP_TOOL=$WHATSAPP_TOOL
WHATSAPP_PHONE_NUMBER_SENDER=$WHATSAPP_PHONE_NUMBER_SENDER
WHATSAPP_PHONE_NUMBER_RECIPIENT=$WHATSAPP_PHONE_NUMBER_RECIPIENT
TELEPHONE_COUNTRY_CODE=$TELEPHONE_COUNTRY_CODE
MOBILE_COUNTRY_CODE=$MOBILE_COUNTRY_CODE
MOBILE_NETWORK_CODE=$MOBILE_NETWORK_CODE
EOF

# Request for PIN code using SMS
$WHATSAPP_CMD registration --debug --requestcode $WHATSAPP_REGISTRATION_METHOD --config-phone $WHATSAPP_PHONE_NUMBER_SENDER --config-cc $TELEPHONE_COUNTRY_CODE --config-mcc $MOBILE_COUNTRY_CODE --config-mnc $MOBILE_NETWORK_CODE 2>&1 | grep -Ei "(status: b'fail'|status: fail)"
REQUEST_CODE_STATUS=$?
if [[ "$REQUEST_CODE_STATUS" = "0" ]];
then
# Notify of failure and quit
cat <<EOF
logger -s -t $(basename $0) "Failed to get registration code.  Please check for actual Yowsup error message"
EOF
exit 1
fi
}

registration_confirm () {
# Source settings file
[ -e $WHATSAPP_CREDENTIALS_CONFIG ] && . $WHATSAPP_CREDENTIALS_CONFIG
#
# Check if request for PIN Code was made
if [ "x$WHATSAPP_REGISTRATION_CODE" = "x" ];
then
clear;
cat <<ET
Error:  Please request whatsapp code that will be used to confirm your
registration

ET
exit 1
fi
# Confirm using sent PIN code
$WHATSAPP_CMD registration --debug --register $WHATSAPP_REGISTRATION_CODE --config-phone $WHATSAPP_PHONE_NUMBER_SENDER
}

send_pre_check () {
# Source settings file
[ -e $WHATSAPP_CREDENTIALS_CONFIG ] && . $WHATSAPP_CREDENTIALS_CONFIG
#
# Get whatsapp registered ID if available
WHATSAPP_REGISTERED_ID=$([[ $WHATSAPP_CONFIG_DIR/$WHATSAPP_PHONE_NUMBER_SENDER/config.json ]] && jq -r .id $WHATSAPP_CONFIG_DIR/$WHATSAPP_PHONE_NUMBER_SENDER/config.json)
#
# Quit if device is not yet registered
if [[ "x$WHATSAPP_REGISTERED_ID" = "x" ]];
then
clear
cat <<ET
Error:  Please register this device for whatsapp first before you can send

ET
exit 1
fi
}

send_message () {
# Pre-checks before sending
send_pre_check

# Where applicable, use recipient phone number specified on command line
[[ "x$2" = "x" ]] || WHATSAPP_PHONE_NUMBER_RECIPIENT=$2

# Send message to Whatsapp recipient
$WHATSAPP_CMD demos --debug --config $WHATSAPP_CONFIG_DIR/$WHATSAPP_PHONE_NUMBER_SENDER/config.json --send $WHATSAPP_PHONE_NUMBER_RECIPIENT "$WHATSAPP_TEXT_MESSAGE"
}

send_file_content () {
# Pre-checks before sending
send_pre_check

# Where applicable, use recipient phone number specified on command line
[[ "x$2" = "x" ]] || WHATSAPP_PHONE_NUMBER_RECIPIENT=$2

# Extract contents from file
MESSAGE_FILE_PATH=$WHATSAPP_TEXT_MESSAGE
FILE_CONTENTS=$(cat $MESSAGE_FILE_PATH)
# Send file contents to Whatsapp recipient
$WHATSAPP_CMD demos --debug --config $WHATSAPP_CONFIG_DIR/$WHATSAPP_PHONE_NUMBER_SENDER/config.json --send $WHATSAPP_PHONE_NUMBER_RECIPIENT "$FILE_CONTENTS"
}

send_attachment () {
# Pre-checks before sending
send_pre_check

# Where applicable, use recipient phone number specified on command line
[[ "x$2" = "x" ]] || WHATSAPP_PHONE_NUMBER_RECIPIENT=$2

# Determine file format from path name - May be use the 'file' command
WHATSAPP_ATTACHMENT_FILE_EXT="${WHATSAPP_ATTACHMENT_FILE_PATH##*.}"
case $WHATSAPP_ATTACHMENT_FILE_EXT in
ogg|m4a|mp3|wav)
MEDIA_TYPE=audio
;;
avi|mkv|mov|mp4)
MEDIA_TYPE=video
;;
gif|jpeg|jpg|png)
MEDIA_TYPE=image
;;
*)
MEDIA_TYPE=image
;;
esac
#
# Set command for sending media
case $MEDIA_TYPE in
audio)
SEND_MEDIA_COMMAND="audio send $WHATSAPP_PHONE_NUMBER_RECIPIENT $WHATSAPP_ATTACHMENT_FILE_PATH"
;;
image)
SEND_MEDIA_COMMAND="image send $WHATSAPP_PHONE_NUMBER_RECIPIENT $WHATSAPP_ATTACHMENT_FILE_PATH"
;;
video)
SEND_MEDIA_COMMAND="video send $WHATSAPP_PHONE_NUMBER_RECIPIENT $WHATSAPP_ATTACHMENT_FILE_PATH"
;;
esac

# Send image to Whatsapp recipient
/usr/bin/expect -c "
spawn $WHATSAPP_CMD demos -y --debug --config $WHATSAPP_CONFIG_DIR/$WHATSAPP_PHONE_NUMBER_SENDER/config.json; 
expect \[offline\];

# Connect/ Quick login
send /L\n;
send /L\n;
send /L\n;
expect eof;
#
send \"\n\";
expect \[connected\];

# Send media
send -- \"/$SEND_MEDIA_COMMAND\";
send \"\n\";
expect eof;

# Disconnect
send /disconnect\n;
expect \[disconnected\];
"
}

register_4_whatsapp  () {
registration_request_code
#
# Ask for PIN Code
clear
read -p "An SMS message with a PIN Code has been sent to your phone number $WHATSAPP_PHONE_NUMBER_SENDER.  Please Enter it here now:
" PIN_CODE
# Copy PIN code to settings file
cat >> $WHATSAPP_CREDENTIALS_CONFIG << EOF
WHATSAPP_REGISTRATION_CODE=$PIN_CODE
EOF
#
registration_confirm
}



#################
#  MAIN SCRIPT  #
#################

lock_process_instance whatsapp

trap post_clean_up_tasks EXIT

start_logging

pre_start_tasks

case $WHATSAPP_METHOD_NAME in
[Rr][Ee][Gg][Ii][Ss][Tt][Ee][Rr])
register_4_whatsapp 
;;

[Ss][Ee][Nn][Dd][Mm][Ee][Ss][Ss][Aa][Gg][Ee])
send_message "$2" "$3"
;;

[Ss][Ee][Nn][Dd][Ff][Ii][Ll][Ee][Cc][Oo][Nn][Tt][Ee][Nn][Tt])
send_file_content "$2" "$3"
;;

[Ss][Ee][Nn][Dd][Ii][Mm][Aa][Gg][Ee])
send_attachment "$2" "$3"
;;

[Ss][Ee][Nn][Dd][Vv][Ii][Dd][Ee][Oo])
send_attachment "$2" "$3"
;;

*)
echo "Usage:  ./`basename $0` [register]|[sendMessage]|[sendFileContent]|[sendImage][sendVideo]
"
exit 1
;;
esac
