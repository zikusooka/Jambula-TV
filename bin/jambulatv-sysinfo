#!/bin/bash
RELEASE_FILE=/etc/JambulaTV/release
PRODUCT=$(grep -i Product $RELEASE_FILE | cut -d : -f2)
VERSION=$(grep -i Version $RELEASE_FILE | cut -d : -f2)
SERIAL=$(grep -i Serial $RELEASE_FILE | cut -d : -f2)
HEADER=$(figlet $PRODUCT $VERSION)
YEAR=$(date +%Y)
KERNEL=$(uname -r)
b=`tput bold`
n=`tput sgr0`
# IP Settings
# ***********
NETWORK_ETHERNET_DEVICE=$(/usr/sbin/ip link | grep '2: ' | cut -d : -f2 | head -1 | sed -e 's/ //g')
NETWORK_IP_ADDRESS=$(/usr/sbin/ip -4 addr show dev $NETWORK_ETHERNET_DEVICE | grep brd | awk {'print $2'} | cut -d / -f1)

NETWORK_GATEWAY_ADDRESS=$(/usr/sbin/ip route list | grep default | sed 's/^.*via //' | awk {'print $1'})
# If No Gateway
if [ "x$NETWORK_GATEWAY_ADDRESS" = "x" ];
then
NETWORK_GATEWAY_ADDRESS=000.000.000.000
fi
#
# DNS Settings
# *************
# Current DNS 1
CURRENT_DNS1=`sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 1'`
#
# Number of DNS settings
NUMBER_OF_DNS=`sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | wc -l`
#
# Add second DNS if more than 1 setting
if [ "$NUMBER_OF_DNS" -gt "1" ];
then
# Current DNS 2
CURRENT_DNS2=`sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 2'` 
else
CURRENT_DNS2=$CURRENT_DNS1
fi

# Check if Internet connection is up
host -W 1 google.com 8.8.8.8 > /dev/null 2>&1
INTERNET_ALIVE=$?
if [ "$INTERNET_ALIVE" = "0" ];
then
INTERNET_STATE=UP↑
# Public IP Address
# -----------------
PUBLIC_IP_ADDRESS=$(wget -O - -q ipchicken.com | egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | uniq)
# Source weather functions
. /usr/bin/jambulatv-weather-api
# Updates
# Get latest version from Internet
LATEST_VERSION=v3.8
	if [ "$LATEST_VERSION" = "$VERSION" ];
	then
	UPDATES_AVAILABLE="${n}<Good, You're Up to Date>"
	else
	UPDATES_AVAILABLE="${b}<<New Version Available>>"
	fi
else
INTERNET_STATE=DOWN↓
PUBLIC_IP_ADDRESS=Unknown
TEMPERATURE_C=0
CITY=$(cat /etc/timezone | cut -d / -f2)
SUMMARY="Info not available"
UPDATES_AVAILABLE="${b}Current Version Unknown"
fi

# ------------------
# Hardware variables
# ------------------
MOBO_VENDOR=$(/usr/sbin/lshw -quiet -c system | grep vendor | cut -d : -f2 | sed 's:^ ::' | sed 's: Group::'
)
MOBO_MODEL=$(/usr/sbin/lshw -quiet -c system | grep product | cut -d : -f2 | sed 's:^ ::' | sed 's: (None)::')
MOTHERBOARD_MAKE="$MOBO_VENDOR $MOBO_MODEL"
CPU_MODEL=$(/usr/sbin/lshw -quiet -c processor | grep product | cut -d : -f2 | sed 's:^ ::'| awk {'print $1FS$2FS$3'})
CPU_SPEED=$(/usr/sbin/lshw -quiet -c processor | grep capacity | cut -d : -f2 | sed 's:^ ::')
CPUTIME=$(ps -eo pcpu | awk 'NR>1' | awk '{tot=tot+$1} END {print tot}')
CPUCORES=$(cat /proc/cpuinfo | grep -c processor)
CPU_USED=$(echo $CPUTIME / $CPUCORES | bc)%
CPU_LOAD=$(cat /proc/loadavg | cut -d' ' -f1-3)
CPU_VAMPIRE=$()
CPU_VAMPIRE_USAGE=$(ps --no-header -e -o pcpu,args --sort -pcpu | sed '/^ 0.0 /d' | head -1 | awk {'print $1'} | cut -d . -f1)%
DISK_MODEL=$(/usr/sbin/lshw -quiet -c disk | grep product | cut -d : -f2 | sed 's:^ ::')
DISK_SIZE=$(/usr/sbin/lshw -quiet -c disk | grep size: | cut -d : -f2 | sed 's:^ ::')
DISK_AVAIL_ROOT=$(df -h / | awk '{ a = $4 } END { print a }')
DISK_AVAIL_JAMBULA=$(df -h /JambulaTV | awk '{ a = $4 } END { print a }')
DISK_LOGICAL_NAME=$(/usr/sbin/lshw -quiet -c disk | grep 'logical name' | cut -d : -f2 | sed 's:^ ::')
DISK_TEMP=$(/usr/sbin/hddtemp | cut -d : -f3 | sed 's: ::g')

MEMORY_SIZE_TOTAL=$(/usr/sbin/lshw -quiet -c memory | grep -A4 *-memory | grep size: | head -1 | cut -d : -f2 | sed 's:^ ::')
MEMORY_MODEL_B0=$(/usr/sbin/lshw -quiet -c memory | grep -A7 *-bank:0 | grep product: | cut -d : -f2 | sed 's:^ ::')
MEMORY_MODEL_B1=$(/usr/sbin/lshw -quiet -c memory | grep -A7 *-bank:1 | grep product: | cut -d : -f2 | sed 's:^ ::')
MEMORY_SIZE_B0=$(/usr/sbin/lshw -quiet -c memory | grep -A7 *-bank:0 | grep size: | cut -d : -f2 | sed 's:^ ::')

MEMORY_SIZE_B1=$(/usr/sbin/lshw -quiet -c memory | grep -A7 *-bank:1 | grep size: | cut -d : -f2 | sed 's:^ ::')
MEMORY_AVAIL=$(free -m | grep Mem: | awk {'print $4'})


reset
# Top Border
#echo -e "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#"
# Header
echo -e "\e[32;5;196m $HEADER"
# Copyright
echo -e "\t\e[32;5;196m\t©2015-$YEAR Jambula Labs All Rights Reserved."
echo -e ""
# Internet
echo -e "\t\t${n}Internet Status:\t${b} $INTERNET_STATE"
# Weather
echo -e "\t\t${n}Current Weather:\t${b} ${TEMPERATURE_C}\xc2\xb0C${n}, ${b}$SUMMARY ${n}($CITY)"
# Software/Updates/Serial No.
echo -e "\t\t${n}Platform Software:\t${b} $VERSION ${n}($KERNEL) $UPDATES_AVAILABLE"
echo -e "\t\t${n}Serial Number:\t\t${b} $SERIAL"
echo -e""
# Date
echo -e "${n}Date:${b} $(date +'%A, %d %b %Y') \t\t ${n}Uptime:${b} $(uptime | awk {'print $3'} | sed 's/,//')" 
# IP Addresses
echo -e "${n}Private IP Address:${b} $NETWORK_IP_ADDRESS \t ${n}Public IP address:${b} $PUBLIC_IP_ADDRESS"
echo -e "${n}Private IP Gateway:${b} $NETWORK_GATEWAY_ADDRESS \t ${n}DNS Address:${b} $CURRENT_DNS1"

# CPU
echo -e "${n}CPU Model:${b} $CPU_MODEL \t\t ${n}CPU Speed:${b} $CPU_SPEED"
#echo -e "${n}CPU Usage:${b} $CPU_USED \t\t\t ${n}CPU Load:${b} $CPU_LOAD"
echo -e "${n}CPU Usage:${b} $CPU_USED \t\t\t\t ${n}CPU used by JambulaTV:${b} $CPU_VAMPIRE_USAGE"

# Disks
echo -e "${n}Disk Size:${b} $DISK_SIZE \t\t ${n}Disk Model:${b} $DISK_MODEL"
echo -e "${n}Disk Space [/]: ${b}$DISK_AVAIL_ROOT \t\t\t ${n}Disk Temp:${b} $DISK_TEMP"
echo -e "${n}Disk Space [/JambulaTV]: ${b}$DISK_AVAIL_JAMBULA \t\t ${n}Disk Logical Name:${b} $DISK_LOGICAL_NAME"
# Memory
echo -e "${n}Memory Size:${b} $MEMORY_SIZE_TOTAL \t\t\t ${n}Bank 0:${b} $MEMORY_MODEL_B0 ($MEMORY_SIZE_B0)"
echo -e "${n}Available Memory:${b} $MEMORY_AVAIL MB \t\t ${n}Bank 1:${b} $MEMORY_MODEL_B1 ($MEMORY_SIZE_B1)"

echo -e "\e[0m"

fortune -s
echo -e ""

# Bottom Border
#echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#"
#echo "Checking for system updates:"
#while ps aux | grep -e [y]um > /dev/null; do echo -n .;sleep 1; done &
#up=`yum -e0 -d0 check-update | awk '{print $1}'`
