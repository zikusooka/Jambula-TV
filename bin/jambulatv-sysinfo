#!/bin/bash
COMPANY_NAME="Jambula Labs"
COPYRIGHT_YEAR_START=$(date '+%Y')
COPYRIGHT_YEAR_END=$(date '+%Y' --date='12 months')
COPYRIGHT_NOTICE=" ©$COPYRIGHT_YEAR_START-$COPYRIGHT_YEAR_END $COMPANY_NAME All Rights Reserved."
RELEASE_FILE=/etc/JambulaTV/release
PRODUCT=$(grep -i Product $RELEASE_FILE | cut -d : -f2)
VERSION=$(grep -i Version $RELEASE_FILE | cut -d : -f2)
MODEL=$(grep -i Model $RELEASE_FILE | cut -d : -f2)
SERIAL=$(grep -i Serial $RELEASE_FILE | cut -d : -f2)
HEADER=$(figlet $PRODUCT $VERSION)
KERNEL=$(uname -r)
# TTY
if tty -s
then
b=$(tput bold)
n=$(tput sgr0)
fi
INSTALL_DATE=$(ls -dlct --time-style="+%d %B %Y" "/lost+found" | awk '{printf $9 " " $6 " "$7 " " $8}' | sed 's:/lost+found ::g')
HTTP_USER_AGENT="MY_USER_AGENT"

# IP Settings
# ***********
NETWORK_ETHERNET_DEVICE=$(/usr/sbin/ip link | grep '2: ' | cut -d : -f2 | head -1 | sed -e 's/ //g')
NETWORK_IP_ADDRESS=$(/usr/sbin/ip -4 addr show dev $NETWORK_ETHERNET_DEVICE | grep brd | awk {'print $2'} | cut -d / -f1)

NETWORK_GATEWAY_ADDRESS=$(/usr/sbin/ip route list | grep default | sed 's/^.*via //' | awk {'print $1'})
# If No Gateway
if [ "x$NETWORK_GATEWAY_ADDRESS" = "x" ];
then
NETWORK_GATEWAY_ADDRESS=000.000.000.000
fi
#
# DNS Settings
# *************
# Current DNS 1
CURRENT_DNS1=`sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 1'`
#
# Number of DNS settings
NUMBER_OF_DNS=`sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | wc -l`
#
# Add second DNS if more than 1 setting
if [ "$NUMBER_OF_DNS" -gt "1" ];
then
# Current DNS 2
CURRENT_DNS2=`sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 2'` 
else
CURRENT_DNS2=$CURRENT_DNS1
fi

# Check if Internet connection is up
host -W 1 google.com 8.8.8.8 > /dev/null 2>&1
INTERNET_ALIVE=$?
if [ "$INTERNET_ALIVE" = "0" ];
then
INTERNET_STATE=UP↑
# Public IP Address
# -----------------
PUBLIC_IP_ADDRESS=$(curl --get -sS -m 60  -A "$HTTP_USER_AGENT" https://api.ipify.org)

# Source weather functions
. /usr/bin/jambulatv-weather-api

# See if update is available
/usr/lib64/nagios/plugins/check_updates > /dev/null 2>&1
UPDATE_STATUS=$?
	if [ "$UPDATE_STATUS" = "0" ];
	then
	UPDATES_AVAILABLE="${n}<Good, You're Up to Date>"
	else
	UPDATES_AVAILABLE="${b}<<New Version Available>>"
	fi
else
INTERNET_STATE=DOWN↓
PUBLIC_IP_ADDRESS=Unknown
TEMPERATURE_C=0
CITY=$([ -e /etc/timezone ] && cat /etc/timezone | cut -d / -f2)
SUMMARY="Info not available"
UPDATES_AVAILABLE="${b}Current Version Unknown"
fi

# ------------------
# Hardware variables
# ------------------
MOBO_VENDOR=$(/usr/sbin/lshw -quiet -c system | grep vendor | cut -d : -f2 | sed 's:^ ::' | sed 's: Group::'
)
MOBO_MODEL=$(/usr/sbin/lshw -quiet -c system | grep product | cut -d : -f2 | sed 's:^ ::' | sed 's: (None)::')
MOTHERBOARD_MAKE="$MOBO_VENDOR $MOBO_MODEL"
CPU_MODEL=$(awk -F ': | @' '/model name|Processor|^cpu model|chip type|^cpu type/ {printf $2; exit}' /proc/cpuinfo | awk {'print $1FS$2FS$3'})
CPU_SPEED=$(/usr/sbin/lshw -quiet -c processor | grep capacity | cut -d : -f2 | sed 's:^ ::')
CPUTIME=$(ps -eo pcpu | awk 'NR>1' | awk '{tot=tot+$1} END {print tot}')
CPUCORES=$(cat /proc/cpuinfo | grep -c processor)
CPU_USED=$(echo $CPUTIME / $CPUCORES | bc)%
CPU_LOAD=$(cat /proc/loadavg | cut -d' ' -f1-3)
CPU_VAMPIRE=$()
CPU_VAMPIRE_USAGE=$(ps --no-header -e -o pcpu,args --sort -pcpu | sed '/^ 0.0 /d' | head -1 | awk {'print $1'} | cut -d . -f1)%
GPU_NAME=$(/usr/sbin/lspci -mm | awk -F '\\"|\\" \\"' '/"Display|"3D|"VGA/ {print $3 " "}')
GPU_DRIVER=$(/usr/sbin/lshw -quiet -c video | grep configuration | awk {'print $2'} | cut -d = -f2)

# Disks
DISKS_INSTALLED=$(cat /proc/diskstats | awk {'print $3'} | cut -c2,1,3 | sort -u | wc -l)
# Disk 1
DISK1_MODEL=$(/usr/sbin/lshw -quiet -c disk | grep product | cut -d : -f2 | sed 's:^ ::' | head -1)
DISK1_SIZE=$(/usr/sbin/lshw -quiet -c disk | grep size: | cut -d : -f2 | sed 's:^ ::' | head -1)
DISK1_AVAIL_ROOT=$(df -h / | awk '{ a = $4 } END { print a }')
DISK1_AVAIL_JAMBULA=$(df -h /JambulaTV | awk '{ a = $4 } END { print a }')
DISK1_LOGICAL_NAME=$(/usr/sbin/lshw -quiet -c disk | grep 'logical name' | cut -d : -f2 | sed 's:^ ::' | head -1)
DISK1_TEMP=$(/usr/sbin/hddtemp $DISK1_LOGICAL_NAME | cut -d : -f3 | sed 's: ::g')
# Disk 2
DISK2_MODEL=$(/usr/sbin/lshw -quiet -c disk | grep product | cut -d : -f2 | sed 's:^ ::' | tail -1)
DISK2_SIZE=$(/usr/sbin/lshw -quiet -c disk | grep size: | cut -d : -f2 | sed 's:^ ::' | tail -1)
DISK2_LOGICAL_NAME=$(/usr/sbin/lshw -quiet -c disk | grep 'logical name' | cut -d : -f2 | sed 's:^ ::' | tail -1)
DISK2_MNT_POINT=$(df -h ${DISK2_LOGICAL_NAME}1 | awk {'print $6'} | tail -1)
DISK2_AVAIL=$(df -h $DISK2_MNT_POINT | awk '{ a = $4 } END { print a }')
DISK2_TEMP=$(/usr/sbin/hddtemp $DISK2_LOGICAL_NAME | cut -d : -f3 | sed 's: ::g')

MEMORY_SIZE_TOTAL=$(/usr/sbin/lshw -quiet -c memory | grep -A4 *-memory | grep size: | head -1 | cut -d : -f2 | sed 's:^ ::')
# Memory Model
MEMORY_MODEL_B0=$(/usr/sbin/lshw -quiet -c memory | grep -A7 *-bank:0 | grep product: | cut -d : -f2 | sed 's:^ ::')
MEMORY_MODEL_B1=$(/usr/sbin/lshw -quiet -c memory | grep -A7 *-bank:1 | grep product: | cut -d : -f2 | sed 's:^ ::' | sed 's:Array1_PartNumber1:Not Installed:')
# Memory Size
MEMORY_SIZE_B0=$(/usr/sbin/lshw -quiet -c memory | grep -A7 *-bank:0 | grep size: | cut -d : -f2 | sed 's:^ ::')
# Test for existence of memory stick in second bank
/usr/sbin/lshw -quiet -c memory | grep -A7 *-bank:1 | grep 'size' && FILL=$?
if [ "$FILL" = "0" ];
then
MEMORY_SIZE_B1=$(/usr/sbin/lshw -quiet -c memory | grep -A7 *-bank:1 | grep size: | cut -d : -f2 | sed 's:^ ::')
else
MEMORY_SIZE_B1=0
fi
MEMORY_AVAIL=$(free -m | grep Mem: | awk {'print $4'})
SCREEN_RESOLUTION=$(export DISPLAY=:0.0 && /usr/bin/xrandr --nograb --current | awk 'match($0,/[0-9]*\.[0-9]*\*/) {printf $1 " "}')


# Top Border
#echo -e "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#"
# Header
echo -e "\e[32;5;196m $HEADER"
# Copyright
echo -e "\t\e[32;5;196m\t$COPYRIGHT_NOTICE"
echo -e ""
# Internet
echo -e "\t\t${n}Internet Status:\t${b} $INTERNET_STATE"
# Weather
echo -e "\t\t${n}Current Weather:\t${b} ${CURRENT_TEMPERATURE}\xc2\xb0C${n}, ${b}$CURRENT_SUMMARY ${n}($CITY)"
# Software/Updates/Model/Serial No.
echo -e "\t\t${n}Platform Software:\t${b} $VERSION ${n}($KERNEL) $UPDATES_AVAILABLE"
echo -e "\t\t${n}Model Number:\t\t${b} $MODEL"
echo -e "\t\t${n}Serial Number:\t\t${b} $SERIAL"
echo -e "\t\t${n}Install Date:\t\t${b} $INSTALL_DATE"
echo -e""
# Date
echo -e "${n}Date:${b} $(date +'%A, %d %b %Y') \t\t ${n}Time:${b} $(uptime | awk {'print $1FS$2FS$3'} | sed 's/,//')" 
# IP Addresses
echo -e "${n}Private IP Address:${b} $NETWORK_IP_ADDRESS \t ${n}Public IP address:${b} $PUBLIC_IP_ADDRESS"
echo -e "${n}Private IP Gateway:${b} $NETWORK_GATEWAY_ADDRESS \t ${n}DNS Address:${b} $CURRENT_DNS1"

# CPU
echo -e "${n}CPU Model:${b} $CPU_MODEL \t ${n}CPU Speed:${b} $CPU_SPEED"
#echo -e "${n}CPU Usage:${b} $CPU_USED \t\t\t ${n}CPU Load:${b} $CPU_LOAD"
echo -e "${n}CPU Usage:${b} $CPU_USED \t\t\t\t ${n}CPU used by JambulaTV:${b} $CPU_VAMPIRE_USAGE"

# Graphics
echo -e "${n}GPU Name:${b} $GPU_NAME \t\t ${n}GPU Driver:${b} $GPU_DRIVER"

# Memory
echo -e "${n}Memory Size:${b} $MEMORY_SIZE_TOTAL \t\t\t ${n}Bank 0:${b} $MEMORY_MODEL_B0 ($MEMORY_SIZE_B0)"
echo -e "${n}Available Memory:${b} $MEMORY_AVAIL MB \t\t ${n}Bank 1:${b} $MEMORY_MODEL_B1 ($MEMORY_SIZE_B1)"

# Disks
# -----
# Number of disks installed and space left for root partition
echo -e "${n}Disks installed:${b} $DISKS_INSTALLED \t\t\t ${n}Disk Space Left [System]: ${b}$DISK1_AVAIL_ROOT"

# Disk 1
echo -e "${n}Disk 1 Model:${b} $DISK1_MODEL \t\t ${n}Disk 1 Logical Name:${b} $DISK1_LOGICAL_NAME"
echo -e "${n}Disk 1 Size:${b} $DISK1_SIZE \t\t ${n}Disk 1 Space Left [/JambulaTV]: ${b}$DISK1_AVAIL_JAMBULA"
#
if [ "$DISKS_INSTALLED" -gt "1" ];
then
# Disk 2
echo -e "${n}Disk 2 Model:${b} $DISK2_MODEL \t\t ${n}Disk 2 Logical Name:${b} $DISK2_LOGICAL_NAME"
echo -e "${n}Disk 2 Size:${b} $DISK2_SIZE \t\t ${n}Disk 2 Space Left [$DISK2_MNT_POINT]: ${b}$DISK2_AVAIL"

# Temperatures
echo -e "${n}Disk Temperatures:${b} $DISK1_TEMP | $DISK2_TEMP \t\t ${n}Screen Resolution:${b} $SCREEN_RESOLUTION"

else

echo -e "${n}Disk Temperature:${b} $DISK1_TEMP \t\t\t ${n}Screen Resolution:${b} $SCREEN_RESOLUTION"

fi

echo -e "\e[0m"

#fortune -s
#echo -e ""

# Bottom Border
#echo "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#"
#echo "Checking for system updates:"
#while ps aux | grep -e [y]um > /dev/null; do echo -n .;sleep 1; done &
#up=`yum -e0 -d0 check-update | awk '{print $1}'`
