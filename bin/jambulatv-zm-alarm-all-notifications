#!/bin/sh
# Variables
ZM_CAMERA_ID=$1
ZM_CAMERA_NAME=$2
ZM_CAMERA_EVENT_ID=$3
ZM_TIME=$(date '+%r')
ZM_EVENTS_DIR=/tmp
ZM_MESSAGE_FILE=$ZM_EVENTS_DIR/cctv_message
ZM_HOST_LOCAL=ZONEMINDER_DB_HOST
ZM_HOST_WIFI=172.16.0.1
ZM_PORT=ZONEMINDER_WWW_PORT
ZM_ROOT_URL_LOCAL="http://$ZM_HOST_LOCAL:$ZM_PORT"
ZM_ROOT_URL_WIFI="http://$ZM_HOST_WIFI:$ZM_PORT"
ZM_WATCH_URL="$ZM_ROOT_URL_LOCAL/jpeg.cgi?mode=single&monitor=${ZM_CAMERA_ID}&scale=100"

# CCTV alert settings
CCTV_SETTINGS_FILE=/etc/JambulaTV/cctv-settings.cfg

# Smart Home stuff
SMARTHOME_HUB_HOST_IP=jambulatv
SMARTHOME_HUB_WWW_PORT=MY_SMARTHOME_HUB_WWW_PORT
SMARTHOME_HUB_SECURITY_LAMP_NAME="Living Room"
SMARTHOME_HUB_SECURITY_LAMP_DURATION=60

# Edit Notification message templates here
NOTIFICATION_SUBJECT="*[JambulaTV] CCTV Security Alert: Motion Detected on $ZM_CAMERA_NAME Camera*"
NOTIFICATION_MESSAGE="Motion Was Detected by Camera No.$ZM_CAMERA_ID ($ZM_CAMERA_NAME) at $ZM_TIME.  The Video of this Event has been logged and is viewable at: $ZM_ROOT_URL_WIFI/index.php?view=event%26eid=${ZM_CAMERA_EVENT_ID}"

# Telegram
TELEGRAM_CREDENTIALS_CONFIG=MY_TELEGRAM_CREDENTIALS_CONFIG
WHATSAPP_CREDENTIALS_CONFIG=MY_WHATSAPP_CREDENTIALS_CONFIG

# Email
EMAIL_CREDENTIALS_CONFIG=MY_EMAIL_CREDENTIALS_CONFIG
EMAIL_NOTIFICATION_ADDRESS=$(grep -i EMAIL_TO_ADDRESS $EMAIL_CREDENTIALS_CONFIG | sed '/^#/d' | cut -d = -f2 | sed 's/"//g')
EMAIL_SCRIPT="EMAIL_VIA_GMAIL_CMD"

# Kodi
KODI_HTTP_USER=MY_KODI_HTTP_USER
KODI_HTTP_PASS=MY_KODI_HTTP_PASS
KODI_HTTP_IP=$ZM_HOST_LOCAL
KODI_HTTP_PORT=MY_KODI_HTTP_PORT

# Asterisk
ASTERISK_USER=MY_ASTERISK_USER
ASTERISK_GROUP=MY_ASTERISK_GROUP
ASTERISK_DIAL_OUT_SPOOL_DIR=/var/spool/asterisk/outgoing
ASTERISK_DIAL_OUT_SPOOL_FILE=zm-alarm-$ZM_CAMERA_EVENT_ID.call
ASTERISK_DIAL_OUT_CHANNEL=Mobile
ASTERISK_DIAL_OUT_TRUNK=GSM_PHONE_01
ASTERISK_DIAL_OUT_NUMBER=MY_ASTERISK_DIAL_OUT_NUMBER
ASTERISK_DIAL_OUT_CID="CCTV Security Alarm <(071)-000-0000>"

# OSD
OSD_SCRIPT=MY_OSD_SCRIPT
LIGHTS_CMD=/usr/bin/jambulatv-lights

CURL_CMD="/usr/bin/curl"
CURL_OPTS="-s -S -L -m 60"



###############
#  FUNCTIONS  #
###############

# Source CCTV settings
. $CCTV_SETTINGS_FILE

usage () {
# Camera ID
if [ "x$ZM_CAMERA_ID" = "x" ];
then
echo "Usage:  ./`basename $0` [ZM_CAMERA_ID] [ZM_CAMERA_NAME] [ZM_CAMERA_EVENT_ID]
"
exit 1
fi
# Camera Name
if [ "x$ZM_CAMERA_NAME" = "x" ];
then
echo "Usage:  ./`basename $0` $ZM_CAMERA_ID [ZM_CAMERA_NAME] [ZM_CAMERA_EVENT_ID]
"
exit 1
fi
# Camera Event ID
if [ "x$ZM_CAMERA_EVENT_ID" = "x" ];
then
echo "Usage:  ./`basename $0` $ZM_CAMERA_ID $ZM_CAMERA_NAME [ZM_CAMERA_EVENT_ID]
"
exit 1
fi
}

capture_motion_event () {
# Capture current camera view
$CURL_CMD $CURL_OPTS -G -o $ZM_EVENTS_DIR/camera.${ZM_CAMERA_ID}.jpg $ZM_WATCH_URL
}

generate_message_4_notice () {
cat > $ZM_MESSAGE_FILE << EOF
*$NOTIFICATION_SUBJECT*

$NOTIFICATION_MESSAGE
EOF
}

kodi_screensaver_status () {
KODI_SCREENSAVER_STATUS=$($CURL_CMD $CURL_OPTS -X POST -H "Content-Type: application/json" -u $KODI_HTTP_USER:$KODI_HTTP_PASS -d '{"jsonrpc": "2.0", "method": "XBMC.GetInfoBooleans", "params":{"booleans":["System.ScreenSaverActive"]},"id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc | jq .result[])
}

kodi_screensaver_poke () {
# Poke screen if screensaver is active
if [ "$KODI_SCREENSAVER_STATUS" = "true" ];
then
# Input.Select
$CURL_CMD $CURL_OPTS -X POST -H "Content-Type: application/json" -u "$KODI_HTTP_USER:$KODI_HTTP_PASS" -d '{"jsonrpc":"2.0","method":"Input.Select","id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
fi
}

kodi_addon_script_doorbell () {
$CURL_CMD $CURL_OPTS -X POST -H "Content-Type: application/json" -u "$KODI_HTTP_USER:$KODI_HTTP_PASS" -d '{"jsonrpc":"2.0","method":"Addons.ExecuteAddon","params":{"addonid":"script.doorbell","params":{"CamID":"'"$ZM_CAMERA_ID"'","CamName":"'"$ZM_CAMERA_NAME"'","CamEvent":"'"$ZM_CAMERA_EVENT_ID"'","CamTime":"'"$ZM_TIME"'","CamMessage":"'"$NOTIFICATION_MESSAGE"'"}},"id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
}

create_asterisk_call_file () {
# Generate Asterisk call file
cat > /tmp/$ASTERISK_DIAL_OUT_SPOOL_FILE <<EOF
# Call file was automatically generated by $(basename $0) on $(date)
#
Channel: $ASTERISK_DIAL_OUT_CHANNEL/$ASTERISK_DIAL_OUT_TRUNK/$ASTERISK_DIAL_OUT_NUMBER
Codecs: gsm, speex
#
MaxRetries: 0
#RetryTime: 60
WaitTime: 30
#
Context: zm-alarm-call
Extension: 5615
Priority: 1
#
Callerid: "$ASTERISK_DIAL_OUT_CID"
#
#Account: mysuperfunaccountcode
#
#AlwaysDelete: Yes
#
Set: CAM_ID=$ZM_CAMERA_ID
Set: CAM_NAME="$ZM_CAMERA_NAME"
Set: CAM_TIME="$ZM_TIME"
Set: CAM_EVENT=$ZM_CAMERA_EVENT_ID
#
#Archive: yes
EOF
# Change permissions to asterisk user and group
chown $ASTERISK_USER:$ASTERISK_GROUP /tmp/$ASTERISK_DIAL_OUT_SPOOL_FILE
# Move to outgoing spool directory i.e. Make the call
mv -v /tmp/$ASTERISK_DIAL_OUT_SPOOL_FILE $ASTERISK_DIAL_OUT_SPOOL_DIR
}



#################
#  MAIN SCRIPT  #
#################
# Usage
usage


# Quit if all cctv settings are turned off
[[ "$CCTV_ALL" = "1" ]] || exit 0


# Capture event image - This has to be here i.e. early on
capture_motion_event


# LAMP
# ----
# Turn on security Light and log event
if [[ "$CCTV_LIGHTS" = "1" ]];
then
$LIGHTS_CMD "$SMARTHOME_HUB_SECURITY_LAMP_NAME" on
fi


# Telegram
# ---------
if [[ "$CCTV_TELEGRAM" = "1" ]];
then
# Source Telegram credentials
. $TELEGRAM_CREDENTIALS_CONFIG
# Generate message for Telegram
generate_message_4_notice
# SendMesage
$TELEGRAM_SCRIPT SendMessage "$(cat $ZM_MESSAGE_FILE). Also attached is a snapshot ..." &
# SendPhoto
$TELEGRAM_SCRIPT SendImageDisk  $ZM_EVENTS_DIR/camera.$ZM_CAMERA_ID.jpg &
fi


# WhatsApp
# --------
if [[ "$CCTV_WHATSAPP" = "1" ]];
then
# Source WhatsApp credentials
. $WHATSAPP_CREDENTIALS_CONFIG
# Check existence of command
[[ "x$WHATSAPP_SCRIPT" = "x" ]] && WHATSAPP_SCRIPT=/usr/bin/jambulatv-whatsapp
# Generate message for WhatsApp
generate_message_4_notice
# SendMesage
$WHATSAPP_SCRIPT sendmessage "$(cat $ZM_MESSAGE_FILE)" $WHATSAPP_PHONE_NUMBER_RECIPIENT > /dev/null 2>&1 
# SendPhoto
$WHATSAPP_SCRIPT sendimage $ZM_EVENTS_DIR/camera.$ZM_CAMERA_ID.jpg $WHATSAPP_PHONE_NUMBER_RECIPIENT > /dev/null 2>&1
fi


# OSD Message using Doorbell plugin
# ---------------------------------
if [[ "$CCTV_KODI" = "1" ]];
then
kodi_screensaver_status
kodi_screensaver_poke 
kodi_addon_script_doorbell &
fi


# Call using Mobile Network
# --------------------------
[[ "$CCTV_CALL" = "1" ]] && \
create_asterisk_call_file


# OSD Message using jambulatv-osd script
# --------------------------------------
[[ "$CCTV_OSD" = "1" ]] && \
$OSD_SCRIPT -m "$NOTIFICATION_MESSAGE"


# Send Email (IMPORTANT:  Make this one the last notification to run)
# --------------------------------------------------------------------
[[ "$CCTV_EMAIL" = "1" ]] && \
$EMAIL_SCRIPT $EMAIL_NOTIFICATION_ADDRESS "$NOTIFICATION_SUBJECT" "$NOTIFICATION_MESSAGE" "$ZM_EVENTS_DIR/camera.${ZM_CAMERA_ID}.jpg"


# LAMP
# -----
# Switch off security Light if it was turned on after desired period e.g. 60 minutes
if [[ "$CCTV_LIGHTS" = "1" ]];
then
sleep $SMARTHOME_HUB_SECURITY_LAMP_DURATION
$LIGHTS_CMD "$SMARTHOME_HUB_SECURITY_LAMP_NAME" off
fi
