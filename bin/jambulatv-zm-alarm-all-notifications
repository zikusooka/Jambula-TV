#!/bin/sh
PROJECT_NAME=JambulaTV
PROJECT_SYSTEM_CONF_DIR=/etc/$PROJECT_NAME
PROJECT_FUNCTIONS_FILE=$PROJECT_SYSTEM_CONF_DIR/functions

# Source install functions
. $PROJECT_FUNCTIONS_FILE

# Source CCTV settings
. $ZONEMINDER_CCTV_SETTINGS_FILE

# Variables
ZM_CAMERA_ID=$1
ZM_CAMERA_NAME="$2"
ZM_CAMERA_EVENT_ID=$3
ZM_CAMERA_EVENT_TIME="$4"



###############
#  FUNCTIONS  #
###############

usage () {
# Camera ID
if [ "x$ZM_CAMERA_ID" = "x" ];
then
echo "Usage:  ./`basename $0` [ZM_CAMERA_ID] [ZM_CAMERA_NAME] [ZM_CAMERA_EVENT_ID] [ZM_CAMERA_EVENT_TIME]
"
exit 1
fi
# Camera Name
if [ "x$ZM_CAMERA_NAME" = "x" ];
then
echo "Usage:  ./`basename $0` $ZM_CAMERA_ID [ZM_CAMERA_NAME] [ZM_CAMERA_EVENT_ID] [ZM_CAMERA_EVENT_TIME]
"
exit 1
fi
# Camera Event ID
if [ "x$ZM_CAMERA_EVENT_ID" = "x" ];
then
echo "Usage:  ./`basename $0` $ZM_CAMERA_ID $ZM_CAMERA_NAME [ZM_CAMERA_EVENT_ID] [ZM_CAMERA_EVENT_TIME]
"
exit 1
fi
# Camera Event Time
if [ "x$ZM_CAMERA_EVENT_TIME" = "x" ];
then
echo "Usage:  ./`basename $0` $ZM_CAMERA_ID $ZM_CAMERA_NAME $ZM_CAMERA_EVENT_ID [ZM_CAMERA_EVENT_TIME]
"
exit 1
fi
}

capture_motion_event () {
# Log into ZM API
zoneminder_login_using_api
#
# Remove previous event data output file
[[ -e $ZONEMINDER_CCTV_TEMP_EVENT_DATA_OUPUT_FILE ]] && sudo rm -f $ZONEMINDER_CCTV_TEMP_EVENT_DATA_OUPUT_FILE 

# Query ZM event data using API
$CURL_CMD $CURL_OPTS -o $ZONEMINDER_CCTV_TEMP_EVENT_DATA_OUPUT_FILE -b $CURL_COOKIE_JAR_FILE \
	$ZONEMINDER_API_URL/events/${ZM_CAMERA_EVENT_ID}.json 
# Set attributes
ZM_EVENT_CAUSE=$(jq -r '. [].Event.Cause' $ZONEMINDER_CCTV_TEMP_EVENT_DATA_OUPUT_FILE)
ZM_EVENT_TIMESTAMP_START=$(jq -r '. [].Event.StartTime' $ZONEMINDER_CCTV_TEMP_EVENT_DATA_OUPUT_FILE)
ZM_EVENT_DATE=$(echo $ZM_EVENT_TIMESTAMP_START | awk {'print $1'})
ZM_EVENT_TIME=$(echo $ZM_EVENT_TIMESTAMP_START | awk {'print $2'})
ZM_EVENT_VIDEO_DIR=$ZONEMINDER_CONTENT_DIR/events/$ZM_CAMERA_ID/$ZM_EVENT_DATE/$ZM_CAMERA_EVENT_ID
ZM_EVENT_VIDEO_FILE=$ZM_EVENT_VIDEO_DIR/$ZM_CAMERA_EVENT_ID-video.mp4
#
# Source ZM subject and message notifications
set_notifications
#
# Logout of ZM API
zoneminder_logout_using_api
}

generate_message_4_notice () {
cat > $ZONEMINDER_CCTV_TEMP_MESSAGE_FILE << EOF
*$ZONEMINDER_NOTIFICATION_SUBJECT*

$ZONEMINDER_NOTIFICATION_MESSAGE
EOF
}

wait_4_complete_video_file () {
while [[ ! -e $ZM_EVENT_VIDEO_FILE ]];
do
sleep 1
done
}

set_cctv_alarm_lights () {
SMARTHOME_HUB_SECURITY_LAMP_NAME="Living Room"
SMARTHOME_HUB_SECURITY_LAMP_DURATION=60
}

cctv_alarm_lights_on () {
set_cctv_alarm_lights
# Turn on security Light and log event
$LIGHTS_TOOL "$SMARTHOME_HUB_SECURITY_LAMP_NAME" on
}

cctv_alarm_lights_off () {
set_cctv_alarm_lights
# Switch off security Light if it was turned on after desired period e.g. 60 minutes
sleep $SMARTHOME_HUB_SECURITY_LAMP_DURATION
$LIGHTS_TOOL "$SMARTHOME_HUB_SECURITY_LAMP_NAME" off
}

cctv_alarm_send_telegram () {
# Source Telegram credentials
. $TELEGRAM_CREDENTIALS_CONFIG
# Generate message for Telegram
generate_message_4_notice
# SendMesage
$TELEGRAM_TOOL SendMessage "$(cat $ZONEMINDER_CCTV_TEMP_MESSAGE_FILE). A video clip of this incident is attached" &
# SendVideo
$TELEGRAM_TOOL SendVideoDisk $ZM_EVENT_VIDEO_FILE &
}

cctv_alarm_send_whatsapp () {
# Source WhatsApp credentials
. $WHATSAPP_CREDENTIALS_CONFIG
# Generate message for WhatsApp
generate_message_4_notice
# SendMesage
sudo $WHATSAPP_TOOL sendmessage "$(cat $ZONEMINDER_CCTV_TEMP_MESSAGE_FILE). A video clip of this incident is attached" $WHATSAPP_PHONE_NUMBER_RECIPIENT > /dev/null 2>&1 
# SendVideo
sudo $WHATSAPP_TOOL sendvideo $ZM_EVENT_VIDEO_FILE $WHATSAPP_PHONE_NUMBER_RECIPIENT > /dev/null 2>&1
}

cctv_alarm_send_sms () {
SMS_PHONE_NUMBER=$(query_mysql_db contact_phone)
# SendMesage
$SMS_TOOL "Subject: $ZONEMINDER_NOTIFICATION_SUBJECT Details: $ZONEMINDER_NOTIFICATION_MESSAGE" $SMS_PHONE_NUMBER > /dev/null 2>&1
}

kodi_screensaver_status () {
KODI_SCREENSAVER_STATUS=$($CURL_CMD $CURL_OPTS -X POST -H "Content-Type: application/json" -u $KODI_HTTP_USER:$KODI_HTTP_PASS -d '{"jsonrpc": "2.0", "method": "XBMC.GetInfoBooleans", "params":{"booleans":["System.ScreenSaverActive"]},"id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc | jq .result[])
}

kodi_screensaver_poke () {
# Poke screen if screensaver is active
if [ "$KODI_SCREENSAVER_STATUS" = "true" ];
then
# Input.Select
$CURL_CMD $CURL_OPTS -X POST -H "Content-Type: application/json" -u "$KODI_HTTP_USER:$KODI_HTTP_PASS" -d '{"jsonrpc":"2.0","method":"Input.Select","id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
fi
}

kodi_addon_script_doorbell () {
$CURL_CMD $CURL_OPTS -X POST -H "Content-Type: application/json" -u "$KODI_HTTP_USER:$KODI_HTTP_PASS" -d '{"jsonrpc":"2.0","method":"Addons.ExecuteAddon","params":{"addonid":"script.doorbell","params":{"CamID":"'"$ZM_CAMERA_ID"'", "CamName":"'"$ZM_CAMERA_NAME"'", "CamEvent":"'"$ZM_CAMERA_EVENT_ID"'", "CamTime":"'"$ZM_CAMERA_EVENT_TIME"'", "CamMessage":"'"$ZONEMINDER_NOTIFICATION_MESSAGE"'", "CamHost":"'"$ZONEMINDER_DB_HOST"'", "CamPort":"'"$ZONEMINDER_WWW_PORT"'", "CamDBUser":"'"$ZONEMINDER_ADMIN_USER"'", "CamDBPass":"'"$ZONEMINDER_ADMIN_PASS"'"}},"id":1}' http://$KODI_HTTP_IP:$KODI_HTTP_PORT/jsonrpc
}

cctv_alarm_activate_kodi_doorbell () {
kodi_screensaver_status
kodi_screensaver_poke 
kodi_addon_script_doorbell &
}

create_asterisk_call_file () {
ASTERISK_DIAL_OUT_NUMBER=$(query_mysql_db contact_phone)
#
# Generate Asterisk call file
cat > /tmp/$ASTERISK_DIAL_OUT_SPOOL_FILE <<EOF
# Call file was automatically generated by $(basename $0) on $(date)
#
Channel: $ASTERISK_DIAL_OUT_CHANNEL/$ASTERISK_DIAL_OUT_TRUNK/$ASTERISK_DIAL_OUT_NUMBER
Codecs: gsm
#
MaxRetries: 0
#RetryTime: 60
WaitTime: 30
#
Context: zm-alarm-call
Extension: 5615
Priority: 1
#
Callerid: "$ASTERISK_DIAL_OUT_CID"
#
#Account: mysuperfunaccountcode
#
#AlwaysDelete: Yes
#
Set: CAM_ID=$ZM_CAMERA_ID
Set: CAM_NAME="$ZM_CAMERA_NAME"
Set: CAM_TIME="$ZM_CAMERA_EVENT_TIME"
Set: CAM_EVENT=$ZM_CAMERA_EVENT_ID
#
#Archive: yes
EOF
# Change permissions to asterisk user
chown $ASTERISK_FILES_USER /tmp/$ASTERISK_DIAL_OUT_SPOOL_FILE
}

cctv_alarm_call_gsm_phone () {
# Create Asterisk call file
create_asterisk_call_file
# Move to outgoing spool directory i.e. Make the call
mv -v /tmp/$ASTERISK_DIAL_OUT_SPOOL_FILE $ASTERISK_DIAL_OUT_SPOOL_DIR
}

cctv_alarm_notify_via_osd () {
$OSD_TOOL -m "$ZONEMINDER_NOTIFICATION_MESSAGE"
}

cctv_alarm_send_email () {
EMAIL_NOTIFICATION_ADDRESS=$(query_mysql_db notification_email_address)
#
$EMAIL_VIA_GMAIL_TOOL $EMAIL_NOTIFICATION_ADDRESS "$ZONEMINDER_NOTIFICATION_SUBJECT" "$ZONEMINDER_NOTIFICATION_MESSAGE" "$ZM_EVENT_VIDEO_FILE"
}



#################
#  MAIN SCRIPT  #
#################

# Usage
usage

# Quit if all cctv settings are turned off
[[ "$CCTV_ALL" = "1" ]] || exit 0

# Capture event image - This has to be here i.e. early on
capture_motion_event

# Wait for video file to be completely generated before proceeding
wait_4_complete_video_file


# Turn On Lights
# --------------
[[ "$CCTV_LIGHTS" = "1" ]] && cctv_alarm_lights_on

# Send Telegram
# -------------
[[ "$CCTV_TELEGRAM" = "1" ]] && cctv_alarm_send_telegram

# Send WhatsApp
# -------------
[[ "$CCTV_WHATSAPP" = "1" ]] && cctv_alarm_send_whatsapp

# Send SMS
# --------
[[ "$CCTV_SMS" = "1" ]] && cctv_alarm_send_sms

# OSD Message using Doorbell plugin
# ---------------------------------
[[ "$CCTV_KODI" = "1" ]] && cctv_alarm_activate_kodi_doorbell

# Call using Mobile Network
# -------------------------
[[ "$CCTV_CALL" = "1" ]] && cctv_alarm_call_gsm_phone

# OSD Message using jambulatv-osd script
# --------------------------------------
[[ "$CCTV_OSD" = "1" ]] && cctv_alarm_notify_via_osd

# Send Email (IMPORTANT:  Make this one the last notification to run)
# -------------------------------------------------------------------
[[ "$CCTV_EMAIL" = "1" ]] && cctv_alarm_send_email

# Turn Off Lights
# ---------------
[[ "$CCTV_LIGHTS" = "1" ]] && cctv_alarm_lights_off
