--- ell/genl.c	2020-06-19 15:39:19.878627745 +0300
+++ ell/genl.c	2020-06-20 19:49:21.604837786 +0300
@@ -101,7 +101,7 @@
 struct l_genl_msg {
 	int ref_count;
 	int error;
-	char *error_msg;
+        char *error_msg;
 	uint8_t cmd;
 	uint8_t version;
 	void *data;
@@ -729,16 +729,6 @@
 	return request->handle_id == id;
 }
 
-#define NLA_OK(nla,len)         ((len) >= (int) sizeof(struct nlattr) && \
-				(nla)->nla_len >= sizeof(struct nlattr) && \
-				(nla)->nla_len <= (len))
-#define NLA_NEXT(nla,attrlen)	((attrlen) -= NLMSG_ALIGN((nla)->nla_len), \
-				(struct nlattr*)(((char*)(nla)) + \
-				NLMSG_ALIGN((nla)->nla_len)))
-
-#define NLA_LENGTH(len)		(NLMSG_ALIGN(sizeof(struct nlattr)) + (len))
-#define NLA_DATA(nla)		((void*)(((char*)(nla)) + NLA_LENGTH(0)))
-#define NLA_PAYLOAD(nla)	((int)((nla)->nla_len) - NLA_LENGTH(0))
 
 static struct l_genl_msg *msg_alloc(uint8_t cmd, uint8_t version, uint32_t size)
 {
@@ -786,32 +776,10 @@
 
 	if (nlmsg->nlmsg_type == NLMSG_ERROR) {
 		struct nlmsgerr *err = NLMSG_DATA(nlmsg);
-		unsigned int offset = 0;
-		struct nlattr *nla;
-		int len;
 
 		msg->error = err->error;
-
-		if (!(nlmsg->nlmsg_flags & NLM_F_ACK_TLVS))
-			goto done;
-
-		if (!(nlmsg->nlmsg_flags & NLM_F_CAPPED))
-			offset = err->msg.nlmsg_len - sizeof(struct nlmsghdr);
-
-		if (nlmsg->nlmsg_len < offset)
 			goto done;
 
-		nla = (void *)(err + 1) + offset;
-		len = nlmsg->nlmsg_len - offset;
-
-		for (; NLA_OK(nla, len); nla = NLA_NEXT(nla, len)) {
-			if ((nla->nla_type & NLA_TYPE_MASK) !=
-					NLMSGERR_ATTR_MSG)
-				continue;
-
-			msg->error_msg = l_strdup(NLA_DATA(nla));
-			goto done;
-		}
 	}
 
 	msg->data = l_memdup(nlmsg, nlmsg->nlmsg_len);
@@ -1106,9 +1074,7 @@
 	struct l_genl *genl;
 	struct sockaddr_nl addr;
 	socklen_t addrlen = sizeof(addr);
-	int fd;
-	int pktinfo = 1;
-	int ext_ack = 1;
+	int fd, pktinfo = 1;
 
 	fd = socket(PF_NETLINK, SOCK_DGRAM | SOCK_CLOEXEC | SOCK_NONBLOCK,
 							NETLINK_GENERIC);
@@ -1129,10 +1095,6 @@
 					&pktinfo, sizeof(pktinfo)) < 0)
 		goto err;
 
-	/* Try setting EXT_ACK, but ignore the error if it isn't set */
-	setsockopt(fd, SOL_NETLINK, NETLINK_EXT_ACK,
-					&ext_ack, sizeof(ext_ack));
-
 	genl = l_new(struct l_genl, 1);
 	genl->pid = addr.nl_pid;
 	genl->ref_count = 1;
@@ -1596,7 +1558,6 @@
 	if (__atomic_sub_fetch(&msg->ref_count, 1, __ATOMIC_SEQ_CST))
 		return;
 
-	l_free(msg->error_msg);
 	l_free(msg->data);
 	l_free(msg);
 }
@@ -1728,6 +1689,18 @@
 	return true;
 }
 
+#define NLA_OK(nla,len)         ((len) >= (int) sizeof(struct nlattr) && \
+				(nla)->nla_len >= sizeof(struct nlattr) && \
+				(nla)->nla_len <= (len))
+#define NLA_NEXT(nla,attrlen)	((attrlen) -= NLMSG_ALIGN((nla)->nla_len), \
+				(struct nlattr*)(((char*)(nla)) + \
+				NLMSG_ALIGN((nla)->nla_len)))
+
+#define NLA_LENGTH(len)		(NLMSG_ALIGN(sizeof(struct nlattr)) + (len))
+#define NLA_DATA(nla)		((void*)(((char*)(nla)) + NLA_LENGTH(0)))
+#define NLA_PAYLOAD(nla)	((int)((nla)->nla_len) - NLA_LENGTH(0))
+
+
 LIB_EXPORT bool l_genl_attr_init(struct l_genl_attr *attr,
 						struct l_genl_msg *msg)
 {
