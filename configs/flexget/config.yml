secrets: variables.yml

web_server:
  bind: 0.0.0.0
  port: 8532 # '{{secrets.webui.port}}'

api: yes
webui: yes

templates:

##########
# Global #
# ########
  global:
    regexp:
      reject:
        - \b(s|d)ub(s|bed)?\b: {from: title}  
        - \b(duo|tri|quadri|tetra|penta)logy\b: {from: title}  
        - \b3-?D\b: {from: title}
        - \b(ita|ger|fra|spa|swe|nor|nordic|fr|kor|esp|nl|pl)\b: {from: title}
        - (?i)[ .]asap[ .]: {from: title}
        - (?i)[ .]avc[ .]: {from: title}
        - (?i)[ .]bdscr[ .]: {from: title}
        - (?i)[ .]br5[ .]: {from: title}
        - (?i)[ .]btrtd[ .]: {from: title}
        - (?i)[ .]bts[ .]: {from: title}
        - (?i)[ .]cam[ .]: {from: title}
        - (?i)[ .]dual[ .]: {from: title}
        - (?i)[ .]dutch[ .]: {from: title}
        - (?i)[ .]dvdscr[ .]: {from: title}
        - (?i)[ .]ecc[ .]: {from: title}
        - (?i)[ .]facepalm[ .]: {from: title}
        - (?i)[ .]fastsub[ .]: {from: title}
        - (?i)[ .]french[ .]: {from: title}
        - (?i)[ .]german[ .]: {from: title}
        - (?i)[ .]hdcam[ .]: {from: title}
        - (?i)[ .]hdtc[ .]: {from: title}
        - (?i)[ .]hindi[ .]: {from: title}
        - (?i)[ .]ipad[ .]: {from: title}
        - (?i)[ .]italian[ .]: {from: title}
        - (?i)[ .]japanese[ .]: {from: title}
        - (?i)[ .]latin[ .]: {from: title}
        - (?i)[ .]multi[ .]: {from: title}
        - (?i)[ .]nordic[ .]: {from: title}
        - (?i)[ .]preair[ .]: {from: title}
        - (?i)[ .]ppvrip[ .]: {from: title}
        - (?i)[ .]qebs[ .]: {from: title}
        - (?i)[ .]r5[ .]: {from: title}
        - (?i)[ .]r6[ .]: {from: title}
        - (?i)[ .]scr[ .]: {from: title}
        - (?i)[ .]screener[ .]: {from: title}
        - (?i)[ .]spanish[ .]: {from: title}
        - (?i)[ .]subtitulado[ .]: {from: title}
        - (?i)[ .]swedish[ .]: {from: title}
        - (?i)[ .]tc[ .]: {from: title}
        - (?i)[ .]temporada[ .]: {from: title}
        - (?i)[ .]tntvillage[ .]: {from: title}
        - (?i)[ .]trailer[ .]: {from: title}
        - (?i)[ .]ts[ .]: {from: title}
        - (?i)[ .]vostfr[ .]: {from: title}
        - (?i)[ .]web-dl[ .]: {from: title}
        - (?i)[ .]webrip[ .]: {from: title}
        - (?i)[ .]webscr[ .]: {from: title}
    content_filter:
      require:
        - '*.avi'
        - '*.mkv'
        - '*.mpg'
        - '*.mpeg'
        - '*.mp4'
        - '*.r0*'
        - '*.part0*'
      reject: 
        - 'password.txt'
        - 'password.zip'
        - '*.wmv'
    domain_delay:
      bt-chat.com: 5 seconds
      torrentz.eu: 5 seconds
    rtorrent_magnet: '{{secrets.global.rtorrent_magnet}}'
    email:
      from: '{{secrets.email.from}}'
      to: '{{secrets.email.to}}'
      subject: '{{secrets.email.subject}}'
      smtp_host: smtp.gmail.com
      smtp_port: 587
      smtp_login: true
      smtp_username: '{{secrets.email.smtp_username}}'
      smtp_password: '{{secrets.email.smtp_password}}'
      smtp_tls: yes
 
    send_telegram:
      bot_token: '{{secrets.telegram.bot_token}}'
      parse_mode: markdown
      recipients:
        - username: '{{secrets.telegram.username}}'
        #- fullname: 
            #first: '{{secrets.telegram.first_name}}'
            #sur: '{{secrets.telegram.sur_name}}'
      template: |+
        {% if task == "tv_shows" %}*[JambulaTV] TV Show(s) Queued

        The following TV Episode has been queued for download:
        {% elif task == "movies" %}*[JambulaTV] Movie(s) Queued*

        The following Movie has been queued for download:
        {% elif task == "internet_tv" %}*[JambulaTV] Podcast(s) Queued*

        The following Podcast has been queued for download:
        {% elif task == "move_tv_shows" %}*[JambulaTV] New TV Episode(s) Added*

        The following TV Series Episode was successfully downloaded. You may find it under 'TV Shows' on your JambulaTV. Enjoy!
        {% elif task == "move_movies" %}*[JambulaTV] New Movie(s) Added*

        The following movie was successfully downloaded. You may find it under 'Movies' on your JambulaTV. Enjoy!
        {% else %}*[JambulaTV] Other Item(s) Added*

        An item has been added from task: {{task|replace("_", "-")}}
        {% endif %}
        {% if series_name is defined %}
        *{{series_name}}* - {{series_id}} - {{quality|d('')}}
        *{{tvmaze_episode_name|d(tvdb_ep_name)|d('')}}*
        [Image]({{tvmaze_series_original_image|replace("_", "%5F")}})
        [Show page]({{tvmaze_series_url|replace("_", "%5F")}})
        {% elif imdb_name is defined %}
        *{{imdb_name}}* - ({{imdb_year}})
        {{quality|d('')}}
        {{imdb_score}}/10 - {{imdb_votes}} votes
        {{imdb_genres|join(', ')|title}}  
        *Plot:* {{imdb_plot_outline}}
        [Image]({{tmdb_posters[0]|replace("_", "%5F")}})
        [Movie Page]({{imdb_url|d('')}})     
        {% else %}
        *{{title}}*
        {% endif %}


##############
#  Templates #
##############
  # TV
  # --
  tv:
    content_size:
      max: 490
    free_space:
      path: '{{secrets.tv.path}}'
      space: 1000
    exists_series:
      - '{{secrets.tv.exists_series}}'
    series:
      settings:
        group 1:
          quality: "h264 xvid !720p"
          propers: no 
          identified_by: ep
          tracking: backfill
    priority: 10
    include: [ '{{secrets.tv.include}}' ]
    download: '{{secrets.tv.download}}'
    verify_ssl_certificates: no

    # Pull TV shows from trakt.tv watchlist
    discover:
      what: 
        - emit_series:
            from_start: yes
        - trakt_list:
            username: '{{secrets.trakt.username}}'
            list: '{{secrets.trakt.watchlist}}'
            type: shows
      from:
        - torrentz: verified

  # Movies 
  #--------
  movies:
    limit_new: 1
    seen_movies:
      matching: strict
    imdb_required: yes
    imdb:
      min_score: 8.0
      min_votes: 60000
      min_year: 2015
      accept_languages:
        - english
      #reject_genres:
        #- adventure
        #- animation
        #- horror
        #- musical
        
    # Lists
    discover:
      what:
    # List of wanted movies
        - movie_list: wanted_movies
    # Pull movies from trakt.tv watchlist and add to the movie queue
        - trakt_list:
            username: '{{secrets.trakt.username}}'
            list: '{{secrets.trakt.watchlist}}'
            type: movies
      from:
        - torrentz: verified
    # 
    quality: 
      - "h264 xvid"
      - "!dts !cam !10bit"
    content_size:
      max: 49900
      min: 600
    free_space:
      path: '{{secrets.movies.path}}'
      space: 1000
    exists_movie:
      - '{{secrets.movies.exists_movie}}'
    only_new: no
    priority: 15
    download: '{{secrets.movies.download}}'
#    accept_all: yes # Uncomment if IMDB is not used

# Podcasts 
# --------
  podcasts:
    disable:
      - regexp
    free_space:
      path: '{{secrets.podcasts.path}}'
      space: 1000
    exists:
      - '{{secrets.podcasts.exists}}'
    limit_new: 5
    priority: 5
    include: [ '{{secrets.podcasts.include}}' ]
    exec:
      auto_escape: no
      on_start:
        # Add timestamp to log file
        phase: echo "# $(date '+%F %H:%M'):" >> '{{secrets.podcasts.download_log}}'
      on_output:
        # Copy podcasts URLS to input-file for aria2c
        for_accepted: echo "%(url)s" >> '{{secrets.podcasts.download_file}}'
      on_exit:
        # Add URL to log file
        for_accepted: echo "%(url)s" >> '{{secrets.podcasts.download_log}}'

        # Start aria2
        phase: /bin/sh '{{secrets.podcasts.download_script}}' '{{secrets.podcasts.download_dir}}' '{{secrets.podcasts.download_file}}' '{{secrets.email.to}}'

    accept_all: yes

# Kodi Library 
# ------------
  kodi_library_scan:
    kodi_library:
      action: scan
      category: video
      url: '{{secrets.kodi.url}}'
      port: 8510
      #port: '{{secrets.kodi.port}}'
      username: '{{secrets.kodi.username}}'
      password: '{{secrets.kodi.password}}'


###########
#  TASKS  #
###########
tasks:

  # TV Shows
  # --------
  tv_shows:
    inputs:
      - rss: { url: '{{secrets.tv_feeds.torrentz}}', silent: yes }
      - rss: { url: '{{secrets.tv_feeds.kat}}', silent: yes }
      - rss: { url: '{{secrets.tv_feeds.kickass}}', silent: yes }
      - rss: { url: '{{secrets.tv_feeds.ezrss}}', silent: yes }
      - rss: { url: '{{secrets.tv_feeds.torlock}}', silent: yes }
      - rss: { url: '{{secrets.tv_feeds.mininova}}', silent: yes }
    template: 
      - tv

  # Movies
  # ------
  movies:
    inputs:
      - rss: { url: '{{secrets.movie_feeds.kat}}', silent: yes }
      - rss: { url: '{{secrets.movie_feeds.kickass}}', silent: yes }
      - rss: { url: '{{secrets.movie_feeds.torrentz}}', silent: yes }
      - rss: { url: '{{secrets.movie_feeds.torlock}}', silent: yes }
      - rss: { url: '{{secrets.movie_feeds.mininova}}', silent: yes }
    template: 
      - movies

  # Podcasts
  # --------
  internet_tv:
    template: 
      - podcasts

  # Move TV Shows to Kodi directory
  # -------------------------------
  move_tv_shows:
    priority: 99 # Make top priority over move_movies
    disable:
      - retry_failed
      - seen
      - email
      - regexp
    thetvdb_lookup: yes
    tvmaze_lookup: yes
    metainfo_series: yes
    require_field: [series_name, series_id, series_season]
    accept_all: yes
    seen: local
    all_series:
      parse_only: yes
    filesystem:
      path: 
        - "/{{secrets.tv.series_completed_dir}}"
      recursive: yes
      retrieve: 
        - files
        - dirs
      regexp: '.*\.(avi|mkv|mp4|m4v|iso)$' 
    move:
      to: "/{{secrets.tv.series_jambulatv_dir}}/{{series_name|replace(' ', '_')}}/Season_{{'%02d'|format(series_season)}}"
      filename: "{{series_name}}.{{series_id}}.{{quality|upper}}"
      clean_source: 5
      along:
        - sub
        - srt
        - extrafanart
    exec:
      auto_escape: yes
      on_start:
    # Create dummy 6M file
        phase: truncate -s 6M '/{{secrets.tv.series_completed_dir}}/DO.NOT.REMOVE.ME'
    # Scan video library
    template:
      - kodi_library_scan

  # Move Movies to Kodi directory
  # -------------------------------
  move_movies:
    priority: 97
    disable:
      - retry_failed
      - seen
      - email
      - regexp
    accept_all: yes
    seen: local
    imdb_lookup: yes
    imdb_required: yes
    tmdb_lookup: yes
    proper_movies: yes
    require_field: [movie_name, movie_year]
    filesystem:
      path: 
        - "/{{secrets.movies.movies_completed_dir}}"
      recursive: yes
      retrieve: 
        - files
        - dirs
      regexp: '.*\.(avi|mkv|mp4|m4v|iso)$' 
    move:
      to: "/{{secrets.movies.movies_jambulatv_dir}}"
      filename: "{{movie_name|replace(' ', '.')|replace('/', '_')|replace(':', ' -')}}.({{movie_year}}){% if quality|default(False) %}: - {{quality}}{% endif %}"
      clean_source: 2
      along:
        - sub
        - srt
        - extrafanart
    exec:
      auto_escape: yes
      on_start:
    # Create dummy 3M file
        phase: truncate -s 3M '/{{secrets.movies.movies_completed_dir}}/DO.NOT.REMOVE.ME'
    # Scan video library
    template:
      - kodi_library_scan


##############
#  Scheduler #
##############
schedules:
  - tasks: [tv_shows]
    schedule:
      day_of_week: '{{secrets.tv.day_of_week}}'
      hour: '{{secrets.tv.hour}}'      
      minute: '{{secrets.tv.minute}}'
      day: '*'
      week: '*'
      month: '*'
      year: '*'

  - tasks: [movies]
    schedule:
      day_of_week: '{{secrets.movies.day_of_week}}'
      hour: '{{secrets.movies.hour}}'
      minute: '{{secrets.movies.minute}}'
      day: '*'
      week: '*'
      month: '*'
      year: '*'

  - tasks: [internet_tv]
    schedule:
      day_of_week: '{{secrets.podcasts.day_of_week}}'
      hour: '{{secrets.podcasts.hour}}'
      minute: '{{secrets.podcasts.minute}}'
      day: '*'
      week: '*'
      month: '*'
      year: '*'
