secrets: variables.yml
templates:

##########
# Global #
# ########
  global:
    regexp:
      reject:
        - (s|d)ub(s|bed)?\b: {from: title}   # subbed/dubbed/etc videos
        - \b(duo|tri|quadri|tetra|penta)logy\b: {from: title}   # Series
        - \b3-?D\b: {from: title}   # 3D displays
        - \btrailer\b: {from: title}   # Trailers matched as movies
        - \bR5\b: {from: title}   # Poor quality types
        - \bWEBSCR\b: {from: title}   # Features like "720p"
        - \bscreener\b: {from: title}
        - \bTS\b: {from: title}
        - \bCam\b: {from: title}
        - '{C_P}': {from: title}   # Poor quality releases
        - TrTd TeaM: {from: title}
        - \[TNTVillage\]: {from: title}
        - \[facepalm\]: {from: title}
        - \bASAP\b: {from: title}
        - \bNL.Subs.DutchReleaseTeam\b: {from: title}
        
    #torrent_alive: yes # 10 # Require at least 40 seeds of any torrent
    content_filter:
      require:
        - '*.avi'
        - '*.mkv'
        - '*.mpg'
        - '*.mpeg'
        - '*.mp4'
        - '*.r0*'
        - '*.part0*'
      reject: 
        - 'password.txt'
        - 'password.zip'
        - '*.wmv'
    domain_delay:
      bt-chat.com: 5 seconds
      torrentz.eu: 5 seconds
    rtorrent_magnet: '{{secrets.global.rtorrent_magnet}}'
    email:
      from: '{{secrets.email.from}}'
      to: '{{secrets.email.to}}'
      subject: '{{secrets.email.subject}}'
      smtp_host: smtp.gmail.com
      smtp_port: 587
      smtp_login: true
      smtp_username: '{{secrets.email.smtp_username}}'
      smtp_password: '{{secrets.email.smtp_password}}'
      smtp_tls: yes
 
    send_telegram:
      bot_token: '{{secrets.telegram.bot_token}}'
      parse_mode: markdown
      recipients:
        - username: '{{secrets.telegram.username}}'
        #- fullname: 
            #first: '{{secrets.telegram.first_name}}'
            #sur: '{{secrets.telegram.sur_name}}'
      template: |+
        *[JambulaTV] The following {{task|replace("s", "(s)")}} have been queued for download:
        
        *{{title}}


##############
#  Templates #
##############
  # TV
  # --
  tv:
    content_size:
      max: 490
    free_space:
      path: '{{secrets.tv.path}}'
      space: 1000
    exists_series:
      - '{{secrets.tv.exists_series}}'
    series:
      settings:
        group 1:
          quality: "h264 xvid"
          propers: no 
          identified_by: ep
          tracking: backfill
    priority: 10
    include: [ '{{secrets.tv.include}}' ]
    download: '{{secrets.tv.download}}'
    verify_ssl_certificates: no

    # Pull TV shows from trakt.tv watchlist
    discover:
      what: 
        - emit_series:
            from_start: yes
        - trakt_list:
            username: '{{secrets.trakt.username}}'
            list: '{{secrets.trakt.watchlist}}'
            type: shows
      from:
        - torrentz: verified

  # Movies 
  #--------
  movies:
    limit_new: 1
    regexp:
      reject:
        - s\d+e\d+: {from: title}
        - '\d{4}.\d{2}.\d{2}': {from: title}
        - \d+x\d+: {from: title}
    plugin_priority:
      if: 173
      proper_movies: 171
    # Lists
    discover:
      what:
    # List of wanted movies
        - movie_list: wanted_movies
    # Pull movies from trakt.tv watchlist and add to the movie queue
        - trakt_list:
            username: '{{secrets.trakt.username}}'
            list: '{{secrets.trakt.watchlist}}'
            type: movies
      from:
        - torrentz: verified
    # 
    quality: 
      - 480p+
      - "!dts !cam !10bit"
    content_size:
      max: 49900
      min: 600
    free_space:
      path: '{{secrets.movies.path}}'
      space: 1000
    exists_movie:
      - '{{secrets.movies.exists_movie}}'
    only_new: no
    priority: 15
    download: '{{secrets.movies.download}}'
    accept_all: yes

# Podcasts 
# --------
  podcasts:
    free_space:
      path: '{{secrets.podcasts.path}}'
      space: 1000
    exists:
      - '{{secrets.podcasts.exists}}'
    limit_new: 5
    priority: 5
    include: [ '{{secrets.podcasts.include}}' ]
    exec:
      auto_escape: no
      on_start:
        # Add timestamp to log file
        phase: echo "# $(date '+%F %H:%M'):" >> '{{secrets.podcasts.download_log}}'
      on_output:
        # Copy podcasts URLS to input-file for aria2c
        for_accepted: echo "%(url)s" >> '{{secrets.podcasts.download_file}}'
      on_exit:
        # Add URL to log file
        for_accepted: echo "%(url)s" >> '{{secrets.podcasts.download_log}}'

        # Start aria2
        phase: /bin/sh '{{secrets.podcasts.download_script}}' '{{secrets.podcasts.download_dir}}' '{{secrets.podcasts.download_file}}' '{{secrets.email.to}}'

    accept_all: yes


###########
#  TASKS  #
###########
tasks:

  # TV Shows
  # --------
  tv_shows:
    inputs:
      - rss: { url: '{{secrets.tv_feeds.torrentz}}', silent: yes }
      - rss: { url: '{{secrets.tv_feeds.kat}}', silent: yes }
      - rss: { url: '{{secrets.tv_feeds.kickass}}', silent: yes }
      - rss: { url: '{{secrets.tv_feeds.ezrss}}', silent: yes }
      - rss: { url: '{{secrets.tv_feeds.torlock}}', silent: yes }
      - rss: { url: '{{secrets.tv_feeds.mininova}}', silent: yes }
    template: 
      - tv

  # Movies
  # ------
  movies:
    inputs:
      - rss: { url: '{{secrets.movie_feeds.kat}}', silent: yes }
      - rss: { url: '{{secrets.movie_feeds.kickass}}', silent: yes }
      - rss: { url: '{{secrets.movie_feeds.torrentz}}', silent: yes }
      - rss: { url: '{{secrets.movie_feeds.torlock}}', silent: yes }
      - rss: { url: '{{secrets.movie_feeds.mininova}}', silent: yes }
    template: 
      - movies

  # Podcasts
  # --------
  internet_tv:
    template: podcasts

  # Move TV Shows to Kodi directory
  # -------------------------------
  move_tv_shows:
    priority: 21
    disable:
      - retry_failed
      - email
      - send_telegram # Will send using jambulatv-telegram below
    metainfo_series: yes
    require_field: [series_name, series_id, series_season]
    accept_all: yes
    seen: local
    all_series:
      parse_only: yes
    parsing:
      series: guessit
    filesystem:
      path: 
        - "/{{secrets.tv.series_completed_dir}}"
      recursive: yes
      retrieve: 
        - files
        - dirs
      regexp: '.*\.(avi|mkv|mp4|m4v|iso)$' 
    move:
      to: "/{{secrets.tv.series_jambulatv_dir}}/{{series_name}}/Season_{{'%02d'|format(series_season)}}"
      filename: "{{series_name}}.{{series_id}}.{{quality|upper}}"
      clean_source: 1
      along:
        - sub
        - srt
    exec:
      auto_escape: yes
      on_start:
    # Create dummy 50K file
        phase: truncate -s 2M '/{{secrets.tv.series_completed_dir}}/DO.NOT.REMOVE.ME'
      on_output:
        # Send telegram message
        for_accepted: 
          - jambulatv-telegram sendmessage '{{secrets.telegram.bot_token}}' "[JambulaTV] The TV Series {{title}} was successfully downloaded. You may find it at {{url}}"
    # 
    # Scan kodi video library
    kodi_library:
      action: scan
      category: video
      url: '{{secrets.kodi.url}}'
      port: 8510
      #port: '{{secrets.kodi.port}}'
      username: '{{secrets.kodi.username}}'
      password: '{{secrets.kodi.password}}'


##############
#  Scheduler #
##############
schedules:
  - tasks: [tv_shows, move_tv_shows]
    schedule:
      day_of_week: '{{secrets.tv.day_of_week}}'
      hour: '{{secrets.tv.hour}}'      
      minute: '{{secrets.tv.minute}}'
      day: '*'
      week: '*'
      month: '*'
      year: '*'

  - tasks: [movies]
    schedule:
      day_of_week: '{{secrets.movies.day_of_week}}'
      hour: '{{secrets.movies.hour}}'
      minute: '{{secrets.movies.minute}}'
      day: '*'
      week: '*'
      month: '*'
      year: '*'

  - tasks: [internet_tv, move_tv_shows]
    schedule:
      day_of_week: '{{secrets.podcasts.day_of_week}}'
      hour: '{{secrets.podcasts.hour}}'
      minute: '{{secrets.podcasts.minute}}'
      day: '*'
      week: '*'
      month: '*'
      year: '*'
